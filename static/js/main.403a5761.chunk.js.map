{"version":3,"sources":["state-mgmt/actions.ts","state-mgmt/auxiliary.ts","tools/Vector.ts","tools/auxiliary.ts","state-mgmt/Mode.ts","state-mgmt/UI.ts","state-mgmt/Node.ts","state-mgmt/Arrow.ts","state-mgmt/ControlPoint.ts","state-mgmt/Tape.ts","state-mgmt/TransitionDetail.ts","state-mgmt/UndoRedo.ts","state-mgmt/Message.ts","state-mgmt/Sim.ts","state-mgmt/MetaData.ts","state-mgmt/state.ts","state-mgmt/reducer.ts","state-mgmt/middleware/keyboardShortcuts.ts","ErrorReport/ErrorReport.tsx","ErrorReport/MissingStartState.tsx","ErrorReport/NondeterministicTransition.tsx","HaltReport/HaltReport.tsx","HaltReport/Accept.tsx","HaltReport/Reject.tsx","state-mgmt/sagas/autoSave.ts","state-mgmt/sagas/sim.ts","state-mgmt/sagas/index.ts","state-mgmt/store.ts","state-mgmt/middleware/addTransition.ts","state-mgmt/middleware/deleteTransitionDetail.ts","state-mgmt/middleware/deleteNode.ts","state-mgmt/middleware/validateTransitionDetails.ts","state-mgmt/middleware/validatePreSim.ts","state-mgmt/middleware/halt.ts","state-mgmt/middleware/loadSave.ts","state-mgmt/middleware/downloadUpload.ts","Arrow/Arrow.tsx","Node/Node.tsx","ControlPoint/ControlPoint.tsx","TransitionDetail/TransitionDetail.tsx","TransitionDetails/TransitionDetails.tsx","ShadowNode/ShadowNode.tsx","Canvas/Canvas.tsx","state-mgmt/EditControls.ts","EditControls/EditControls.tsx","AppControls/AppControls.tsx","Tape/Tape.tsx","SimControls/SimControls.tsx","NameInput/NameInput.tsx","Message/Message.tsx","App/App.tsx","index.tsx"],"names":["addTransitionDetail","arrow","type","payload","moveTape","direction","writeTapeSymbol","symbol","deleteEntities","nodes","arrows","controlPoints","transitionDetails","displayMessage","title","content","STEP_SIM","PLAY_SIM","PAUSE_SIM","RESET_SIM","setCurrentState","id","setActiveNode","setActiveTransitionDetail","setActiveControlPoint","setActiveArrow","HALT_ACCEPT","haltAccept","HALT_REJECT","haltReject","switchMode","mode","saveSnapshot","installSnapshot","snapshot","currentLatest","state","wip","committed","getSnapshot","_","get","revertToSnapshot","entities","mapValues","value","key","Vector","x","y","Math","sqrt","this","len","magnitude","Error","v","plus","scale","factor","atan2","dot","repeat","what","times","res","Array","i","Modes","EDIT","SIM","initModeState","isInEditMode","modeReducer","action","initUIState","mousePos","keysDown","isMouseDownNode","isMouseDownControlPoint","isAddingNode","wasMouseReleasedOverNode","wasMouseDragged","wasMnemonicChanged","ui","isMultiselect","includes","uiReducer","keyDown","keyUp","mouseDownNode","mouseUpNode","mouseDownControlPoint","mouseUpControlPoint","mouseDownCanvas","mouseUpCanvas","startAddingNode","addNode","mouseMoveCanvas","pos","changeMnemonic","blurMnemonic","uniq","filter","k","allNodes","Object","values","byId","nodeById","node","find","n","isNodeSelected","selected","isNodeFinal","isFinal","selectedNodes","isStartNode","startNode","nodesReducer","addArrow","start","end","makeStartNode","toggleFinalNodes","selectAllNodes","uuid","mnemonic","mergeWith","_1","_2","undefined","ids","omit","merge","map","atLeastOneFinal","some","updated","reduce","acc","keys","xs","offsets","nodeId","from","minus","moved","updatedPos","allArrows","arrowById","arrowsReducer","allControlPoints","controlPointForArrow","arrowId","cp","controlPointsReducer","mouseUpNodeOrCanvas","startPos","endPos","controlPos","diff","perp","normalize","constructStandardPos","selectedOffset","prepForDirectMove","prepForIndirectMove","controlPoint","fullOffsets","halfOffsets","p","includesStart","includesEnd","fixedPos","movingPos","movingOffset","toCP","cpShadow","project","fractionAlong","perpLength","moveDirect","moveIndirect","fullMoved","halfMoved","newPos","alongDiff","initTapeState","entries","scrollLeft","active","focused","TapeDirections","L","R","tapeEntries","tape","focusedTapeCell","currentReadSymbol","tapeReducer","changeTapeCell","updateScrollLeft","focusTapeCell","clearTape","update","clone","length","updateBlocks","leftPos","cellDiff","floor","slice","every","val","set","allTransitionDetails","allGroupedTransitionDetails","groupBy","detail","transitionDetailsForArrow","duplicateTransitionDetails","duplicates","transitionDetailsByStart","ds","read","group","flattenDeep","focusedDetail","transitionDetailsReducer","changeTransitionDetail","deleteTransitionDetail","focusTransitionDetail","blurTransitionDetail","markDuplicateTransitions","write","move","isFocused","isDuplicate","undoRedoReducer","undoRedo","addRecord","undo","actions","record","rest","redoRecord","redoable","redo","undoRecord","description","showMessage","message","show","messageTitle","messageContent","messageReducer","dismissMessage","currentState","sim","isNodeActive","activeNode","isArrowActive","activeArrow","isControlPointActive","activeControlPoint","activeTransitionDetail","simReducer","A","resetSim","machineName","metaData","name","metaDataReducer","changeMachineName","initState","newMachine","freshSnapshot","reducer","keyBindings","e","ctrlKey","preventDefault","st","metaKey","ErrorReport","className","props","whatsWrong","howToFix","React","Component","HaltReport","wasSuccess","accepted","autoSave","FIVE_SECONDS","delay","put","play","playSim","makeStep","singleStep","fork","playTask","take","cancel","select","current","readSymbol","availableTransitionInfo","transitionInfo","interval","endId","controlPointId","transitionDetailId","writeSymbol","tapeDirection","outgoing","arrowsForStart","flatten","takeEvery","main","all","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","api","next","getState","event","keyHandler","altAction","existingArrow","startId","a","arrowForEndpoints","nodeIds","arrowsForNode","arrowIds","controlPointIds","transitionDetailIds","hasStartNode","NondeterministicTransition","MissingStartState","Accept","Reject","saved","localStorage","getItem","JSON","parse","clearItem","setItem","stringify","machineString","dataURI","encodeURIComponent","filenameCandidate","toLowerCase","split","join","filename","linkElt","document","createElement","setAttribute","click","installMachine","uploadElt","removeEventListener","files","text","machine","accept","addEventListener","run","mainSaga","Arrow","classNames","isEditable","isActive","pathString","isSelfLoop","computeCubicPathString","computeQuadraticPathString","d","control","mid","bezierControl","v1","v2","ctrl1","ctrl2","connect","ownProps","details","Node","handleMouseDown","mouseDown","handleMouseUp","mouseUp","handleInputChange","evt","target","handleInputBlur","isSelected","isStart","mnemonicClassName","mnemonicPos","NODE_RADIUS","onMouseDown","onMouseUp","style","position","left","top","disabled","onChange","onBlur","maxLength","dispatch","ControlPoint","computeCubicString","p1","p2","tip","ARROW_LENGTH","TransitionDetail","readRef","createRef","handleSelectChange","changeDirection","selectLeft","selectRight","handleFocus","onFocus","handleBlur","handleDeleteClick","onDelete","inputClassName","readInputClassName","selectorClassName","ref","placeholder","onClick","focus","property","TransitionDetails","handleDetailChange","changeDetail","stance","computeStance","isTopStance","renderAddDetailButton","activeDetail","handleDetailDelete","handleDetailFocus","handleDetailBlur","deleteDetail","focusDetail","blurDetail","addDetail","computeSelfLoopStance","computeStandardStance","theta","angle","computeClassNameFromAngle","PI","anchor","test","handleAddDetailButton","ShadowNode","add","isVisible","Canvas","computeMousePos","handleMouseMove","mouseMove","onMouseMove","xmlns","width","height","currentTarget","getBoundingClientRect","clientX","clientY","whichButtonTypes","EditButtonTypes","ADD_STATE","REMOVE_STATE","ADD_SELF_TRANSITION","MAKE_START","TOGGLE_ACCEPTING","REMOVE_TWO_STATES","ADD_TRANSITION","TOGGLE_TWO_ACCEPTING","REMOVE_MANY_STATES","TOGGLE_MANY_ACCEPTING","UNMAKE_START","EditControls","handleUndoButtonClick","handleRedoButtonClick","buttonConfig","addState","removeStates","addTransition","makeStart","toggleFinal","inEditMode","buttonTypes","config","AppControls","handleNewClick","handleDownloadClick","download","handleUploadClick","upload","href","rel","Tape","tapeRef","handleScroll","handleClearButtonClick","clear","cellClassName","renderReadHead","onScroll","CELL_WIDTH","l","handleCellChange","handleCellFocus","renderFeeders","renderClearButton","scrollTo","oldProps","focusedCell","updateFocus","cellToFocus","childNodes","changeCell","focusCell","right","SimControls","reset","togglePlayPause","pause","step","NameInput","handleNameChange","changeName","Message","handleMessageClick","stopPropagation","dismiss","App","handleKeyDown","handleKeyUp","loadSaved","ReactDOM","render","getElementById"],"mappings":"6kBAqGaA,EAAsB,SAACC,GAAD,MAA4B,CAC7DC,KAFmC,wBAGnCC,QAAS,CAAEF,WAoDAG,EAAW,SAACC,GAAD,MAAmC,CACzDH,KAFuB,YAGvBC,QAAS,CAAEE,eAIAC,EAAkB,SAACC,GAAD,MAA6B,CAC1DL,KAF+B,oBAG/BC,QAAS,CAAEI,YAwCAC,EAAiB,SAACC,EAAiBC,EAAkBC,EAAyBC,GAA7D,MAAsG,CAClIV,KAF6B,kBAG7BC,QAAS,CAAEM,QAAOC,SAAQC,gBAAeC,uBAc9BC,EAAiB,SAACC,EAAeC,GAAhB,MAA4D,CACxFb,KAF6B,kBAG7BC,QAAS,CAAEW,QAAOC,aASPC,EAAW,WAKXC,EAAW,WAKXC,EAAY,YAKZC,EAAY,YAMZC,EAAkB,SAACC,GAAD,MAAyB,CACtDnB,KAF+B,oBAG/BC,QAAS,CAAEkB,QAIAC,EAAgB,SAACD,GAAD,MAAgC,CAC3DnB,KAF6B,kBAG7BC,QAAS,CAAEkB,QAIAE,EAA4B,SAACF,GAAD,MAAgC,CACvEnB,KAF0C,+BAG1CC,QAAS,CAAEkB,QAIAG,EAAwB,SAACH,GAAD,MAAgC,CACnEnB,KAFsC,2BAGtCC,QAAS,CAAEkB,QAIAI,EAAiB,SAACJ,GAAD,MAAgC,CAC5DnB,KAF8B,mBAG9BC,QAAS,CAAEkB,QAGAK,EAAc,cACdC,EAAa,iBAAe,CACvCzB,KAAMwB,IAGKE,EAAc,cACdC,EAAa,iBAAe,CACvC3B,KAAM0B,IAKKE,EAAa,SAACC,GAAD,MAAyB,CACjD7B,KAFyB,cAGzBC,QAAS,CAAE4B,UAiBAC,EAAe,iBAAe,CACzC9B,KAF2B,kBAWhB+B,EAAkB,SAACC,GAAD,MAA4B,CACzDhC,KAF8B,mBAG9BC,QAAS,CAAE+B,c,6PC5SN,IAAMC,EAAgB,SAAIC,GAAJ,OAC3BA,EAAMC,KAAOD,EAAME,WAURC,EAAc,SAACH,GAAD,OAAkBI,IAAEC,IAAIL,EAAO,aAK7CM,EAAmB,SAACN,EAAcF,GAO7C,O,qVAAO,CAAP,GACKE,EADL,CAEEO,SAAUH,IAAEI,UAAUV,EARC,SAACW,GAAD,OACvBL,IAAEI,UAAUC,EAAO,SAACA,EAAOC,GAAR,MACT,QAARA,EAAgB,KAAOD,S,cC4BdE,E,WAjEb,WAAmBC,EAAkBC,GAAY,yBAA9BD,IAA6B,KAAXC,I,wDAQnC,OAAOC,KAAKC,KAAKC,KAAKJ,EAAII,KAAKJ,EAAII,KAAKH,EAAIG,KAAKH,K,kCAKjD,IAAMI,EAAMD,KAAKE,YACjB,GAAY,IAARD,EACF,MAAM,IAAIE,MAAM,6BAElB,OAAO,IAAIR,EAAOK,KAAKJ,EAAIK,EAAKD,KAAKH,EAAII,K,6BAMzC,OAAO,IAAIN,GAAQK,KAAKH,EAAGG,KAAKJ,K,2BAI7BQ,GACH,OAAO,IAAIT,EAAOK,KAAKJ,EAAIQ,EAAER,EAAGI,KAAKH,EAAIO,EAAEP,K,4BAIvCO,GACJ,OAAOJ,KAAKK,KAAKD,EAAEE,OAAO,M,4BAItBC,GACJ,OAAO,IAAIZ,EAAOY,EAASP,KAAKJ,EAAGW,EAASP,KAAKH,K,8BAKjD,OAAOC,KAAKU,MAAMR,KAAKH,EAAGG,KAAKJ,K,8BAIzBQ,GACN,OAAOA,EAAEE,MAAMN,KAAKS,IAAIL,GAAKA,EAAEK,IAAIL,M,0BAIjCA,GACF,OAAOJ,KAAKJ,EAAIQ,EAAER,EAAII,KAAKH,EAAIO,EAAEP,K,+BAlDjC,OAAO,IAAIF,EADqC,EAApCC,EAAoC,EAAjCC,O,aCSNa,EAAS,SAAIC,EAASC,GAEjC,IADA,IAAMC,EAAM,IAAIC,MAAMF,GACbG,EAAI,EAAGA,EAAIH,EAAOG,IACzBF,EAAIE,GAAKJ,EAEX,OAAOE,G,4NCXF,IAAMG,EAAiC,CAC5CC,KAAM,OACNC,IAAK,OAGMC,EAA2B,CACtCxC,KAAMqC,EAAMC,MAIDG,EAAe,SAACpC,GAAD,OAA2BA,EAAML,KAAKA,OAASqC,EAAMC,MAEpEI,EAAc,SAACrC,EAAcsC,GACxC,OAAQA,EAAOxE,MACb,IJ2QuB,cI1QrB,OAAO4B,EAAWM,EAAOsC,EAAOvE,QAAQ4B,MAC1C,QACE,OAAOK,EAAML,OAIbD,EAAa,SAACM,EAAcL,GAAf,O,qVAAA,IACdK,EAAML,KADQ,CAEjBA,U,mjBCZK,IAAM4C,GAAuB,CAClCC,SAAU,IAAI7B,EAAO,EAAG,GACxB8B,SAAU,GACVC,iBAAiB,EACjBC,yBAAyB,EACzBC,cAAc,EACdC,0BAA0B,EAC1BC,iBAAiB,EACjBC,oBAAoB,GAITP,GAAW,SAACxC,GAAD,OAA0BA,EAAMgD,GAAGR,UAG9CS,GAAgB,SAACjD,GAAD,OAA2BA,EAAMgD,GAAGP,SAASS,SAAS,UAGtER,GAAkB,SAAC1C,GAAD,OAA2BA,EAAMgD,GAAGN,iBAGtDC,GAA0B,SAAC3C,GAAD,OAA2BA,EAAMgD,GAAGL,yBAG9DC,GAAe,SAAC5C,GAAD,OAA2BA,EAAMgD,GAAGJ,cAInDE,GAAkB,SAAC9C,GAAD,OAA2BA,EAAMgD,GAAGF,iBAItDK,GAAY,SAACnD,EAAcsC,GACtC,IAAIF,EAAapC,GAiCf,OAAOA,EAAMgD,GAhCb,OAAQV,EAAOxE,MACb,ILgIkB,WK/HhB,OAAOsF,GAAQpD,EAAOsC,EAAOvE,QAAQ2C,KACvC,ILoIgB,SKnId,OAAO2C,GAAMrD,EAAOsC,EAAOvE,QAAQ2C,KACrC,IL9CyB,kBK+CvB,OAAO4C,GAActD,GACvB,IL1CuB,gBK2CrB,OAAOuD,GAAYvD,GACrB,ILkBkC,2BKjBhC,OAAOwD,GAAsBxD,GAC/B,ILsBgC,yBKrB9B,OAAOyD,GAAoBzD,GAC7B,ILmG2B,oBKlGzB,OAAO0D,GAAgB1D,GACzB,ILuGyB,kBKtGvB,OAAO2D,GAAc3D,GACvB,IL3C2B,oBK4CzB,OAAO4D,GAAgB5D,GACzB,ILxCkB,WKyChB,OAAO6D,GAAQ7D,GACjB,ILsG2B,oBKrGzB,OAAO8D,GAAgB9D,EAAOsC,EAAOvE,QAAQgG,KAC/C,ILtCyB,kBKuCvB,OAAOC,GAAehE,GACxB,ILlCuB,gBKmCrB,OAAOiE,GAAajE,GACtB,QACE,OAAOA,EAAMgD,KAQfI,GAAU,SAACpD,EAAcU,GAAf,YACXV,EAAMgD,GADK,CAEdP,SAAUrC,IAAE8D,KAAF,sBAAWlE,EAAMgD,GAAGP,UAApB,CAA8B/B,QAGpC2C,GAAQ,SAACrD,EAAcU,GAAf,YACTV,EAAMgD,GADG,CAEZP,SAAUzC,EAAMgD,GAAGP,SAAS0B,OAAO,SAAAC,GAAC,OAAIA,IAAM1D,OAG1C4C,GAAgB,SAACtD,GAAD,YACjBA,EAAMgD,GADW,CAEpBN,iBAAiB,KAGba,GAAc,SAACvD,GAAD,YACfA,EAAMgD,GADS,CAElBN,iBAAiB,EACjBG,0BAA0B,KAGtBW,GAAwB,SAACxD,GAAD,YACzBA,EAAMgD,GADmB,CAE5BL,yBAAyB,KAGrBc,GAAsB,SAACzD,GAAD,YACvBA,EAAMgD,GADiB,CAE1BL,yBAAyB,KAGrBe,GAAkB,SAAC1D,GAAD,YACnBA,EAAMgD,GADa,CAEtBF,iBAAiB,KAGba,GAAgB,SAAC3D,GAAD,YACjBA,EAAMgD,GADW,CAEpBN,iBAAiB,EACjBC,yBAAyB,EACzBE,0BAA0B,KAGtBe,GAAkB,SAAC5D,GAAD,YACnBA,EAAMgD,GADa,CAEtBJ,cAAc,KAGViB,GAAU,SAAC7D,GAAD,YACXA,EAAMgD,GADK,CAEdJ,cAAc,EACdC,0BAA0B,KAGtBiB,GAAkB,SAAC9D,EAAc+D,GAAf,YACnB/D,EAAMgD,GADa,CAEtBR,SAAUuB,EACVjB,iBAAiB,KAGbkB,GAAiB,SAAChE,GAAD,YAClBA,EAAMgD,GADY,CAErBD,oBAAoB,KAGhBkB,GAAe,SAACjE,GAAD,YAChBA,EAAMgD,GADU,CAEnBD,oBAAoB,K,ujBC5Hf,IAWMsB,GAAW,SAACrE,GAAD,OACtBsE,OAAOC,OAAOxE,EAAcC,EAAMO,SAASlC,OAAOmG,OAIvCC,GAAW,SAACzE,EAAcf,GACrC,IAAMyF,EAAOL,GAASrE,GAAO2E,KAAK,SAAAC,GAAC,OAAIA,EAAE3F,KAAOA,IAChD,IAAKyF,EACH,MAAM,IAAIvD,MAAJ,2BAA8BlC,EAA9B,MAER,OAAOyF,GAIIG,GAAiB,SAAC7E,EAAcf,GAAf,OAC5Bc,EAAcC,EAAMO,SAASlC,OAAOyG,SAAS5B,SAASjE,IAI3C8F,GAAc,SAAC/E,EAAcf,GAAf,OACzBc,EAAcC,EAAMO,SAASlC,OAAOmG,KAAKvF,GAAI+F,SAIlCC,GAAgB,SAACjF,GAAD,OAC3BD,EAAcC,EAAMO,SAASlC,OAAOyG,UAIzBI,GAAc,SAAClF,EAAcf,GAAyB,IACzDkG,EAAcpF,EAAcC,EAAMO,SAASlC,OAA3C8G,UACR,OAAsB,OAAdA,GAAuBA,IAAclG,GAgBlCmG,GAAe,SAACpF,EAAcsC,GACzC,IAAIF,EAAapC,GAoCf,OAAOA,EAAMO,SAASlC,MAnCtB,OAAQiE,EAAOxE,MAEb,IN9DkB,WM+DhB,OAAO+F,GAAQ7D,EAAOsC,EAAOvE,QAAQgG,KACvC,INvBmB,YMwBjB,OAAOsB,GAASrF,EAAOsC,EAAOvE,QAAQuH,MAAOhD,EAAOvE,QAAQwH,KAC9D,INsGyB,kBMrGvB,OAAOnH,GAAe4B,EAAOsC,EAAOvE,QAAQM,OAC9C,IN9CkC,2BM+ChC,OAAOmH,GAAcxF,GACvB,IN3CqC,8BM4CnC,OAAOyF,GAAiBzF,GAC1B,INlEyB,kBMmEvB,OAAOgE,GAAehE,EAAOsC,EAAOvE,QAAQkB,GAAIqD,EAAOvE,QAAQ0C,OACjE,IN9DuB,gBM+DrB,OAAOwD,GAAajE,GACtB,IN5C0B,mBM6CxB,OAAO0F,GAAe1F,GAGxB,INpGyB,kBMqGvB,OAAOsD,GAActD,EAAOsC,EAAOvE,QAAQkB,IAC7C,INhGuB,gBMiGrB,OAAOsE,GAAYvD,GACrB,INiD2B,oBMhDzB,OAAO0D,GAAgB1D,EAAOsC,EAAOvE,QAAQgG,KAC/C,INqDyB,kBMpDvB,OAAOJ,GAAc3D,GACvB,INwD2B,oBMvDzB,OAAO8D,GAAgB9D,EAAOsC,EAAOvE,QAAQgG,KAC/C,QACE,OAAO/D,EAAMO,SAASlC,QAUxBwF,GAAU,SAAC7D,EAAc+D,GAC7B,IAAM9E,EAAK0G,MACLjB,EAAO,CAAEzF,KAAI8E,MAAK6B,SAAU,GAAIZ,SAAS,GAC/C,MAAO,CACL/E,IAAK,KACLC,UAAWE,IAAEyF,UAAU,GAAI7F,EAAMO,SAASlC,MAAM6B,UAAW,CACzDsE,KAAK,eACFvF,EAAKyF,IAGP,SAACoB,EAAIC,EAAIrF,GAAT,MAAyB,aAARA,EAAqB,CAACzB,QAAM+G,MAM9CX,GAAW,SAACrF,EAAcsF,EAAeC,GAA9B,MAA0D,CACzEtF,IAAK,KACLC,UAAU,MACLF,EAAMO,SAASlC,MAAM6B,UADjB,CAEP4E,SAAUQ,IAAUC,EAChB,GACAvF,EAAMO,SAASlC,MAAM6B,UAAU4E,aAIjC1G,GAAiB,SAAC4B,EAAciG,GAA8B,IAC1D/F,EAAcF,EAAMO,SAASlC,MAA7B6B,UACR,MAAO,CACLD,IAAK,KACLC,UAAU,MACLA,EADI,CAEPsE,KAAMpE,IAAE8F,KAAKhG,EAAUsE,KAAMyB,GAC7BnB,SAAU,GACVK,UAAWjF,EAAUiF,WAAac,EAAI/C,SAAShD,EAAUiF,WACrD,KACAjF,EAAUiF,cAKdK,GAAgB,SAACxF,GAAD,MAA8B,CAClDC,IAAK,KACLC,UAAWE,IAAE+F,MAAM,GAAInG,EAAMO,SAASlC,MAAM6B,UAAW,CACrDiF,UAAWnF,EAAMO,SAASlC,MAAM6B,UAAU4E,SAAS,OAQjDW,GAAmB,SAACzF,GACxB,IAAM8E,EAAWG,GAAcjF,GAAOoG,IAAI,SAAAnH,GAAE,OAAIwF,GAASzE,EAAOf,KAC1DoH,EAAkBvB,EAASwB,KAAK,SAAA5B,GAAI,OAAIA,EAAKM,UAC7CuB,EAAUzB,EAAS0B,OAAO,SAACC,EAAK7F,GAAN,aAC3B6F,EAD2B,eAE7B7F,EAAE3B,GAF2B,MAEjB2B,EAFiB,CAEdoE,SAAUqB,OACxB,IAEJ,MAAO,CACLpG,IAAK,KACLC,UAAWE,IAAE+F,MAAM,GAAInG,EAAMO,SAASlC,MAAM6B,UAAW,CACrDsE,KAAK,MACA+B,OAMLvC,GAAiB,SAAChE,EAAcf,EAAYwB,GAA3B,aAClBT,EAAMO,SAASlC,MADG,CAErB4B,IAAKG,IAAE+F,MAAM,GAAIpG,EAAcC,EAAMO,SAASlC,OAAQ,CACpDmG,KAAK,eACFvF,EAAK,CAAE2G,SAAUnF,SAKlBwD,GAAe,SAACjE,GAAD,MAA8B,CACjDC,IAAK,KACLC,UAAWH,EAAcC,EAAMO,SAASlC,SAGpCqH,GAAiB,SAAC1F,GAAD,MAA8B,CACnDC,IAAK,KACLC,UAAU,MACLF,EAAMO,SAASlC,MAAM6B,UADjB,CAEP4E,SAAUR,OAAOoC,KAAK1G,EAAMO,SAASlC,MAAM6B,UAAUsE,UAWnDlB,GAAgB,SAACtD,EAAcf,GAA2B,IHrOjC2B,EAAM+F,EGsO3BtI,EAAU2B,EAAMO,SAAhBlC,MACAyG,EAAazG,EAAM6B,UAAnB4E,SACR,MAAO,CACL7E,IAAK,KACLC,UAAU,MACL7B,EAAM6B,UADF,CAEP4E,SAAU7B,GAAcjD,IH5OCY,EG6OT3B,EH7Oe0H,EG6OX7B,EH5OxB6B,EAAGzD,SAAStC,GAAK+F,EAAGxC,OAAO,SAAAtD,GAAC,OAAIA,IAAMD,IAAtC,sBAA+C+F,GAA/C,CAAmD/F,KG6O3CkE,EAAS5B,SAASjE,GAAM6F,EAAW,CAAC7F,OAQxCsE,GAAc,SAACvD,GAAD,MAA8B,CAChDC,IAAK,KACLC,UAAU,MACLH,EAAcC,EAAMO,SAASlC,OADzB,CAEPuI,QAAS,OAOPlD,GAAkB,SAAC1D,EAAcwC,GACrC,IAAKE,GAAgB1C,GAAQ,OAAOA,EAAMO,SAASlC,MADkB,IAG7DA,EAAU2B,EAAMO,SAAhBlC,MACFuI,EAAUvI,EAAM6B,UAAU4E,SAAS0B,OAAO,SAACC,EAAKI,GACpD,IAAMnC,EAAOrG,EAAM6B,UAAUsE,KAAKqC,GAClC,OAAO,MACFJ,EADL,eAEGI,EAASlG,EAAOmG,KAAKpC,EAAKX,KAAKgD,MAAMvE,MAEvC,IAEH,OAAO,MACFnE,EADL,CAEE4B,IAAI,MACC5B,EAAM6B,UADR,CAED0G,eASAjD,GAAgB,SAAC3D,GAAD,ODhPkB,SAACA,GAAD,OAA2BA,EAAMgD,GAAGH,yBCiP1EA,CAAyB7C,GACvBA,EAAMO,SAASlC,MACf,CACA4B,IAAK,KACLC,UAAU,MACLF,EAAMO,SAASlC,MAAM6B,UADjB,CAEP4E,SAAU,OAQVhB,GAAkB,SAAC9D,EAAcwC,GAAiC,IAC9DnE,EAAU2B,EAAMO,SAAhBlC,MAER,IAAKqE,GAAgB1C,KAAW3B,EAAM4B,IAAK,OAAO5B,EAKlD,IAAM2I,EAAQ1C,OAAOoC,KAAKrI,EAAM4B,IAAI2G,SAASJ,OAAO,SAACC,EAAKxH,GACxD,IAAMyF,EAAOrG,EAAM4B,IAAKuE,KAAKvF,GACvBgI,EAAazE,EAASnB,KAAKhD,EAAM4B,IAAK2G,QAAQ3H,IACpD,OAAO,MACFwH,EADL,eAEGxH,EAFH,MAEayF,EAFb,CAEmBX,IAAKkD,OAEvB,IAEH,OAAO7G,IAAE+F,MAAM,GAAI9H,EAAO,CACxB4B,IAAK,CACHuE,KAAK,MACAwC,O,6NC5SJ,IAKME,GAAY,SAAClH,GAAD,OACvBsE,OAAOC,OAAOvE,EAAMO,SAASjC,OAAOkG,OAIzB2C,GAAY,SAACnH,EAAcf,GACtC,IAAMpB,EAAQmC,EAAMO,SAASjC,OAAOkG,KAAKvF,GACzC,IAAKpB,EACH,MAAM,IAAIsD,MAAJ,4BAA+BlC,EAA/B,MAER,OAAOpB,GAqBIuJ,GAAgB,SAACpH,EAAcsC,GAC1C,IAAIF,EAAapC,GAWf,OAAOA,EAAMO,SAASjC,OAVtB,OAAQgE,EAAOxE,MACb,IPcmB,YObjB,OAAOuH,GAASrF,EAAOsC,EAAOvE,QAAQuH,MAAOhD,EAAOvE,QAAQwH,IAAKjD,EAAOvE,QAAQkB,IAClF,IP2IyB,kBO1IvB,OAAOb,GAAe4B,EAAOsC,EAAOvE,QAAQO,QAC9C,QACE,OAAO0B,EAAMO,SAASjC,SAQxB+G,GAAW,SAACrF,EAAcsF,EAAeC,EAAatG,GAA3C,OACfmB,IAAE+F,MAAM,GAAInG,EAAMO,SAASjC,OAAQ,CACjCkG,KAAK,eACFvF,EAAK,CAAEqG,QAAOC,MAAKtG,UAKpBb,GAAiB,SAAC4B,EAAciG,GAAf,O,uVAAA,IAClBjG,EAAMO,SAASjC,OADG,CAErBkG,KAAMpE,IAAE8F,KAAKlG,EAAMO,SAASjC,OAAOkG,KAAMyB,M,ujBC1BpC,IAYMoB,GAAmB,SAACrH,GAAD,OAC9BsE,OAAOC,OAAOxE,EAAcC,EAAMO,SAAShC,eAAeiG,OAI/C8C,GAAuB,SAACtH,EAAcuH,GACjD,IAAMC,EAAKH,GAAiBrH,GAAO2E,KAAK,qBAAG9G,QAAsB0J,IACjE,IAAKC,EACH,MAAM,IAAIrG,MAAJ,2DAA8DoG,EAA9D,MAER,OAAOC,GAGIC,GAAuB,SAACzH,EAAcsC,GACjD,IAAIF,EAAapC,GAsBf,OAAOA,EAAMO,SAAShC,cArBtB,OAAQ+D,EAAOxE,MACb,IRXmB,YQYjB,OAAOuH,GAASrF,EAAOsC,EAAOvE,QAAQuH,MAAOhD,EAAOvE,QAAQwH,IAAKjD,EAAOvE,QAAQkB,IAClF,IRkHyB,kBQjHvB,OAAOb,GAAe4B,EAAOsC,EAAOvE,QAAQQ,eAC9C,IRRkC,2BQShC,OAAOiF,GAAsBxD,EAAOsC,EAAOvE,QAAQkB,IACrD,IRJgC,yBQK9B,OAAOwE,GAAoBzD,GAC7B,IRyE2B,oBQxEzB,OAAO0D,GAAgB1D,EAAOsC,EAAOvE,QAAQgG,KAC/C,IRkF2B,oBQjFzB,OAAOD,GAAgB9D,EAAOsC,EAAOvE,QAAQgG,KAC/C,IR2EyB,kBQ1EzB,IR/EuB,gBQgFrB,OAAO2D,GAAoB1H,GAC7B,QACE,OAAOA,EAAMO,SAAShC,gBAWxB8G,GAAW,SAACrF,EAAcsF,EAAeC,EAAa1H,GAC1D,IAAMoB,EAAK0G,MACLgC,EAAWhH,EAAOmG,KAAKrC,GAASzE,EAAOsF,GAAOvB,KAC9C6D,EAAStC,IAAUC,EAAMoC,EAAWhH,EAAOmG,KAAKrC,GAASzE,EAAOuF,GAAKxB,KAerE8D,EAAavC,IAAUC,EAC3BoC,EAASZ,MAAM,IAAIpG,EAAO,EAAG,KAdF,SAAC2E,EAAeC,GAC3C,IAAMuC,EAAOvC,EAAIwB,MAAMzB,GAMjByC,EAA4B,IAArBD,EAAK5G,YACd4G,EAAKC,OAAOC,YAAY1G,MAAM,GAC9B,IAAIX,EAAO,GAAI,GACnB,OAAOmH,EAAKxG,MAAM,IAAOD,KAAK0G,GAAM1G,KAAKiE,GAKzC2C,CAAqBN,EAAUC,GAEjC,MAAO,CACL3H,IAAK,KACLC,UAAWE,IAAE+F,MAAM,GAAInG,EAAMO,SAAShC,cAAc2B,UAAW,CAC7DsE,KAAK,eACFvF,EAAK,CAAEA,KAAIpB,QAAOkG,IAAK8D,QAM1BzJ,GAAiB,SAAC4B,EAAciG,GAAf,MAAqD,CAC1EhG,IAAK,KACLC,UAAU,MACLF,EAAMO,SAAShC,cAAc2B,UADzB,CAEPsE,KAAMpE,IAAE8F,KAAKlG,EAAMO,SAAShC,cAAc2B,UAAUsE,KAAMyB,OAQxDzC,GAAwB,SAACxD,EAAcf,GAAf,aACzBe,EAAMO,SAAShC,cADU,CAE5B0B,IAAK,KACLC,UAAU,MACLF,EAAMO,SAAShC,cAAc2B,UADzB,CAEP4E,SAAU7F,OAMRwE,GAAsB,SAACzD,GAAD,MAAsC,CAChEC,IAAK,KACLC,UAAU,MACLH,EAAcC,EAAMO,SAAShC,eADzB,CAEPuG,SAAU,KACVoD,eAAgB,SASdxE,GAAkB,SAAC1D,EAAcwC,GACrC,OAAIG,GAAwB3C,GAAemI,GAAkBnI,EAAOwC,GAC3DE,GAAgB1C,GAAeoI,GAAoBpI,EAAOwC,GACvDxC,EAAMO,SAAShC,eAMvB4J,GAAoB,SAACnI,EAAcwC,GACvC,IAAMjE,EAAgByB,EAAMO,SAAShC,cAAc2B,UACnD,IAAK3B,EAAcuG,SACjB,OAAO9E,EAAMO,SAAShC,cAExB,IAAM8J,EAAe9J,EAAciG,KAAKjG,EAAcuG,UAChDoD,EAAiBvH,EAAOmG,KAAKuB,EAAatE,KAAKgD,MAAMvE,GAC3D,OAAO,MACFxC,EAAMO,SAAShC,cADpB,CAEE0B,IAAKG,IAAE+F,MAAM,GAAI5H,EAAe,CAC9B2J,sBAcAE,GAAsB,SAACpI,EAAcwC,GACzC,IAAMjE,EAAgByB,EAAMO,SAAShC,cAAc2B,UAC7C4E,EAAWG,GAAcjF,GASzBsI,EALgBhE,OAAOC,OAAOhG,EAAciG,MAAML,OAAO,SAAAkE,GAC7D,IAAMxK,EAAQsJ,GAAUnH,EAAOqI,EAAaxK,OAC5C,OAAOiH,EAAS5B,SAASrF,EAAMyH,QAAUR,EAAS5B,SAASrF,EAAM0H,OAGjCiB,OAAO,SAACC,EAAKe,GAAN,aACpCf,EADoC,eAEtCe,EAAGvI,GAAK,IAAI0B,EAAO6G,EAAGzD,IAAInD,EAAI4B,EAAS5B,EAAG4G,EAAGzD,IAAIlD,EAAI2B,EAAS3B,MAC7D,IAIE0H,EAAcjE,OAAOC,OAAOhG,EAAciG,MAAMgC,OAAO,SAACC,EAAK+B,GACjE,ILhOgB5H,EAAYC,EKgOtBhD,EAAQsJ,GAAUnH,EAAOwI,EAAE3K,OAC3B4K,EAAgB3D,EAAS5B,SAASrF,EAAMyH,OACxCoD,EAAc5D,EAAS5B,SAASrF,EAAM0H,KAC5C,GLnO4B1E,EKmOJ6H,ILnOR9H,EKmOP6H,KLlOL5H,GAAQD,GAAKC,EKmOf,OAAO4F,EAGT,IAAMkC,EAAWhI,EAAOmG,KAAKrC,GAASzE,EAAO0I,EAAc7K,EAAMyH,MAAQzH,EAAM0H,KAAKxB,KAC9E6E,EAAYjI,EAAOmG,KAAKrC,GAASzE,EAAOyI,EAAgB5K,EAAMyH,MAAQzH,EAAM0H,KAAKxB,KACjF8E,EAAeD,EAAU7B,MAAMvE,GAC/BsF,EAAOa,EAAS5B,MAAM6B,GACtBE,EAAOnI,EAAOmG,KAAK0B,EAAEzE,KAAKgD,MAAM6B,GAChCG,EAAWD,EAAKE,QAAQlB,GACxBmB,EAAgBF,EAAS7H,YAAc4G,EAAK5G,YAC5C6G,EAAOe,EAAK/B,MAAMgC,GAElBG,GADWnB,EAAKtG,IAAIsH,EAAShB,QAAU,EAAI,GAAK,GACxBA,EAAK7G,YAEnC,OAAO,MACFuF,EADL,eAEG+B,EAAEvJ,GAAK,CAAE0J,WAAUE,eAAcI,gBAAeC,iBAElD,IAIH,OAAO,MACFlJ,EAAMO,SAAShC,cADpB,CAEE0B,IAAI,MACC1B,EADF,CAED+J,cACAC,mBAUAzE,GAAkB,SAAC9D,EAAcwC,GACrC,OAAIG,GAAwB3C,GAAemJ,GAAWnJ,EAAOwC,GACpDE,GAAgB1C,GAAeoJ,GAAapJ,EAAOwC,GAChDxC,EAAMO,SAAShC,eAOvB4K,GAAa,SAACnJ,EAAcwC,GAAyC,IACjEjE,EAAkByB,EAAMO,SAAxBhC,cAER,IAAKA,EAAc0B,MAAQ1B,EAAc0B,IAAI6E,WAAavG,EAAc0B,IAAIiI,eAC1E,OAAO3J,EAGT,IAAM8J,EAAe9J,EAAc0B,IAAIuE,KAAKjG,EAAc0B,IAAI6E,UACxDmC,EAAazE,EAASnB,KAAKV,EAAOmG,KAAKvI,EAAc0B,IAAIiI,iBAE/D,OAAO,MACF3J,EADL,CAEE0B,IAAKG,IAAE+F,MAAM,GAAI5H,EAAc0B,IAAK,CAClCuE,KAAK,eACF6D,EAAapJ,GADZ,MACsBoJ,EADtB,CACoCtE,IAAKkD,UAS7CmC,GAAe,SAACpJ,EAAcwC,GAAyC,IACnEjE,EAAkByB,EAAMO,SAAxBhC,cAER,IAAKA,EAAc0B,IACjB,OAAO1B,EAGT,IAAM8K,EAAY/E,OAAOoC,KAAKnI,EAAc0B,IAAIqI,aAAa9B,OAAO,SAACC,EAAKxH,GACxE,IAAMoJ,EAAe9J,EAAc0B,IAAKuE,KAAKvF,GACvCgI,EAAazE,EAASnB,KAAKV,EAAOmG,KAAKvI,EAAc0B,IAAKqI,YAAYrJ,KAC5E,OAAO,MACFwH,EADL,eAEGxH,EAFH,MAEaoJ,EAFb,CAE2BtE,IAAKkD,OAE/B,IAEGqC,EAAYhF,OAAOoC,KAAKnI,EAAc0B,IAAIsI,aAAa/B,OAAO,SAACC,EAAKxH,GACxE,IAAMoJ,EAAe9J,EAAc0B,IAAKuE,KAAKvF,GADkC,EAEjBV,EAAc0B,IAAKsI,YAAYtJ,GAArF0J,EAFuE,EAEvEA,SAAUE,EAF6D,EAE7DA,aAAcI,EAF+C,EAE/CA,cAAeC,EAFgC,EAEhCA,WACzCK,EAAS/G,EAASnB,KAAKwH,GACvBf,EAAOa,EAAS5B,MAAMwC,GACtBC,EAAY1B,EAAKxG,MAAM2H,GAAe5H,KAAKkI,GAG3CtC,EAAkC,IAArBa,EAAK5G,YACpB4G,EAAKC,OAAOC,YAAY1G,MAAM4H,GAAY7H,KAAKmI,GAC/C,IAAI7I,EAAO,GAAI,IAAIU,KAAKmI,GAE5B,OAAO,MACF/C,EADL,eAEGxH,EAFH,MAEaoJ,EAFb,CAE2BtE,IAAKkD,OAE/B,IAEH,OAAO,MACF1I,EADL,CAEE0B,IAAKG,IAAE+F,MAAM,GAAI5H,EAAc0B,IAAK,CAClCuE,KAAK,MACA6E,EADD,GAECC,QAQL5B,GAAsB,SAAC1H,GAAD,aACvBA,EAAMO,SAAShC,cADQ,CAE1B0B,IAAK,KACLC,UAAU,MACLH,EAAcC,EAAMO,SAAShC,eADzB,CAEPuG,SAAU,KACVoD,eAAgB,KAChBI,YAAa,GACbC,YAAa,Q,ujBC9VV,IAGMkB,GAA2B,CACtCC,QAAShI,EAAO,GAHgB,IAIhCiI,WAAY,EACZC,OAAQ,EACRC,QAAS,MAIEC,GAAmD,CAC9DC,EAAG,IACHC,EAAG,KAKQC,GAAc,SAACjK,GAAD,OAA4BA,EAAMO,SAAS2J,KAAKR,SAI9DS,GAAkB,SAACnK,GAAD,OAAiCA,EAAMO,SAAS2J,KAAKL,SAEvEO,GAAoB,SAACpK,GAA0B,IAClDkK,EAASlK,EAAMO,SAAf2J,KACR,OAAOA,EAAKR,QAAQQ,EAAKN,SAGdS,GAAc,SAACrK,EAAcsC,GACxC,OAAQA,EAAOxE,MACb,ITuF4B,mBStF1B,OAAOwM,GAAetK,EAAOsC,EAAOvE,QAAQgG,IAAKzB,EAAOvE,QAAQ0C,OAClE,ITgG8B,qBS/F5B,OAAO8J,GAAiBvK,EAAOsC,EAAOvE,QAAQ4L,YAChD,IToG2B,kBSnGzB,OAAOa,GAAcxK,EAAOsC,EAAOvE,QAAQgG,KAC7C,ITuFsB,aStFpB,OAAO0G,GAAUzK,GACnB,ITsGqB,YSrGnB,OAAOhC,GAASgC,EAAOsC,EAAOvE,QAAQE,WACxC,IT0G6B,oBSzG3B,OAAOC,GAAgB8B,EAAOsC,EAAOvE,QAAQI,QAC/C,QACE,OAAO6B,EAAMO,SAAS2J,OAItBI,GAAiB,SAACtK,EAAc+D,EAAatD,GAA5B,aAClBT,EAAMO,SAAS2J,KADG,CAErBR,QAAStJ,IAAEsK,OAAOtK,IAAEuK,MAAM3K,EAAMO,SAAS2J,KAAKR,SAAU3F,EAAK,SAAA3D,GAAC,OAAIK,IAClEoJ,QAASpJ,EAAMmK,OAAS,GAAqC,OAAhC5K,EAAMO,SAAS2J,KAAKL,QAC7C7J,EAAMO,SAAS2J,KAAKL,QAAU,EAC9B7J,EAAMO,SAAS2J,KAAKL,WAGpBW,GAAgB,SAACxK,EAAc+D,GAAf,aACjB/D,EAAMO,SAAS2J,KADE,CAEpBL,QAAS9F,KAGL0G,GAAY,SAACzK,GAAD,OAA6ByJ,IAEzCc,GAAmB,SAACvK,EAAc2J,GAAf,aACpB3J,EAAMO,SAAS2J,KADK,CAEvBR,QAASmB,GAAa7K,EAAMO,SAAS2J,KAAKR,QAASC,GACnDA,gBAGIkB,GAAe,SAACnB,EAAmBoB,GACvC,IACMC,EAAWrB,EAAQkB,OAAS9J,KAAKkK,MAAMF,EAvErB,IA0ExB,OAAIC,EAJe,GAKX,GAAN,mBAAWrB,GAAX,YAAuBhI,EAAO,GALb,MAUVqJ,EAAW,IAAkBrB,EAAQuB,OAV3B,IAU8CC,MAAM,SAAAC,GAAG,OAAmB,IAAfA,EAAIP,SACzElB,EAAQuB,MAAM,GAXJ,IAaZvB,GAGH1L,GAAW,SAACgC,EAAc/B,GAAf,aACZ+B,EAAMO,SAAS2J,KADH,CAEfN,OAAQ5J,EAAMO,SAAS2J,KAAKN,QAAwB,MAAd3L,EAAoB,GAAM,MAG5DC,GAAkB,SAAC8B,EAAc7B,GAA+B,IAC5D+L,EAASlK,EAAMO,SAAf2J,KACR,OAAO,MACFA,EADL,CAEER,QAAStJ,IAAEgL,IAAIhL,IAAEuK,MAAMT,EAAKR,SAAUQ,EAAKN,OAAQzL,M,ujBC/EhD,IAMMkN,GAAuB,SAACrL,GAAD,OAClCsE,OAAOC,OAAOvE,EAAMO,SAAS/B,kBAAkBgG,OAKpC8G,GAA8B,SAACtL,GAAD,OACzCI,IAAEmL,QAAQF,GAAqBrL,GAAQ,SAAAwL,GAAM,OAAIA,EAAO3N,SAI7C4N,GAA4B,SAACzL,EAAcnC,GAAf,OACvCyN,GAA4BtL,GAAOnC,IASxB6N,GAA6B,SAAC1L,GACzC,IAEM2L,EAFUrH,OAAOC,OAPe,SAACvE,GAAD,OACtCI,IAAEmL,QAAQF,GAAqBrL,GAAQ,SAAAwL,GAAM,OAAIrE,GAAUnH,EAAOwL,EAAO3N,OAAOyH,QAMlDsG,CAAyB5L,IAC7BoG,IAAI,SAAAyF,GAAE,OAAIvH,OAAOC,OAAOnE,IAAEmL,QAAQM,EAAI,SAAAL,GAAM,OAAIA,EAAOM,UACpD1F,IAAI,SAAAyF,GAAE,OAAIA,EAAG1H,OAAO,SAAA4H,GAAK,OAAIA,EAAMnB,OAAS,MAEzE,OADkBxK,IAAE4L,YAAYL,GACfvF,IAAI,SAAAoF,GAAM,OAAIA,EAAOvM,MAI3BgN,GAAgB,SAACjM,GAAD,OAAiCA,EAAMO,SAAS/B,kBAAkBqL,SAElFqC,GAA2B,SAAClM,EAAcsC,GACrD,IAAIF,EAAapC,GAuBf,OAAOA,EAAMO,SAAS/B,kBAtBtB,OAAQ8D,EAAOxE,MACb,IV8B+B,wBU7B7B,OAAOF,GAAoBoC,EAAOsC,EAAOvE,QAAQF,OACnD,IVGmB,YUFjB,OAAOwH,GAASrF,EAAOsC,EAAOvE,QAAQkB,IACxC,IVoBkC,2BUnBhC,OAAOkN,GAAuBnM,EAAOsC,EAAOvE,QAAQyN,QACtD,IV8BkC,2BU7BhC,OAAOY,GAAuBpM,EAAOsC,EAAOvE,QAAQkB,IACtD,IV4HyB,kBU3HvB,OAAOb,GAAe4B,EAAOsC,EAAOvE,QAAQS,mBAC9C,IVgCiC,0BU/B/B,OAAO6N,GAAsBrM,EAAOsC,EAAOvE,QAAQkB,IACrD,IVoCgC,yBUnC9B,OAAOqN,GAAqBtM,GAC9B,IVwCoC,6BUvClC,OAAOuM,GAAyBvM,EAAOsC,EAAOvE,QAAQkI,KACxD,QACE,OAAOjG,EAAMO,SAAS/B,oBAQxBZ,GAAsB,SAACoC,EAAcnC,GACzC,IAAMoB,EAAK0G,MACL6F,EAAS,CAAEvM,KAAIpB,QAAOiO,KAAM,GAAIU,MAAO,GAAIC,KAAM3C,GAAeC,EAAG2C,WAAW,GACpF,OAAOtM,IAAE+F,MAAM,GAAInG,EAAMO,SAAS/B,kBAAmB,CACnDgG,KAAK,eACFvF,EAAKuM,GAER3B,QAAS5K,KAKPoG,GAAW,SAACrF,EAAcnC,GAAf,OACfD,GAAoBoC,EAAOnC,IAGvBsO,GAAyB,SAACnM,EAAcwL,GAAf,OAC7BpL,IAAE+F,MAAM,GAAInG,EAAMO,SAAS/B,kBAAmB,CAC5CgG,KAAK,eACFgH,EAAOvM,GAAKuM,MAKbY,GAAyB,SAACpM,EAAcf,GAAuC,IAC3ET,EAAsBwB,EAAMO,SAA5B/B,kBACR,OAAO,MACFA,EADL,CAEEgG,KAAMpE,IAAE8F,KAAK1H,EAAkBgG,KAAMvF,MAInCb,GAAiB,SAAC4B,EAAciG,GAAf,aAClBjG,EAAMO,SAAS/B,kBADG,CAErBgG,KAAMpE,IAAE8F,KAAKlG,EAAMO,SAAS/B,kBAAkBgG,KAAMyB,MAGhDoG,GAAwB,SAACrM,EAAcf,GAAf,aACzBe,EAAMO,SAAS/B,kBADU,CAE5BqL,QAAS5K,KAGLqN,GAAuB,SAACtM,GAAD,aACxBA,EAAMO,SAAS/B,kBADS,CAE3BqL,QAAS,QAGL0C,GAA2B,SAACvM,EAAciG,GAAf,aAC5BjG,EAAMO,SAAS/B,kBADa,CAE/BgG,KAAMpE,IAAEI,UAAUR,EAAMO,SAAS/B,kBAAkBgG,KAAM,SAAAgH,GAAM,aAC1DA,EAD0D,CAE7DmB,YAAa1G,EAAI/C,SAASsI,EAAOvM,W,gkBCjI9B,IAKM2N,GAAkB,SAAC5M,EAAcsC,GAC5C,IAAIF,EAAapC,GA+Bf,OAAOA,EAAM6M,SA9Bb,OAAQvK,EAAOxE,MACb,IXLuB,gBWMrB,OAAOyF,GAAYvD,GACrB,IX6DgC,yBW5D9B,OAAOyD,GAAoBzD,GAC7B,IXKkB,WWJhB,OAAO8M,GAAU9M,EAAO,YAC1B,IXeuB,gBWdrB,OAAOiE,GAAajE,GACtB,IXuBkC,2BWtBhC,OAAO8M,GAAU9M,EAAO,wBAC1B,IX0BqC,8BWzBnC,OAAO8M,GAAU9M,EAAO,6CAC1B,IXsCmB,YWpCnB,IX6D+B,wBW5D7B,OAAO8M,GAAU9M,EAAO,sBAC1B,IXiKyB,kBWhKvB,OAAO8M,GAAU9M,EAAO,mBAC1B,IXmDkC,2BWlDhC,OAAO8M,GAAU9M,EAAO,qBAC1B,IXsF0B,mBWrFxB,OAAO8M,GAAU9M,EAAO,oBAC1B,IX0FoB,aWzFlB,OAAO8M,GAAU9M,EAAO,cAC1B,QACE,OAAOA,EAAM6M,WAYftJ,GAAc,SAACvD,GACnB,OAAI8C,GAAgB9C,GAAe8M,GAAU9M,EAAO,aACxCA,EAAM6M,UAGdpJ,GAAsB,SAACzD,GAC3B,OAAI8C,GAAgB9C,GAAe8M,GAAU9M,EAAO,sBACxCA,EAAM6M,UAGd5I,GAAe,SAACjE,GACpB,ONtBgC,SAACA,GAAD,OAA2BA,EAAMgD,GAAGD,mBMsBhEA,CAAmB/C,GAAe8M,GAAU9M,EAAO,mBAC3CA,EAAM6M,UAGPE,GAAO,SAAC/M,GACnB,GAAsC,IAAlCA,EAAM6M,SAASG,QAAQpC,OAAc,OAAO5K,EADL,mBAEjBA,EAAM6M,SAASG,SAAlCC,EAFoC,KAEzBC,EAFyB,WAKrCC,EAAU,MAAQF,EAAR,CAAgBxM,MADdN,EAAYH,KAG9B,OAAO,MADSM,EAAiBN,EAAOiN,EAAOxM,OAC/C,CAEEoM,SAAS,MACJ7M,EAAM6M,SADH,CAENG,QAASE,EACTE,SAAS,CAAED,GAAH,mBAAkBnN,EAAM6M,SAASO,gBAKlCC,GAAO,SAACrN,GACnB,GAAuC,IAAnCA,EAAM6M,SAASO,SAASxC,OAAc,OAAO5K,EADN,mBAEjBA,EAAM6M,SAASO,UAAlCH,EAFoC,KAEzBC,EAFyB,WAKrCI,EAAU,MAAQL,EAAR,CAAgBxM,MADdN,EAAYH,KAG9B,OAAO,MADSM,EAAiBN,EAAOiN,EAAOxM,OAC/C,CAEEoM,SAAS,MACJ7M,EAAM6M,SADH,CAENG,QAAQ,CAAEM,GAAH,mBAAkBtN,EAAM6M,SAASG,UACxCI,SAAUF,OAOHJ,GAAY,SAAC9M,EAAcuN,GAEtC,MAAO,CAILP,QAAQ,CALK,CAAEO,cAAa9M,MAAON,EAAYH,KAKxC,mBAAcA,EAAM6M,SAASG,QAAQ/B,MAAM,EARpC,MAUdmC,SAAU,K,ujBC/GP,IAMMI,GAAc,SAACxN,GAAD,OAA2BA,EAAMyN,QAAQC,MAEvDC,GAAe,SAAC3N,GAAD,OAAiCA,EAAMyN,QAAQ/O,OAE9DkP,GAAiB,SAAC5N,GAAD,OAA+CA,EAAMyN,QAAQ9O,SAE9EkP,GAAiB,SAAC7N,EAAcsC,GAC3C,OAAQA,EAAOxE,MACb,IZkM2B,kBYjMzB,OAAOW,GAAeuB,EAAOsC,EAAOvE,QAAQW,MAAO4D,EAAOvE,QAAQY,SACpE,IZsM2B,kBYrMzB,OAAOmP,GAAe9N,GACxB,QACE,OAAOA,EAAMyN,UAIbhP,GAAiB,SAACuB,EAActB,EAAeC,GAA9B,aAClBqB,EAAMyN,QADY,CAErBC,MAAM,EACNhP,QACAC,aAAqBqH,IAAZrH,EAAwBA,EAAU,QAGvCmP,GAAiB,SAAC9N,GAAD,aAClBA,EAAMyN,QADY,CAErBC,MAAM,EACNhP,MAAO,KACPC,QAAS,Q,ujBC/BJ,IASMoP,GAAe,SAAC/N,GAAD,OAC3BA,EAAMgO,IAAID,cP6Dc,SAAC/N,GACxB,IAAMsF,EAAQvF,EAAcC,EAAMO,SAASlC,OAAO8G,UAClD,GAAc,OAAVG,EACF,MAAM,IAAInE,MAAM,yCAElB,OAAOmE,EOlEkBH,CAAUnF,IAGxBiO,GAAe,SAACjO,EAAcf,GAAf,OAC1Be,EAAMgO,IAAIE,aAAejP,GAGdkP,GAAgB,SAACnO,EAAcf,GAAf,OAC3Be,EAAMgO,IAAII,cAAgBnP,GAGfoP,GAAuB,SAACrO,EAAcf,GAAf,OAClCe,EAAMgO,IAAIM,qBAAuBrP,GAGtBsP,GAAyB,SAACvO,GAAD,OACpCA,EAAMgO,IAAIO,wBAGCC,GAAa,SAACxO,EAAcsC,GACvC,OAAQA,EAAOxE,MACb,Ib8M6B,oBa7M3B,OAAOkB,GAAgBgB,EAAOsC,EAAOvE,QAAQkB,IAC/C,IbkN2B,kBajNzB,OAAOC,GAAcc,EAAOsC,EAAOvE,QAAQkB,IAC7C,IbsNwC,+BarNtC,OAAOE,GAA0Ba,EAAOsC,EAAOvE,QAAQkB,IACzD,IbgO4B,mBa/N1B,OAAOI,GAAeW,EAAOsC,EAAOvE,QAAQkB,IAC9C,IbwNoC,2BavNlC,OAAOG,GAAsBY,EAAOsC,EAAOvE,QAAQkB,IACrD,KAAKwP,EACH,OAAOC,GAAS1O,GAClB,QACE,OAAOA,EAAMgO,MAIbhP,GAAkB,SAACgB,EAAcf,GAAf,aACnBe,EAAMgO,IADa,CAEtBD,aAAc9O,KAGVC,GAAgB,SAACc,EAAcf,GAAf,aACjBe,EAAMgO,IADW,CAEpBE,WAAYjP,KAGRE,GAA4B,SAACa,EAAcf,GAAf,aAC7Be,EAAMgO,IADuB,CAEhCO,uBAAwBtP,KAGpBI,GAAiB,SAACW,EAAcf,GAAf,aAClBe,EAAMgO,IADY,CAErBI,YAAanP,KAGTG,GAAwB,SAACY,EAAcf,GAAf,aACzBe,EAAMgO,IADmB,CAE5BM,mBAAoBrP,KAGhByP,GAAW,SAAC1O,GAAD,aACZA,EAAMgO,IADM,CAEfD,aAAc,KACdG,WAAY,KACZE,YAAa,KACbG,uBAAwB,KACxBD,mBAAoB,Q,6NCpFf,IAIMK,GAAc,SAAC3O,GAAD,OAA0BA,EAAMO,SAASqO,SAASC,MAEhEC,GAAkB,SAAC9O,EAAcsC,GAC5C,OAAQA,EAAOxE,MACb,Id0R+B,sBczR7B,OAAOiR,GAAkB/O,EAAOsC,EAAOvE,QAAQ8Q,MACjD,QACG,OAAO7O,EAAMO,SAASqO,WAIvBG,GAAoB,SAAC/O,EAAc6O,GAAf,O,uVAAA,IACrB7O,EAAMO,SAASqO,SADM,CAExBC,UCOWG,GAAmB,CAC9BzO,SAAU,CACRlC,MTAoC,CACtC4B,IAAK,KACLC,UAAW,CACTsE,KAAM,GACNM,SAAU,GACV8B,QAAS,GACTzB,UAAW,OSLX7G,ORbsC,CACxCkG,KAAM,IQaJjG,cPsBoD,CACtD0B,IAAK,KACLC,UAAW,CACTsE,KAAM,GACNM,SAAU,KACVoD,eAAgB,KAChBI,YAAa,GACbC,YAAa,KO5Bb/J,kBLR4D,CAC9DgG,KAAM,GACNqF,QAAS,MKOPK,KAAMT,GACNmF,SD/B4C,CAC9CC,KAAM,aCgCN7L,GAAIT,GACJsK,SJzB8C,CAC9CG,QAAS,GACTI,SAAU,IIwBVK,QHjC4C,CAC5CC,MAAM,EACNhP,MAAO,KACPC,QAAS,MG+BTgB,KAAMwC,EACN6L,IFhCoC,CACpCD,aAAc,KACdG,WAAY,KACZE,YAAa,KACbG,uBAAwB,KACxBD,mBAAoB,O,ujBGFtB,IAiCMzO,GAAkB,SAACG,EAAcF,GAAf,aACnBQ,EAAiBN,EAAOF,GADL,CAEtB+M,SAAUC,GAAU9M,EAAO,8BAGvBiP,GAAa,SAACjP,GAClB,IAAMkP,EAAgB/O,EAAY6O,IAClC,OAAO,MACF1O,EAAiBN,EAAOkP,GAD7B,CAEErC,SAAUC,GAAU9M,EAAO,yBAIhBmP,GA9CC,WAAoD,IAAnDnP,EAAkD,uDAArCgP,GAAW1M,EAA0B,uCACjE,OAAQA,EAAOxE,MACb,IhB8LgB,OgB7Ld,OAAOiP,GAAK/M,GACd,IhBiMgB,OgBhMd,OAAOqN,GAAKrN,GACd,IhB0S4B,mBgBzS1B,OAAOH,GAAgBG,EAAOsC,EAAOvE,QAAQ+B,UAC/C,IhByRuB,cgBxRrB,OAAOmP,GAAWjP,GACpB,QACE,OAAO,MACFA,EADL,CAEEO,SAAS,MACJP,EAAMO,SADH,CAENlC,MAAO+G,GAAapF,EAAOsC,GAC3BhE,OAAQ8I,GAAcpH,EAAOsC,GAC7B/D,cAAekJ,GAAqBzH,EAAOsC,GAC3C9D,kBAAmB0N,GAAyBlM,EAAOsC,GACnD4H,KAAMG,GAAYrK,EAAOsC,GACzBsM,SAAUE,GAAgB9O,EAAOsC,KAEnCU,GAAIG,GAAUnD,EAAOsC,GACrBuK,SAAUD,GAAgB5M,EAAOsC,GACjCmL,QAASI,GAAe7N,EAAOsC,GAC/B3C,KAAM0C,EAAYrC,EAAOsC,GACzB0L,IAAKQ,GAAWxO,EAAOsC,OClCzB8M,GAA6C,CACjD,EAAK,SAAChP,EAAGiP,GACP,OAAIA,EAAEC,QjByDmC,CAC3CxR,KAF8B,oBiBrDrB,MAET,EAAK,SAACsC,EAAGiP,GACP,OAAIA,EAAEC,QjBoCwC,CAChDxR,KAFmC,yBiBhC1B,MAET,EAAK,SAACsC,EAAGiP,GACP,OAAIA,EAAEC,SACJD,EAAEE,iBjBOsC,CAC5CzR,KAF+B,sBiBHtB,MAET,EAAK,SAAC0R,EAAIH,GAER,OADyBpK,GAAcuK,GAAI5E,OAAS,GAC5ByE,EAAEC,SACxBD,EAAEE,iBjBuKmD,CACzDzR,KAF6C,oCiBnKpC,MAET,EAAK,SAAC0R,EAAIH,GACR,OAAIpK,GAAcuK,GAAI5E,OAAS,GAAKyE,EAAEC,QjByBa,CACrDxR,KAFyC,+BiBrBhC,MAET,EAAK,SAAC0R,EAAIH,GACR,OAAiC,IAA7BpK,GAAcuK,GAAI5E,QAAgByE,EAAEC,QjBcQ,CAClDxR,KAFsC,4BiBV7B,MAET,EAAK,SAACsC,EAAGiP,GACP,OAAIA,EAAEC,SAAWD,EAAEI,QjBgKY,CACjC3R,KAFkB,QiB9JT,MAET,EAAK,SAACsC,EAAGiP,GACP,OAAIA,EAAEC,SAAWD,EAAEI,SACjBJ,EAAEE,iBjBgK2B,CACjCzR,KAFkB,SiB5JT,O,0BChCI4R,I,0LAfX,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,yBACb,0BAAMA,UAAU,uBAAhB,uBACA,0BAAMA,UAAU,yBAAyB3O,KAAK4O,MAAMC,aAEtD,yBAAKF,UAAU,yBACb,0BAAMA,UAAU,uBAAhB,wBACA,0BAAMA,UAAU,yBAAyB3O,KAAK4O,MAAME,gB,GAVpCC,IAAMC,YCG9B,qBAAC,GAAD,CAAaH,WARC,iJAQoBC,SAJxB,sHCKV,qBAAC,GAAD,CAAaD,WATC,gJASoBC,SALxB,8KCiBGG,I,0LAhBH,IACUC,EAAelP,KAAK4O,MAA9BO,SACR,OACE,yBAAKR,UAAU,eACb,yBAAKA,UAAU,sBAAf,sBAEE,0BAAMA,UAAS,mDAA8CO,EAAa,WAAa,aACpFA,EAAa,WAAa,YAH/B,8B,GALiBH,IAAMC,YCJhB,qBAAC,GAAD,CAAYG,UAAU,ICAtB,qBAAC,GAAD,CAAYA,UAAU,I,kDCAZC,IAAV,SAAUA,KAAV,uEACPC,EAAe,IADR,OAGX,OAHW,SAGLC,aAAMD,GAHD,OAIX,OAJW,SAILE,aAAI9B,KAJC,6D,iBCSL+B,I,aAMAC,I,aAeAC,I,aAsEe1C,IA3FzB,SAAUwC,GAAKG,GAAf,uEACmB,OADnB,SACyBC,aAAKH,GAASE,GADvC,OAEE,OADME,EADR,gBAEQC,aAAK,CAACrC,EAAaA,EAAaA,EAAeA,IAFvD,OAGE,OAHF,SAGQsC,aAAOF,GAHf,uCAMA,SAAUJ,GAAQE,GAAlB,iEAEI,OAFJ,kBAEUJ,aAAI9B,EAAazM,EAAME,MAFjC,WAGQyO,EAHR,gBAIM,OAJN,SAIYD,KAJZ,8BAOQ,OAPR,UAOcA,KAPd,+BAWI,OAXJ,oBAWUH,aAAI9B,EAAazM,EAAMC,OAXjC,sFAeA,SAAUyO,KAAV,2FAGkB,OAHlB,SAGwBM,aAAOjD,IAH/B,OAIqB,OADbkD,EAHR,gBAI2BD,aAAO5G,IAJlC,OAKyB,OADjB8G,EAJR,gBAK+BF,aAAO,SAAAhR,GAAK,OAAImR,GAAwBnR,EAAOiR,EAASC,KALvF,OASE,OAJME,EALR,OAOQC,EAAW,IAPnB,UASQd,aAAI9B,EAAgBwC,IAT5B,QAUE,OAVF,UAUQX,aAAMe,EAAW,GAVzB,WAeyB,OAAnBD,EAfN,iBAgBmB,OAhBnB,UAgByBJ,aAAO,SAAAhR,GAAK,OAAI+E,GAAY/E,EAAOiR,KAhB5D,oCAiBgB,OAjBhB,UAiBsBV,aAAI9B,KAjB1B,gCAkBS,OAlBT,UAkBe8B,aAAI9B,KAlBnB,QAuBE,OAFQ6C,GArBV,EAqB6FF,GAAnFE,MAAO/J,EArBjB,EAqBiBA,QAASgK,EArB1B,EAqB0BA,eAAgBC,EArB1C,EAqB0CA,mBAAoBC,EArB9D,EAqB8DA,YAAaC,EArB3E,EAqB2EA,cArB3E,UAuBQnB,aAAI9B,EAAiBlH,IAvB7B,QAwBE,OAxBF,UAwBQgJ,aAAI9B,EAAwB8C,IAxBpC,QAyBE,OAzBF,UAyBQhB,aAAI9B,EAA4B+C,IAzBxC,QA0BE,OA1BF,UA0BQjB,aAAI9B,EAAkBgD,IA1B9B,QA2BE,OA3BF,UA2BQlB,aAAI9B,EAAWiD,IA3BvB,QA4BE,OA5BF,UA4BQpB,aAAMe,EAAW,GA5BzB,QA8BE,OA9BF,UA8BQd,aAAI9B,EAAgB6C,IA9B5B,QA+BE,OA/BF,UA+BQf,aAAI9B,EAAkB6C,IA/B9B,QAgCE,OAhCF,UAgCQhB,aAAMe,EAAW,GAhCzB,QAkCE,OAlCF,UAkCQd,aAAI9B,EAAiB,OAlC7B,QAmCE,OAnCF,UAmCQ8B,aAAI9B,EAAwB,OAnCpC,QAoCE,OApCF,UAoCQ8B,aAAI9B,EAA4B,OApCxC,QAqCE,OArCF,UAqCQ6B,aAAMe,EAAW,GArCzB,wCAiDA,IAAMF,GAA0B,SAACnR,EAAciR,EAAiBC,GAC9D,IAAMS,ElB7BsB,SAAC3R,EAAc6G,GAAf,OAC5BK,GAAUlH,GAAOmE,OAAO,SAAAtG,GAAK,OAAIA,EAAMyH,QAAUuB,IkB4BhC+K,CAAe5R,EAAOiR,GAEjCzF,EADUpL,IAAEyR,QAAQF,EAASvL,IAAI,SAAAvI,GAAK,OAAI4N,GAA0BzL,EAAOnC,EAAMoB,OAChE0F,KAAK,SAAA6G,GAAM,OAAIA,EAAOM,OAASoF,IAEtD,IAAK1F,EAAQ,OAAO,KACpB,IAAM3N,EAAQ8T,EAAShN,KAAK,SAAA9G,GAAK,OAAIA,EAAMoB,KAAOuM,EAAO3N,QACzD,IAAKA,EACH,MAAM,IAAIsD,MAAJ,kFAAqFqK,EAAO3N,MAA5F,MAER,IAAMwK,EAAef,GAAqBtH,EAAOnC,EAAMoB,IACvD,MAAO,CACLqS,MAAOzT,EAAM0H,IACbgC,QAAS1J,EAAMoB,GACfsS,eAAgBlJ,EAAapJ,GAC7BuS,mBAAoBhG,EAAOvM,GAC3BwS,YAAajG,EAAOgB,MACpBkF,cAAelG,EAAOiB,OAIX,SAAUuB,KAAV,iEACb,OADa,SACP8D,aAAUrD,EAAY+B,IAAM,GADrB,OAEb,OAFa,SAEPsB,aAAUrD,EAAY+B,IAAM,GAFrB,uC,iBCnGUuB,IAAV,SAAUA,KAAV,iEACb,OADa,SACPC,aAAI,CACR5B,KACApC,OAHW,uCCGf,IAAMiE,GAAiBC,cAEjBC,GAAQC,sBACZjD,GACAkD,8BAAoBC,0BVoDuB,SAAAC,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GAC1D,GjBwHsB,aiBxHlBA,EAAOxE,KAAqB,OAAO0U,EAAKlQ,GAE5C,IAAMtC,EAAQuS,EAAIE,WAHkD,EAI7CnQ,EAAOvE,QAAtB2C,EAJ4D,EAI5DA,IAAKgS,EAJuD,EAIvDA,MAEPC,EAAavD,GAAY1O,GAC/B,IAAKiS,EAAY,OAAOH,EAAKlQ,GAE7B,IAAMsQ,EAAYD,EAAW3S,EAAO0S,GACpC,OAAKE,GAELJ,EAAKlQ,GACEkQ,EAAKI,IAHWJ,EAAKlQ,MW/DW,SAAAiQ,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GACtD,G5B0L6C,oC4B1LzCA,EAAOxE,KAA4C,OAAO0U,EAAKlQ,GAEnE,IAAMtC,EAAQuS,EAAIE,WACZpU,EAAQ4G,GAAcjF,GACtBsF,EAAQjH,EAAM,GACdkH,EAAMlH,EAAM,IAAMA,EAAM,GACxBwU,ErB+ByB,SAAC7S,EAAc8S,EAAiBxB,GAE/D,OADcpK,GAAUlH,GAAO2E,KAAK,SAAAoO,GAAC,OAAIA,EAAEzN,QAAUwN,GAAWC,EAAExN,MAAQ+L,KAC1D,KqBjCM0B,CAAkBhT,EAAOsF,EAAOC,GAEtD,GAAIsN,EACF,OAAOL,EAAK/D,EAAsBoE,EAAc5T,KAEhD,IAAMsI,EAAU5B,MAChB,OAAO6M,E5BqDa,SAAClN,EAAeC,EAAatG,GAA7B,MAAqD,CAC3EnB,KAFuB,YAGvBC,QAAS,CAAEuH,QAAOC,MAAKtG,O4BvDTwP,CAAWnJ,EAAOC,EAAKgC,OCfW,SAAAgL,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GAC/D,G7BiGsC,6B6BjGlCA,EAAOxE,KAAqC,OAAO0U,EAAKlQ,GADa,MAGnDA,EAAOvE,QAArBkB,EAHiE,EAGjEA,GAAIpB,EAH6D,EAG7DA,MACNmC,EAAQuS,EAAIE,WAGlB,GAFyBhH,GAA0BzL,EAAOnC,GAAOsG,OAAO,SAAAqH,GAAM,OAAIA,EAAOvM,KAAOA,IAE3E2L,OAAS,EAAG,OAAO4H,EAAKlQ,GAE7C,IAAMiP,EAAiBjK,GAAqBtH,EAAOnC,GAAOoB,GAC1D,OAAOuT,EAAK/D,EAAiB,GAAI,CAAC5Q,GAAQ,CAAC0T,GAAiB,CAACtS,QCRzB,SAAAsT,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GACnD,G9BwCmC,0B8BxC/BA,EAAOxE,KAAkC,OAAO0U,EAAKlQ,GAEzD,IAAMtC,EAAQuS,EAAIE,WACZQ,EAAUhO,GAAcjF,GACxB1B,EAAS8B,IAAEyR,QAAQoB,EAAQ7M,IAAI,SAAAnH,GAAE,OvB2BZ,SAACe,EAAc6G,GAAf,OAC3BK,GAAUlH,GAAOmE,OAAO,SAAAtG,GAAK,OAAIA,EAAMyH,QAAUuB,GAAUhJ,EAAM0H,MAAQsB,IuB5B9BqM,CAAclT,EAAOf,MAC1DkU,EAAW/S,IAAE8D,KAAK9D,IAAEyR,QAAQvT,EAAO8H,IAAI,qBAAGnH,OAC1CmU,EAAkBD,EAAS/M,IAAI,SAAAnH,GAAE,OAAIqI,GAAqBtH,EAAOf,KAAKmH,IAAI,qBAAGnH,KAE7EoU,EADoBjT,IAAEyR,QAAQsB,EAAS/M,IAAI,SAAAnH,GAAE,OAAIwM,GAA0BzL,EAAOf,MAC1CmH,IAAI,qBAAGnH,KAErD,OAAOuT,EAAK/D,EAAiBwE,EAASE,EAAUC,EAAiBC,OCdd,SAAAd,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GAOlE,IANmB,C/B4FgB,wBANG,2BAYA,2BA/Bf,a+B7DPY,SAASZ,EAAOxE,MAAO,OAAO0U,EAAKlQ,GAEnDkQ,EAAKlQ,GACL,IAAMqJ,EAAaD,GAA2B6G,EAAIE,YAClD,OAAOD,E/B2G2D,CAClE1U,KAFwC,6BAGxCC,QAAS,CAAEkI,I+B7G4B0F,QCXC,SAAA4G,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GACvD,IAAK,CAACmM,EAAYA,GAAYvL,SAASZ,EAAOxE,MAAO,OAAO0U,EAAKlQ,GAEjE,IAAMtC,EAAQuS,EAAIE,WAClB,O1BqE0B,SAACzS,GAAD,OACwB,OAAlDD,EAAcC,EAAMO,SAASlC,OAAO8G,U0BtE/BmO,CAAatT,GAGT0L,GAA2B1L,GAAO4K,OAAS,EAC3C4H,EAAK/D,EAAiB,+BAAgC8E,KAGxDf,EAAKlQ,GANHkQ,EAAK/D,EAAiB,sBAAuB+E,QLMpDvB,GMb4B,SAAAM,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GAC7C,MAAK,CAACmM,EAAeA,GAAevL,SAASZ,EAAOxE,MAEhDwE,EAAOxE,OAAS2Q,EACX+D,EAAK/D,EAAiB,iBAAkBgF,KAExCnR,EAAOxE,OAAS2Q,EAChB+D,EAAK/D,EAAiB,iBAAkBiF,UAD5C,EAL6DlB,EAAKlQ,MCFjC,SAAAlC,GAAC,OAAI,SAAAoS,GAAI,OAAI,SAAAlQ,GACnD,GlCsT2B,kBkCtTvBA,EAAOxE,KAA0B,OAAO0U,EAAKlQ,GACjD,IACE,IAAMqR,EAAQC,aAAaC,QAAQ,WACnC,IAAKF,EAAO,OACZ,IAAM7T,EAAWgU,KAAKC,MAAMJ,GAC5BnB,EAAK/D,EAAkB3O,IACvB,MAAMM,GACNwT,aAAaI,UAAU,eAIa,SAAAzB,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GACrD,GlCqS2B,kBkCrSvBA,EAAOxE,KAA0B,OAAO0U,EAAKlQ,GACjD,IAAMtC,EAAQuS,EAAIE,WACZ3S,EAAWK,EAAYH,GAC7B,IACE4T,aAAaK,QAAQ,UAAWH,KAAKI,UAAUpU,IAC/C,MAAMM,GACN,WChBgC,SAAAmS,GAAG,OAAI,SAAAC,GAAI,OAAI,SAAAlQ,GACjD,GnC8T8B,qBmC9T1BA,EAAOxE,KAA6B,OAAO0U,EAAKlQ,GAEpD,IAAMtC,EAAQuS,EAAIE,WACZ3S,EAAWK,EAAYH,GACvBmU,EAAgBL,KAAKI,UAAUpU,EAAU,KAAM,MAC/CsU,EAAO,8CAA0CC,mBAAmBF,IAEpEG,EADO3F,GAAY3O,GACMuU,cAAcC,MAAM,KAAKC,KAAK,KACvDC,EAAWJ,EAAkB1J,OAAS,EAAI0J,EAAoB,mBAE9DK,EAAUC,SAASC,cAAc,KACvCF,EAAQG,aAAa,OAAQV,GAC7BO,EAAQG,aAAa,WAAYJ,GACjCC,EAAQI,WAIwB,SAAA3U,GAAC,OAAI,SAAAoS,GAAI,OAAI,SAAAlQ,GAC7C,GnCiT4B,mBmCjTxBA,EAAOxE,KAA2B,OAAO0U,EAAKlQ,GADK,SAGxC0S,IAHwC,4EAGvD,+BAAAjC,EAAA,4DACEkC,EAAUC,oBAAoB,SAAUF,GAD1C,kBAGgChU,KAAKmU,MAAM,GAAGC,OAH9C,cAGUjB,EAHV,OAIUkB,EAAUvB,KAAKC,MAAMI,GAJ/B,kBAKW3B,EAAK/D,EAAkB4G,KALlC,yDAOW7C,EAAK/D,EACV,eACA,uGATN,wDAHuD,sBAkBvD,IAAMwG,EAAYL,SAASC,cAAc,SACzCI,EAAUnX,KAAO,OACjBmX,EAAUK,OAAS,cACnBL,EAAUM,iBAAiB,SAAUP,GACrCC,EAAUF,cRpBZ9C,GAAeuD,IAAIC,IAEJtD,U,oBSATuD,I,0LAEF,IAAM/F,EAAYgG,KAAW,QAAS,CACpC,kBAAmB3U,KAAK4O,MAAMgG,WAC9B,gBAAiB5U,KAAK4O,MAAMiG,WAGxBC,EAAa9U,KAAK4O,MAAMmG,WAC1B/U,KAAKgV,yBACLhV,KAAKiV,6BACT,OAAO,0BAAMtG,UAAWA,EAAWuG,EAAGJ,M,mDAGH,MAWJ9U,KAAK4O,MAA5BtK,EAX2B,EAW3BA,MAAOC,EAXoB,EAWpBA,IAAK4Q,EAXe,EAWfA,QACdC,EAAM9Q,EAAMjE,KAAKkE,EAAIwB,MAAMzB,GAAOhE,MAAM,KACxC+U,EAAeD,EAAI/U,KAAK8U,EAAQpP,MAAMqP,GAAK9U,MAAM,IACvD,MAAM,KAAN,OAAYgE,EAAM1E,EAAlB,YAAuB0E,EAAMzE,EAA7B,cAAoCwV,EAAczV,EAAlD,YAAuDyV,EAAcxV,EAArE,YAA0E0E,EAAI3E,EAA9E,YAAmF2E,EAAI1E,K,+CAGxD,MAOJG,KAAK4O,MAAxBtK,EAPuB,EAOvBA,MACFgR,EARyB,EAOhBH,QACIpP,MAAMzB,GAAOhE,MAAM,EAAI,GAIpCiV,EAAwB,IAAnBD,EAAGpV,YACVoV,EAAGvO,OAAOC,YAAY1G,MAJP,IAKf,IAAIX,EALW,GAKQ,GACrB6V,EAAQlR,EAAMjE,KAAKiV,GAAIjV,KAAKkV,GAC5BE,EAAQnR,EAAMjE,KAAKiV,GAAIvP,MAAMwP,GACnC,MAAM,KAAN,OAAYjR,EAAM1E,EAAlB,YAAuB0E,EAAMzE,EAA7B,cAAoC2V,EAAM5V,EAA1C,YAA+C4V,EAAM3V,EAArD,YAA0D4V,EAAM7V,EAAhE,YAAqE6V,EAAM5V,EAA3E,YAAgFyE,EAAM1E,EAAtF,YAA2F0E,EAAMzE,O,GA/CjFkP,IAAMC,YAiEX0G,eAdS,SAAC1W,EAAc2W,GACrC,IAAMrR,EAAQb,GAASzE,EAAO2W,EAASC,QAAQtR,OACzCC,EAAMd,GAASzE,EAAO2W,EAASC,QAAQrR,KACvC8C,EAAef,GAAqBtH,EAAO2W,EAASC,QAAQ3X,IAClE,MAAO,CACLqG,MAAO3E,EAAOmG,KAAKxB,EAAMvB,KACzBwB,IAAK5E,EAAOmG,KAAKvB,EAAIxB,KACrBoS,QAASxV,EAAOmG,KAAKuB,EAAatE,KAClCgS,WAAYzQ,EAAMrG,KAAOsG,EAAItG,GAC7B2W,WAAYxT,EAAapC,GACzB6V,SAAU1H,GAAcnO,EAAO2W,EAASC,QAAQ3X,MAIrCyX,CAEbhB,ICjEImB,I,mNA4CIC,gBAAkB,SAACzH,GACzB,EAAKO,MAAMmH,a,EAGLC,cAAgB,SAAC3H,GACvB,EAAKO,MAAMqH,W,EAGLC,kBAAoB,SAACC,GAC3B,EAAKvH,MAAM5L,eAAemT,EAAIC,OAAO3W,Q,EAG/B4W,gBAAkB,WACxB,EAAKzH,MAAM3L,gB,yEAxDH,IACA2B,EAAa5E,KAAK4O,MAAMgH,QAAxBhR,SACF+J,EAAYgG,KAAW,OAAQ,CACnC,iBAAkB3U,KAAK4O,MAAM0H,WAC7B,cAAetW,KAAK4O,MAAMgH,QAAQ5R,QAClC,cAAehE,KAAK4O,MAAM2H,QAC1B,iBAAkBvW,KAAK4O,MAAMgG,WAC7B,gBAAiB5U,KAAK4O,MAAMgG,YAAc5U,KAAK4O,MAAMiG,WAGjD2B,EAAoB7B,KAAW,uBAAwB,CAC3D,iCAAkC3U,KAAK4O,MAAMgG,aAGzC7R,EAAMpD,EAAOmG,KAAK9F,KAAK4O,MAAMgH,QAAQ7S,KACrC0T,EAAc1T,EAAI1C,KAAK,IAAIV,GAAO,GAAkB+W,KAE1D,OACE,yBAAK/H,UAAU,mBACb,yBAAKA,UAAWA,EACXgI,YAAa3W,KAAK8V,gBAClBc,UAAW5W,KAAKgW,cAChBa,MAAO,CACLC,SAAU,WACVC,KAAMhU,EAAInD,EA3BE,GA4BZoX,IAAKjU,EAAIlD,EA5BG,MA8BnB,2BAAO8O,UAAW6H,EACXS,UAAWjX,KAAK4O,MAAMgG,WACtBnV,MAAOmF,EACPsS,SAAUlX,KAAKkW,kBACfiB,OAAQnX,KAAKqW,gBACbvZ,KAAK,OACLsa,UAAW,EACXP,MAAO,CACLC,SAAU,WACVC,KAAMN,EAAY7W,EAClBoX,IAAKP,EAAY5W,U,GAtCfkP,IAAMC,YA2EV0G,eAdS,SAAC1W,EAAc2W,GAAf,MAAkC,CACxDW,WAAYzS,GAAe7E,EAAO2W,EAASC,QAAQ3X,IACnDsY,QAASrS,GAAYlF,EAAO2W,EAASC,QAAQ3X,IAC7C2W,WAAYxT,EAAapC,GACzB6V,SAAU5H,GAAajO,EAAO2W,EAASC,QAAQ3X,MAGtB,SAACoZ,EAAoB1B,GAArB,MAAwC,CACjE3S,eAAgB,SAACvD,GAAD,OAAmB4X,ErC3DP,SAACpZ,EAAYwB,GAAb,MAAwC,CACpE3C,KAF6B,kBAG7BC,QAAS,CAAEkB,KAAIwB,UqCyD6BgO,CAAiBkI,EAASC,QAAQ3X,GAAIwB,KAClFwD,aAAc,kBAAMoU,ErCtDqB,CACzCva,KAF2B,mBqCwD3BiZ,UAAW,kBAAMsB,ErCvFmC,CACpDva,KAF6B,kBAG7BC,QAAS,CAAEkB,GqCqF+B0X,EAASC,QAAQ3X,OAC3DgY,QAAS,kBAAMoB,ErClFyB,CACxCva,KAF2B,qBqCsFd4Y,CAGbG,IC1EIyB,I,mNAqDIxB,gBAAkB,SAACzH,GACzB,EAAKO,MAAMmH,a,EAGLC,cAAgB,SAAC3H,GACvB,EAAKO,MAAMqH,W,yEAxDX,IAAMtH,EAAYgG,KAAW,gBAAiB,CAC5C,0BAA2B3U,KAAK4O,MAAMgG,WACtC,wBAAyB5U,KAAK4O,MAAMiG,WAGhCC,EAAa9U,KAAK4O,MAAMmG,WAC5B/U,KAAKuX,qBACLvX,KAAKiV,6BACP,OAAO,0BAAMtG,UAAWA,EACXuG,EAAGJ,EACH6B,YAAa3W,KAAK8V,gBAClBc,UAAW5W,KAAKgW,kB,mDAMO,IAAD,EACZhW,KAAK4O,MAApBtK,EAD2B,EAC3BA,MAAOC,EADoB,EACpBA,IACTxB,EAAMpD,EAAOmG,KAAK9F,KAAK4O,MAAMgH,QAAQ7S,KACrC+D,EAAOvC,EAAIwB,MAAMzB,GAGjBgR,EAA0B,IAArBxO,EAAK5G,YACZ4G,EAAKE,YAAY1G,MA5BJ,IA6Bb,IAAIX,EA7BS,GA6BY,GACvB4V,EAAKD,EAAGvO,OAAOzG,MAAM,EAAI,GACzBkX,EAAKzU,EAAIgD,MAAMuP,GAAIjV,KAAKkV,GACxBkC,EAAK1U,EAAIgD,MAAMuP,GAAIvP,MAAMwP,GAC/B,MAAM,KAAN,OAAYiC,EAAG5X,EAAf,YAAoB4X,EAAG3X,EAAvB,cAA8BkD,EAAInD,EAAlC,YAAuCmD,EAAIlD,EAA3C,cAAkD4X,EAAG7X,EAArD,YAA0D6X,EAAG5X,K,2CAMjC,IACpByE,EAAUtE,KAAK4O,MAAftK,MACFvB,EAAMpD,EAAOmG,KAAK9F,KAAK4O,MAAMgH,QAAQ7S,KACrC+D,EAAO/D,EAAIgD,MAAMzB,GAGjBgR,EAA0B,IAArBxO,EAAK5G,YACZ4G,EAAKE,YACL,IAAIrH,EAAO,EAAG,GACZ4V,EAAKD,EAAGvO,OAAOzG,MAhDJ,IAiDXoX,EAAM3U,EAAI1C,KAAKkV,EAAGjV,MAAM,KACxBkX,EAAKE,EAAI3R,MAAMwP,GAAIlV,KAAKiV,EAAGhV,MAAMqX,IACjCF,EAAKC,EAAI3R,MAAMwP,GAAIxP,MAAMuP,EAAGhV,MAAMqX,IACxC,MAAM,KAAN,OAAYH,EAAG5X,EAAf,YAAoB4X,EAAG3X,EAAvB,cAA8B6X,EAAI9X,EAAlC,YAAuC8X,EAAI7X,EAA3C,cAAkD4X,EAAG7X,EAArD,YAA0D6X,EAAG5X,O,GAlDtCkP,IAAMC,YAgFlB0G,eAlBS,SAAC1W,EAAc2W,GACrC,IAAM9Y,EAAQsJ,GAAUnH,EAAO2W,EAASC,QAAQ/Y,OAC1CyH,EAAQb,GAASzE,EAAOnC,EAAMyH,OAC9BC,EAAMd,GAASzE,EAAOnC,EAAM0H,KAClC,MAAO,CACLD,MAAO3E,EAAOmG,KAAKxB,EAAMvB,KACzBwB,IAAK5E,EAAOmG,KAAKvB,EAAIxB,KACrBgS,WAAYzQ,EAAMrG,KAAOsG,EAAItG,GAC7B2W,WAAYxT,EAAapC,GACzB6V,SAAUxH,GAAqBrO,EAAO2W,EAASC,QAAQ3X,MAIhC,SAACoZ,EAAoB1B,GAArB,MAAwC,CACjEI,UAAW,kBAAMsB,EtC5B2C,CAC5Dva,KAFsC,2BAGtCC,QAAS,CAAEkB,GsC0BuC0X,EAASC,QAAQ3X,OACnEgY,QAAS,kBAAMoB,EtCvBiC,CAChDva,KAFoC,8BsC2BvB4Y,CAGb4B,I,ikBC+BaM,G,6MA5HLC,QAA6C9I,IAAM+I,Y,EAuFnDC,mBAAqB,SAAC1J,GACvB,EAAKO,MAAMsI,UAChB,EAAKc,gBAAgB3J,EAAE+H,OAAO3W,Q,EAMxBwY,WAAa,WACnB,EAAKD,gBAAgBlP,GAAeC,I,EAG9BmP,YAAc,WACpB,EAAKF,gBAAgBlP,GAAeE,I,EAW9BmP,YAAc,WAChB,EAAKvJ,MAAMwJ,SAAS,EAAKxJ,MAAMwJ,W,EAG7BC,WAAa,WACf,EAAKzJ,MAAMuI,QAAQ,EAAKvI,MAAMuI,U,EAG5BmB,kBAAoB,WACtB,EAAK1J,MAAM2J,UAAU,EAAK3J,MAAM2J,Y,yEAtH5B,IAAD,EACuBvY,KAAK4O,MAAMpE,OAAjCM,EADD,EACCA,KAAMU,EADP,EACOA,MAAOC,EADd,EACcA,KAEfkD,EAAYgG,KAAW,oBAAqB,CAChD,4BAA6B3U,KAAK4O,MAAMiG,WAGpC2D,EAAiB7D,KAAW,2BAA4B,CAC5D,kCAAmC3U,KAAK4O,MAAMlD,UAC9C,qCAAsC1L,KAAK4O,MAAMgG,aAK7C6D,EAAqB9D,KAAW6D,EAAgB,CACpD,kCAAmCxY,KAAK4O,MAAMpE,OAAOmB,cAGjD+M,EAAoB/D,KAAW,8BAA+B,CAClE,qCAAsC3U,KAAK4O,MAAMlD,UACjD,wCAAyC1L,KAAK4O,MAAMgG,aAGtD,OACE,yBAAKjG,UAAWA,GACd,2BAAOA,UAAW8J,EACXE,IAAK3Y,KAAK6X,QACVZ,UAAWjX,KAAK4O,MAAMgG,WACtBnV,MAAOqL,EACP8N,YAAY,SACZ1B,SAAUlX,KAAKkW,kBAAkB,QACjCkC,QAASpY,KAAKmY,YACdhB,OAAQnX,KAAKqY,WACbvb,KAAK,OACLsa,UAAW,IAClB,0BAAMzI,UAAU,gCAAhB,KACA,2BAAOA,UAAW6J,EACXvB,UAAWjX,KAAK4O,MAAMgG,WACtBnV,MAAO+L,EACPoN,YAAY,SACZ1B,SAAUlX,KAAKkW,kBAAkB,SACjCkC,QAASpY,KAAKmY,YACdhB,OAAQnX,KAAKqY,WACbvb,KAAK,OACLsa,UAAW,IAClB,4BAAQzI,UAAW+J,EACXzB,UAAWjX,KAAK4O,MAAMgG,WACtBnV,MAAOgM,EACPyL,SAAUlX,KAAK+X,oBACrB,4BAAQtY,MAAOqJ,GAAeC,EAAG4N,YAAa3W,KAAKiY,YAAnD,UACA,4BAAQxY,MAAOqJ,GAAeE,EAAG2N,YAAa3W,KAAKkY,aAAnD,WAEDlY,KAAK4O,MAAMgG,YACV,4BAAQjG,UAAU,4BACVkK,QAAS7Y,KAAKsY,uB,0CAWxBtY,KAAK4O,MAAMlD,WAAW1L,KAAK8Y,U,8BAI3B9Y,KAAK6X,QAAQ5H,SAASjQ,KAAK6X,QAAQ5H,QAAQ6I,U,wCAGvBC,GAA6B,IAAD,OACpD,OAAO,SAAC1K,GACD,EAAKO,MAAMsI,UAGY,MAAnB7I,EAAE+H,OAAO3W,OAClB,EAAKmP,MAAMsI,SAAX,MACK,EAAKtI,MAAMpE,OADhB,eAEGuO,EAAW1K,EAAE+H,OAAO3W,Y,sCAqBHxC,GACjB+C,KAAK4O,MAAMsI,UAChBlX,KAAK4O,MAAMsI,SAAX,MACKlX,KAAK4O,MAAMpE,OADhB,CAEEiB,KAAMxO,S,GA5GmB8R,IAAMC,WCoB/BgK,I,mNAoCIC,mBAAqB,SAACzO,GAC5B,EAAKoE,MAAMsK,aAAa1O,I,yEApChB,IAAD,SACsBxK,KAAK4O,MAA1BgH,EADD,EACCA,QAAST,EADV,EACUA,QACXgE,EAASnZ,KAAKoZ,gBACdzK,EAAYgG,KAChB,qBAD0B,8BAEHwE,IAGzB,OACE,yBAAKxK,UAAWA,EACXkI,MAAO,CAILC,SAAU,WACVC,KAAM5B,EAAQvV,EACdoX,IAAK7B,EAAQtV,IAEjBG,KAAK4O,MAAMgG,aAAe5U,KAAKqZ,YAAYF,IAAWnZ,KAAKsZ,wBAC3D1D,EAAQxQ,IAAI,SAAAoF,GAAM,OACjB,kBAAC,GAAD,CAAkB9K,IAAK8K,EAAOvM,GACZuM,OAAQA,EACRkB,UAAW,EAAKkD,MAAM3D,gBAAkBT,EAAOvM,GAC/C2W,WAAY,EAAKhG,MAAMgG,WACvBC,UAAW,EAAKjG,MAAMgG,YAAc,EAAKhG,MAAM2K,eAAiB/O,EAAOvM,GACvEiZ,SAAU,EAAK+B,mBACfV,SAAU,EAAKiB,mBAAmBhP,EAAOvM,GAAIuM,EAAO3N,OACpDub,QAAS,EAAKqB,kBAAkBjP,EAAOvM,IACvCkZ,OAAQ,EAAKuC,iBAAiBlP,EAAOvM,QAExD+B,KAAK4O,MAAMgG,YAAc5U,KAAKqZ,YAAYF,IAAWnZ,KAAKsZ,2B,yCAStCrb,EAAYpB,GAAgB,IAAD,OACpD,OAAO,kBAAM,EAAK+R,MAAM+K,aAAa1b,EAAIpB,M,wCAGjBoB,GAAa,IAAD,OACpC,OAAO,kBAAM,EAAK2Q,MAAMgL,YAAY3b,M,uCAGbA,GAAa,IAAD,OACnC,OAAO,kBAAM,EAAK2Q,MAAMiL,WAAW5b,M,4CAGPpB,GAAgB,IAAD,OAC3C,OAAO,kBAAM,EAAK+R,MAAMkL,UAAUjd,M,sCAMlC,OAAImD,KAAK4O,MAAMmG,WACN/U,KAAK+Z,wBAEL/Z,KAAKga,0B,8CAMiB,IAAD,EACHha,KAAK4O,MAAxBtK,EADsB,EACtBA,MACF2V,EAFwB,EACf9E,QACOpP,MAAMzB,GAAO4V,QACnC,OAAOla,KAAKma,0BAA0BF,K,8CAOP,IAAD,EACEja,KAAK4O,MAA7BtK,EADsB,EACtBA,MAAOC,EADe,EACfA,IACT+Q,EAFwB,EACVH,QACDpP,MAAMzB,GACnBiR,EAAKD,EAAGtN,QAAQzD,EAAIwB,MAAMzB,IAC1B4V,EAAQ5E,EAAGvP,MAAMwP,GAAI2E,QAC3B,OAAOla,KAAKma,0BAA0BD,K,gDAONA,GAEhC,OAAI,EAAIA,GAASA,GAASpa,KAAKsa,GAAK,EAAU,WAErCta,KAAKsa,GAAK,EAAIF,GAASA,GAASpa,KAAKsa,GAAW,aAE/Cta,KAAKsa,GAAK,EAAIF,GAASA,IAAUpa,KAAKsa,GAAW,eAE/C,gB,kCAOMC,GAClB,MAAO,OAAOC,KAAKD,K,8CAInB,OACE,4BAAQ1L,UAAU,iCACVkK,QAAS7Y,KAAKua,sBAAsBva,KAAK4O,MAAMrI,UADvD,e,GA/G0BwI,IAAMC,YA+IvB0G,eAxBS,SAAC1W,EAAc2W,GACrC,IAAM9Y,EAAQsJ,GAAUnH,EAAO2W,EAASpP,SAClCjC,EAAQb,GAASzE,EAAOnC,EAAMyH,OAC9BC,EAAMd,GAASzE,EAAOnC,EAAM0H,KAC5B4Q,EAAU7O,GAAqBtH,EAAOnC,EAAMoB,IAClD,MAAO,CACLqG,MAAO3E,EAAOmG,KAAKxB,EAAMvB,KACzBwB,IAAK5E,EAAOmG,KAAKvB,EAAIxB,KACrBoS,QAASxV,EAAOmG,KAAKqP,EAAQpS,KAC7BgS,WAAYzQ,EAAMrG,KAAOsG,EAAItG,GAC7BgN,cAAeA,GAAcjM,GAC7B4V,WAAYxT,EAAapC,GACzBua,aAAchM,GAAuBvO,KAId,SAACqY,GAAD,MAAyB,CAClD6B,aAAc,SAAC1O,GAAD,OAAkC6M,ExCrFZ,SAAC7M,GAAD,MAA2C,CAC/E1N,KAFsC,2BAGtCC,QAAS,CAAEyN,WwCmF8CiD,CAAyBjD,KAClFmP,aAAc,SAAC1b,EAAYpB,GAAb,OAA+Bwa,ExC1ET,SAACpZ,EAAYpB,GAAb,MAAwC,CAC5EC,KAFsC,2BAGtCC,QAAS,CAAEkB,KAAIpB,UwCwEuC4Q,CAAyBxP,EAAIpB,KACnFid,UAAW,SAACjd,GAAD,OAAmBwa,EAAS5J,EAAsB5Q,KAC7D+c,YAAa,SAAC3b,GAAD,OAAgBoZ,ExCtEM,SAACpZ,GAAD,MAAyB,CAC5DnB,KAFqC,0BAGrCC,QAAS,CAAEkB,OwCoE2BwP,CAAwBxP,KAC9D4b,WAAY,SAAC5b,GAAD,OAAgBoZ,ExCjEM,SAACpZ,GAAD,MAAyB,CAC3DnB,KAFoC,yBAGpCC,QAAS,CAAEkB,OwC+D0BwP,CAAuBxP,OAG/CyX,CAGbsD,IC1KIwB,I,mNAcIxE,cAAgB,SAAC3H,GACvB,EAAKO,MAAM6L,IAAI,EAAK7L,MAAM7L,M,yEAdlB,IAAD,EACoB/C,KAAK4O,MAAxB8L,EADD,EACCA,UAAW3X,EADZ,EACYA,IACnB,OAAQ2X,GACN,yBAAK/L,UAAU,cACViI,UAAW5W,KAAKgW,cAChBa,MAAO,CACLC,SAAU,WACVC,KAAMhU,EAAInD,EJCI,GIAdoX,IAAKjU,EAAIlD,EJAK,GIAa,S,GATfkP,IAAMC,YA4BhB0G,eATS,SAAC1W,GAAD,MAAmB,CACzC0b,UAAW9Y,GAAa5C,GACxB+D,IAAKvB,GAASxC,KAGW,SAACqY,GAAD,MAAyB,CAClDoD,IAAK,SAAC1X,GAAD,OAAiBsU,EzCVD,SAACtU,GAAD,MAA0B,CAC/CjG,KAFsB,WAGtBC,QAAS,CAAEgG,QyCQoB0K,CAAU1K,OAG5B2S,CAGb8E,ICrBIG,I,mNA8BI7E,gBAAkB,SAACzH,GACzB,EAAKO,MAAMmH,UAAU,EAAK6E,gBAAgBvM,K,EAGpC2H,cAAgB,WACtB,EAAKpH,MAAMqH,W,EAML4E,gBAAkB,SAACxM,GACzBA,EAAEE,iBACF,EAAKK,MAAMkM,UAAU,EAAKF,gBAAgBvM,K,yEA1ClC,IAAD,EACqDrO,KAAK4O,MAAzDtR,EADD,EACCA,OAAQD,EADT,EACSA,MAAOE,EADhB,EACgBA,cAAeC,EAD/B,EAC+BA,kBAQtC,OACE,yBAAKmR,UAAU,SACRgI,YAAa3W,KAAK8V,gBAClBc,UAAW5W,KAAKgW,cAChB+E,YAAa/a,KAAK6a,iBACvB,yBAAKG,MAAM,6BACNC,MAAM,OACNC,OAAO,QACT5d,EAAO8H,IAAI,SAAAwQ,GAAO,OAAI,kBAAC,GAAD,CAAOlW,IAAKkW,EAAQ3X,GAAI2X,QAASA,MACvDrY,EAAc6H,IAAI,SAAAwQ,GAAO,OAAI,kBAAC,GAAD,CAAclW,IAAKkW,EAAQ3X,GAAI2X,QAASA,OAEvEvY,EAAM+H,IAAI,SAAAwQ,GAAO,OAAI,kBAAC,GAAD,CAAMlW,IAAKkW,EAAQ3X,GAAI2X,QAASA,MACrDtS,OAAOoC,KAAKlI,GAAmB4H,IAAI,SAAAmB,GAAO,OACzC,kBAAC,GAAD,CAAmB7G,IAAK6G,EAASA,QAASA,EAASqP,QAASpY,EAAkB+I,OAEhF,kBAAC,GAAD,S,sCAuBkB8H,GAAsB,IAAD,EACrBA,EAAE8M,cAAcC,wBAA9BrE,EADmC,EACnCA,KAAMC,EAD6B,EAC7BA,IACNqE,EAAqBhN,EAArBgN,QAASC,EAAYjN,EAAZiN,QACjB,OAAO,IAAI3b,EAAO0b,EAAUtE,EAAMuE,EAAUtE,O,GAnD3BjI,IAAMC,YAoEZ0G,eAbS,SAAC1W,GAAD,MAAmB,CACzC1B,OAAQ4I,GAAUlH,GAClB3B,MAAOgG,GAASrE,GAChBzB,cAAe8I,GAAiBrH,GAChCxB,kBAAmB8M,GAA4BtL,KAGtB,SAACqY,GAAD,MAAyB,CAClDtB,UAAW,SAAChT,GAAD,OAAiBsU,E1C2EC,SAACtU,GAAD,MAA0B,CACvDjG,KAF+B,oBAG/BC,QAAS,CAAEgG,Q0C7E0B0K,CAAkB1K,KACvDkT,QAAS,kBAAMoB,E1CgF2B,CAC1Cva,KAF6B,qB0C9E7Bge,UAAW,SAAC/X,GAAD,OAAiBsU,E1CoFC,SAACtU,GAAD,MAA0B,CACvDjG,KAF+B,oBAG/BC,QAAS,CAAEgG,Q0CtF0B0K,CAAkB1K,OAG1C2S,CAGbiF,IChGWY,GAAmB,SAACvc,GAE/B,OADsBiF,GAAcjF,GAAO4K,QAEzC,KAAK,EAAG,MAAO,CACb4R,GAAgBC,WAElB,KAAK,EAAG,MAAO,CACbD,GAAgBC,UAChBD,GAAgBE,aAChBF,GAAgBG,oBAChBH,GAAgBI,WAChBJ,GAAgBK,kBAElB,KAAK,EAAG,MAAO,CACbL,GAAgBC,UAChBD,GAAgBM,kBAChBN,GAAgBO,eAChBP,GAAgBQ,sBAElB,QAAS,MAAO,CACdR,GAAgBC,UAChBD,GAAgBS,mBAChBT,GAAgBU,yBAiBTV,GAAqD,CAChEC,UAAW,YACXC,aAAc,eACdI,kBAAmB,oBACnBG,mBAAoB,qBACpBN,oBAAqB,sBACrBI,eAAgB,iBAChBH,WAAY,aACZO,aAAc,eACdN,iBAAkB,mBAClBG,qBAAsB,uBACtBE,sBAAuB,yBClCnBE,I,qNA0BIC,sBAAwB,WAC9B,EAAKzN,MAAM7C,Q,EAGLuQ,sBAAwB,WAC9B,EAAK1N,MAAMvC,Q,EAGLkQ,c,mBACLf,GAAgBC,UAAY,CAC3Bna,OAAQ,kBAAM,EAAKsN,MAAM4N,YACzB7N,UAAW,YACXjR,MAAO,kB,cAER8d,GAAgBE,aAAe,CAC9Bpa,OAAQ,kBAAM,EAAKsN,MAAM6N,gBACzB9N,UAAW,eACXjR,MAAO,iB,cAER8d,GAAgBM,kBAAoB,CACnCxa,OAAQ,kBAAM,EAAKsN,MAAM6N,gBACzB9N,UAAW,oBACXjR,MAAO,kB,cAER8d,GAAgBS,mBAAqB,CACpC3a,OAAQ,kBAAM,EAAKsN,MAAM6N,gBACzB9N,UAAW,qBACXjR,MAAO,kB,cAER8d,GAAgBG,oBAAsB,CACrCra,OAAQ,kBAAM,EAAKsN,MAAM8N,iBACzB/N,UAAW,sBACXjR,MAAO,wB,cAER8d,GAAgBO,eAAiB,CAChCza,OAAQ,kBAAM,EAAKsN,MAAM8N,iBACzB/N,UAAW,iBACXjR,MAAO,mB,cAER8d,GAAgBI,WAAa,CAC5Bta,OAAQ,kBAAM,EAAKsN,MAAM+N,aACzBhO,UAAW,aACXjR,MAAO,iC,cAER8d,GAAgBK,iBAAmB,CAClCva,OAAQ,kBAAM,EAAKsN,MAAMgO,eACzBjO,UAAW,mBACXjR,MAAO,mC,cAER8d,GAAgBQ,qBAAuB,CACtC1a,OAAQ,kBAAM,EAAKsN,MAAMgO,eACzBjO,UAAW,uBACXjR,MAAO,qC,cAER8d,GAAgBU,sBAAwB,CACvC5a,OAAQ,kBAAM,EAAKsN,MAAMgO,eACzBjO,UAAW,wBACXjR,MAAO,qC,4EAlFD,IAAD,OACP,OACE,yBAAKiR,UAAU,iBACb,yBAAKA,UAAU,oCACb,4BAAQA,UAAU,mDACVjR,MAAM,OACNmb,QAAS7Y,KAAKqc,wBACtB,4BAAQ1N,UAAU,mDACVjR,MAAM,OACNmb,QAAS7Y,KAAKsc,yBAGvBtc,KAAK4O,MAAMiO,YAAc7c,KAAK4O,MAAMkO,YAAY1X,IAAI,SAAAtI,GACnD,IAAMigB,EAAS,EAAKR,aAAazf,GACjC,OAAOigB,GACL,4BAAQpO,UAAS,+CAA0CoO,EAAOpO,UAAjD,WACTjR,MAAOqf,EAAOrf,MACdgC,IAAK5C,EACL+b,QAASkE,EAAOzb,gB,GAnBTyN,IAAMC,YAuGlB0G,eAfS,SAAC1W,GAAD,MAAmB,CACzC6d,WAAYzb,EAAapC,GACzB8d,YAAavB,GAAiBvc,KAGL,SAACqY,GAAD,MAAyB,CAClDtL,KAAM,kBAAMsL,E5C8FqB,CACjCva,KAFkB,U4C5FlBuP,KAAM,kBAAMgL,E5CkGqB,CACjCva,KAFkB,U4ChGlB0f,SAAU,kBAAMnF,E5CvF4B,CAC5Cva,KAF+B,uB4CyF/B2f,aAAc,kBAAMpF,E5ClE4B,CAChDva,KAFmC,2B4CoEnC4f,cAAe,kBAAMrF,E5C+EoC,CACzDva,KAF6C,qC4C7E7C6f,UAAW,kBAAMtF,E5C/DiC,CAClDva,KAFsC,8B4CiEtC8f,YAAa,kBAAMvF,E5C3DkC,CACrDva,KAFyC,mC4C+D5B4Y,CAGb0G,ICnHIY,I,mNA8BIC,eAAiB,WACvB,EAAKrO,MAAMX,c,EAGLiP,oBAAsB,WAC5B,EAAKtO,MAAMuO,Y,EAGLC,kBAAoB,WAC1B,EAAKxO,MAAMyO,U,yEArCX,OACE,yBAAK1O,UAAU,gBACb,yBAAKA,UAAU,yBACb,4BAAQA,UAAU,gDACVjR,MAAM,oBACNmb,QAAS7Y,KAAKid,iBACtB,4BAAQtO,UAAU,qDACVjR,MAAM,0BACNmb,QAAS7Y,KAAKkd,sBACtB,4BAAQvO,UAAU,mDACVjR,MAAM,wBACNmb,QAAS7Y,KAAKod,qBAGxB,uBAAGzO,UAAU,qBAAqB2O,KAAK,aAAvC,YACA,uBAAG3O,UAAU,qBAAqB2O,KAAK,aAAvC,YACA,uBAAG3O,UAAU,qBAAqB2O,KAAK,UAAvC,SACA,uBAAG3O,UAAU,qBAAqB2O,KAAK,UAAvC,SACA,uBAAG3O,UAAU,+CACV2O,KAAK,gCACLlH,OAAO,SACPmH,IAAI,uBAHP,kB,GApBkBxO,IAAMC,YAiDjB0G,eACb,KAPyB,SAAC2B,GAAD,MAAyB,CAClDpJ,WAAY,kBAAMoJ,E7C0PqB,CACvCva,KAFyB,iB6CxPzBqgB,SAAU,kBAAM9F,E7C8Q4B,CAC5Cva,KAF8B,sB6C5Q9BugB,OAAQ,kBAAMhG,E7CkR4B,CAC1Cva,KAF4B,sB6C9Qf4Y,CAGbsH,IC5CIQ,I,mNACIC,QAA2C1O,IAAM+I,Y,EAgFjD4F,aAAe,SAACrP,GACtB,EAAKO,MAAMrF,iBAAiB8E,EAAE+H,OAAOzN,a,EAG/BgV,uBAAyB,WAC/B,EAAK/O,MAAMgP,S,yEAnFH,IAAD,OACChJ,EAAe5U,KAAK4O,MAApBgG,WAEFiJ,EAAgBlJ,KAAW,aAAc,CAC7C,uBAAwBC,IAK1B,OACE,oCACG5U,KAAK8d,iBACN,yBAAKnP,UAAU,OACVgK,IAAK3Y,KAAKyd,QACVM,SAAU/d,KAAK0d,aACf7G,MAAO,CAAEoE,MAAM,GAAD,OAAK+C,IAAL,QACjB,yBAAKrP,UAAU,eACb,yBAAKA,UAAU,qBAAqBkI,MAAO,CAAEoE,MAV5B+C,MAUjB,kDAGChe,KAAK4O,MAAMlG,QAAQtD,IAAI,SAAC6Y,EAAGld,GAAJ,OACtB,2BAAOrB,IAAKqB,EACLkW,UAAW,EAAKrI,MAAMgG,WACtBjG,UAAWkP,EACXpe,MAAOwe,EACPrF,YAAY,SACZ1B,SAAU,EAAKgH,iBAAiBnd,GAChCqX,QAAS,EAAK+F,gBAAgBpd,GAC9B8V,MAAO,CAAEoE,MAAM,GAAD,OrCtCT,GqCsCS,OACdne,KAAK,OACLsa,UAAW,MAEpB,yBAAKzI,UAAU,sBAAsBkI,MAAO,CAAEoE,MAAM,GAAD,OAAK+C,GAAL,WAGtDhe,KAAKoe,gBACLpe,KAAKqe,uB,0CAMNre,KAAKyd,QAAQxN,SACfjQ,KAAKyd,QAAQxN,QAAQqO,SAASN,GAAgB,K,yCAI/BO,GACbA,EAASC,cAAgBxe,KAAK4O,MAAM4P,aAA0C,OAA3Bxe,KAAK4O,MAAM4P,aAChExe,KAAKye,gB,oCAOP,GAAIze,KAAKyd,QAAQxN,QAAS,CACxB,IACMyO,EADgB1e,KAAKyd,QAAQxN,QAAQ0O,WAAW,GACpBA,WAAW3e,KAAK4O,MAAM4P,YAAwB,GAC5EE,GAAcA,EAAiC5F,W,uCAI9B/V,GAAc,IAAD,OACpC,OAAO,SAACsL,GAGiB,MAAnBA,EAAE+H,OAAO3W,OACb,EAAKmP,MAAMgQ,WAAW7b,EAAKsL,EAAE+H,OAAO3W,U,sCAIhBsD,GAAc,IAAD,OACnC,OAAO,WACL,EAAK6L,MAAMiQ,UAAU9b,M,uCAiBvB,IAAM4L,EAAYgG,KAAW,cAAe,CAC1C,uBAAwB3U,KAAK4O,MAAMgG,aAErC,OACE,yBAAKjG,UAAWA,EACXkI,MAAO,CACLC,SAAU,WACVC,KAAK,cAAD,OAAgBiH,GAAhB,Y,0CAMb,OACE,4BAAQrP,UAAU,qBACVjR,MAAM,sBACNmb,QAAS7Y,KAAK2d,uBACd9G,MAAO,CACLC,SAAU,WACVgI,MAAM,cAAD,OAAgBd,IAAhB,Y,sCAOjB,OACE,oCACE,yBAAKrP,UAAU,4BACVkI,MAAO,CACLC,SAAU,WACVC,KAAK,cAAD,OAAgBiH,IAAhB,UAEX,yBAAKrP,UAAU,6BACVkI,MAAO,CACLC,SAAU,WACVgI,MAAM,cAAD,OAAgBd,IAAhB,e,GAlIDjP,IAAMC,YAsJV0G,eAbS,SAAC1W,GAAD,MAAmB,CACzC0J,QAASO,GAAYjK,GACrB4V,WAAYxT,EAAapC,GACzBwf,YAAarV,GAAgBnK,KAGJ,SAACqY,GAAD,MAAyB,CAClDuH,WAAY,SAAC7b,EAAatD,GAAd,OAAgC4X,E9ChChB,SAACtU,EAAatD,GAAd,MAAyC,CACrE3C,KAF8B,mBAG9BC,QAAS,CAAEgG,MAAKtD,U8C8BqCgO,CAAiB1K,EAAKtD,KAC3E8J,iBAAkB,SAACZ,GAAD,OAAwB0O,E9CtBZ,SAAC1O,GAAD,MAAiC,CAC/D7L,KAFgC,qBAGhCC,QAAS,CAAE4L,e8CoBwC8E,CAAmB9E,KACtEkW,UAAW,SAAC9b,GAAD,OAAiBsU,E9CjBD,SAACtU,GAAD,MAA0B,CACrDjG,KAF6B,kBAG7BC,QAAS,CAAEgG,Q8Ce0B0K,CAAgB1K,KACrD6a,MAAO,kBAAMvG,E9C7ByB,CACtCva,KAFwB,kB8CiCX4Y,CAGb8H,IC7JIuB,I,mNAmBIC,MAAQ,WACd,EAAKpQ,MAAMoQ,S,EAGLC,gBAAkB,WACpB,EAAKrQ,MAAMxN,aAAc,EAAKwN,MAAMY,OACnC,EAAKZ,MAAMsQ,S,EAGVC,KAAO,WACb,EAAKvQ,MAAMuQ,Q,yEA5BH,IACA/d,EAAiBpB,KAAK4O,MAAtBxN,aACR,OACE,yBAAKuN,UAAU,gBACb,4BAAQkK,QAAS7Y,KAAKgf,OAAtB,SAGA,4BAAQnG,QAAS7Y,KAAKif,iBACnB7d,EAAe,OAAS,SAE3B,4BAAQ6V,UAAW7V,EACXyX,QAAS7Y,KAAKmf,MADtB,a,GAXkBpQ,IAAMC,YA4CjB0G,eAXS,SAAC1W,GAAD,MAAmB,CACzCoC,aAAcA,EAAapC,KAGF,SAACqY,GAAD,MAAyB,CAClD2H,MAAO,kBAAM3H,E/CgMwB,CACrCva,KAAMiB,K+ChMNmhB,MAAO,kBAAM7H,E/C0LwB,CACrCva,KAAMgB,K+C1LNqhB,KAAM,kBAAM9H,E/C+KwB,CACpCva,KAAMc,K+C/KN4R,KAAM,kBAAM6H,E/CmLwB,CACpCva,KAAMe,O+CjLO6X,CAGbqJ,IClDIK,I,mNAWIC,iBAAmB,SAAChR,GAC1B,EAAKO,MAAM0Q,WAAWjR,EAAE+H,OAAO3W,Q,yEAV/B,OACE,2BAAOkP,UAAU,aACV7R,KAAK,OACL2C,MAAOO,KAAK4O,MAAMf,KAClBqJ,SAAUlX,KAAKqf,iBACfzG,YAAY,qB,GAPD7J,IAAMC,YAwBf0G,eARS,SAAC1W,GAAD,MAAmB,CACzC6O,KAAMF,GAAY3O,KAGO,SAACqY,GAAD,MAAyB,CAClDiI,WAAY,SAACzR,GAAD,OAAkBwJ,EhDyQC,SAACxJ,GAAD,MAA2B,CAC1D/Q,KAFiC,sBAGjCC,QAAS,CAAE8Q,SgD3Q4BJ,CAAoBI,OAG9C6H,CAGb0J,ICzBIG,I,mNAgBIC,mBAAqB,SAACnR,GAC5BA,EAAEoR,mB,EAGIC,QAAU,WAChB,EAAK9Q,MAAM8Q,W,yEAnBX,OAAO1f,KAAK4O,MAAMlC,MAChB,yBAAKiC,UAAU,qBAAqBkK,QAAS7Y,KAAK0f,SAChD,yBAAK/Q,UAAU,UAAUkK,QAAS7Y,KAAKwf,oBACrC,wBAAI7Q,UAAU,kBAAkB3O,KAAK4O,MAAMlR,OAC3C,yBAAKiR,UAAU,oBAAoB3O,KAAK4O,MAAMjR,SAC9C,4BAAQgR,UAAU,0BACVkK,QAAS7Y,KAAK0f,SADtB,iB,GAPY3Q,IAAMC,YAmCb0G,eAVS,SAAC1W,GAAD,MAAmB,CACzC0N,KAAMF,GAAYxN,GAClBtB,MAAOiP,GAAa3N,GACpBrB,QAASiP,GAAe5N,KAGC,SAACqY,GAAD,MAAyB,CAClDqI,QAAS,kBAAMrI,EjDkL4B,CAC3Cva,KAF6B,uBiD9KhB4Y,CAGb6J,IC7BII,I,mNA4BIC,cAAgB,SAACvR,GACvB,EAAKO,MAAMxM,QAAQiM,EAAE3O,IAAK2O,I,EAGpBwR,YAAc,SAACxR,GACrB,EAAKO,MAAMvM,MAAMgM,EAAE3O,M,yEA/BnB,OACE,yBAAKiP,UAAU,OACb,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,S,0CAQJiF,SAASW,iBAAiB,UAAWvU,KAAK4f,eAC1ChM,SAASW,iBAAiB,QAASvU,KAAK6f,aACxC7f,KAAK4O,MAAMkR,c,6CAIXlM,SAASM,oBAAoB,UAAWlU,KAAK4f,eAC7ChM,SAASM,oBAAoB,QAASlU,KAAK6f,iB,GAzB7B9Q,IAAMC,YA2CT0G,eACb,KAPyB,SAAC2B,GAAD,MAAyB,CAClDjV,QAAS,SAAC1C,EAAagS,GAAd,OAA6C2F,ElD2HjC,SAAC3X,EAAagS,GAAd,MAAsD,CAC3E5U,KAFsB,WAGtBC,QAAS,CAAE2C,MAAKgS,UkD7H+CjE,CAAU/N,EAAKgS,KAC9ErP,MAAO,SAAC3C,GAAD,OAAiB2X,ElDgIL,SAAC3X,GAAD,MAA0B,CAC7C5C,KAFoB,SAGpBC,QAAS,CAAE2C,QkDlIsB+N,CAAQ/N,KACzCogB,UAAW,kBAAMzI,ElD4PwB,CACzCva,KAF2B,qBkDxPd4Y,CAGbiK,I,MC/DFI,IAASC,OACP,kBAAC,IAAD,CAAU7O,MAAOA,IACf,kBAAC,GAAD,OAEFyC,SAASqM,eAAe,W","file":"static/js/main.403a5761.chunk.js","sourcesContent":["import Vector from '../tools/Vector';\nimport { TransitionDetail as TransitionDetailInfo } from './TransitionDetail';\nimport { Mode } from './Mode';\n\n// Many actions are specific to a particular part of the state (e.g. to nodes,\n// or arrows), and I've grouped these for easy access. However, a number of\n// actions are more general; these I've placed at the bottom of the file.\n\nexport interface Action {\n  type: string;\n  payload?: any;\n}\n\n// Node actions:\nexport const MOUSE_DOWN_NODE = 'MOUSE_DOWN_NODE';\nexport const mouseDownNode = (id: string): Action => ({\n  type: MOUSE_DOWN_NODE,\n  payload: { id },\n});\n\nexport const MOUSE_UP_NODE = 'MOUSE_UP_NODE';\nexport const mouseUpNode = (): Action => ({\n  type: MOUSE_UP_NODE,\n});\n\n// We have 2 actions related to adding a node instead of one: the first\n// indicates that the user is in the process of adding a node, but has not yet\n// fixed its placement on the screen; the second indicates that the node should\n// be added at a particular location -- where the user has clicked.\nexport const START_ADDING_NODE = 'START_ADDING_NODE';\nexport const startAddingNode = (): Action => ({\n  type: START_ADDING_NODE,\n});\n\nexport const ADD_NODE = 'ADD_NODE';\nexport const addNode = (pos: Vector): Action => ({\n  type: ADD_NODE,\n  payload: { pos },\n});\n\nexport const CHANGE_MNEMONIC = 'CHANGE_MNEMONIC';\nexport const changeMnemonic = (id: string, value: string): Action => ({\n  type: CHANGE_MNEMONIC,\n  payload: { id, value },\n});\n\nexport const BLUR_MNEMONIC = 'BLUR_MNEMONIC';\nexport const blurMnemonic = (): Action => ({\n  type: BLUR_MNEMONIC,\n});\n\nexport const DELETE_SELECTED_NODES = 'DELETE_SELECTED_NODES';\nexport const deleteSelectedNodes = (): Action => ({\n  type: DELETE_SELECTED_NODES,\n});\n\nexport const MAKE_SELECTED_START_NODE = 'MAKE_SELECTED_START_NODE';\nexport const makeSelectedStartNode = (): Action => ({\n  type: MAKE_SELECTED_START_NODE,\n});\n\nexport const TOGGLE_SELECTED_FINAL_NODES = 'TOGGLE_SELECTED_FINAL_NODES';\nexport const toggleSelectedFinalNodes = (): Action => ({\n  type: TOGGLE_SELECTED_FINAL_NODES,\n});\n\nexport const SELECT_ALL_NODES = 'SELECT_ALL_NODES';\nexport const selectAllNodes = (): Action => ({\n  type: SELECT_ALL_NODES,\n});\n\n// Arrow actions:\n// We include the arrow's ID as part of the payload because when we create a new\n// arrow, we also create a control point and transition detail for it as well\n// (and these require the arrow's ID).\nexport const ADD_ARROW = 'ADD_ARROW';\nexport const addArrow = (start: string, end: string, id: string): Action => ({\n  type: ADD_ARROW,\n  payload: { start, end, id },\n});\n\n// Control point actions:\nexport const MOUSE_DOWN_CONTROL_POINT = 'MOUSE_DOWN_CONTROL_POINT';\nexport const mouseDownControlPoint = (id: string): Action => ({\n  type: MOUSE_DOWN_CONTROL_POINT,\n  payload: { id },\n});\n\nexport const MOUSE_UP_CONTROL_POINT = 'MOUSE_UP_CONTROL_POINT';\nexport const mouseUpControlPoint = (): Action => ({\n  type: MOUSE_UP_CONTROL_POINT,\n});\n\n// Transition-detail actions:\nexport const CHANGE_TRANSITION_DETAIL = 'CHANGE_TRANSITION_DETAIL';\nexport const changeTransitionDetail = (detail: TransitionDetailInfo): Action => ({\n  type: CHANGE_TRANSITION_DETAIL,\n  payload: { detail },\n});\n\nexport const ADD_TRANSITION_DETAIL = 'ADD_TRANSITION_DETAIL';\nexport const addTransitionDetail = (arrow: string): Action => ({\n  type: ADD_TRANSITION_DETAIL,\n  payload: { arrow },\n});\n\nexport const DELETE_TRANSITION_DETAIL = 'DELETE_TRANSITION_DETAIL';\nexport const deleteTransitionDetail = (id: string, arrow: string): Action => ({\n  type: DELETE_TRANSITION_DETAIL,\n  payload: { id, arrow },\n});\n\nexport const FOCUS_TRANSITION_DETAIL = 'FOCUS_TRANSIITON_DETAIL';\nexport const focusTransitionDetail = (id: string): Action => ({\n  type: FOCUS_TRANSITION_DETAIL,\n  payload: { id },\n});\n\nexport const BLUR_TRANSITION_DETAIL = 'BLUR_TRANSITION_DETAIL';\nexport const blurTransitionDetail = (id: string): Action => ({\n  type: BLUR_TRANSITION_DETAIL,\n  payload: { id },\n});\n\nexport const MARK_DUPLICATE_TRANSITIONS = 'MARK_DUPLICATE_TRANSITIONS';\nexport const markDuplicateTransitions = (ids: string[]): Action => ({\n  type: MARK_DUPLICATE_TRANSITIONS,\n  payload: { ids },\n});\n\n// Tape actions:\nexport const CHANGE_TAPE_CELL = 'CHANGE_TAPE_CELL';\nexport const changeTapeCell = (pos: number, value: string): Action => ({\n  type: CHANGE_TAPE_CELL,\n  payload: { pos, value },\n});\n\nexport const CLEAR_TAPE = 'CLEAR_TAPE';\nexport const clearTape = (): Action => ({\n  type: CLEAR_TAPE,\n});\n\nexport const UPDATE_SCROLL_LEFT = 'UPDATE_SCROLL_LEFT';\nexport const updateScrollLeft = (scrollLeft: number): Action => ({\n  type: UPDATE_SCROLL_LEFT,\n  payload: { scrollLeft },\n});\n\nexport const FOCUS_TAPE_CELL = 'FOCUS_TAPE_CELL';\nexport const focusTapeCell = (pos: number): Action => ({\n  type: FOCUS_TAPE_CELL,\n  payload: { pos },\n});\n\nexport const MOVE_TAPE = 'MOVE_TAPE';\nexport const moveTape = (direction: 'L' | 'R'): Action => ({\n  type: MOVE_TAPE,\n  payload: { direction },\n});\n\nexport const WRITE_TAPE_SYMBOL = 'WRITE_TAPE_SYMBOL';\nexport const writeTapeSymbol = (symbol: string): Action => ({\n  type: WRITE_TAPE_SYMBOL,\n  payload: { symbol },\n});\n\n// Canvas and UI actions:\nexport const MOUSE_DOWN_CANVAS = 'MOUSE_DOWN_CANVAS';\nexport const mouseDownCanvas = (pos: Vector): Action => ({\n  type: MOUSE_DOWN_CANVAS,\n  payload: { pos },\n});\n\nexport const MOUSE_UP_CANVAS = 'MOUSE_UP_CANVAS';\nexport const mouseUpCanvas = (): Action => ({\n  type: MOUSE_UP_CANVAS,\n});\n\nexport const MOUSE_MOVE_CANVAS = 'MOUSE_MOVE_CANVAS';\nexport const mouseMoveCanvas = (pos: Vector): Action => ({\n  type: MOUSE_MOVE_CANVAS,\n  payload: { pos },\n});\n\nexport const KEY_DOWN = 'KEY_DOWN';\nexport const keyDown = (key: string, event: React.KeyboardEvent): Action => ({\n  type: KEY_DOWN,\n  payload: { key, event },\n});\n\nexport const KEY_UP = 'KEY_UP';\nexport const keyUp = (key: string): Action => ({\n  type: KEY_UP,\n  payload: { key },\n});\n\n// General actions:\nexport const ADD_TRANSITION_BETWEEN_SELECTED = 'ADD_TRANSITION_BETWEEN_SELECTED';\nexport const addTransitionBetweenSelected = (): Action => ({\n  type: ADD_TRANSITION_BETWEEN_SELECTED,\n});\n\nexport const DELETE_ENTITIES = 'DELETE_ENTITIES';\nexport const deleteEntities = (nodes: string[], arrows: string[], controlPoints: string[], transitionDetails: string[]): Action => ({\n  type: DELETE_ENTITIES,\n  payload: { nodes, arrows, controlPoints, transitionDetails },\n});\n\nexport const UNDO = 'UNDO';\nexport const undo = (): Action => ({\n  type: UNDO,\n});\n\nexport const REDO = 'REDO';\nexport const redo = (): Action => ({\n  type: REDO,\n});\n\nexport const DISPLAY_MESSAGE = 'DISPLAY_MESSAGE';\nexport const displayMessage = (title: string, content?: string | JSX.Element): Action => ({\n  type: DISPLAY_MESSAGE,\n  payload: { title, content },\n});\n\nexport const DISMISS_MESSAGE = 'DISMISS_MESSAGE';\nexport const dismissMessage = (): Action => ({\n  type: DISMISS_MESSAGE,\n});\n\n// Simulation actions:\nexport const STEP_SIM = 'STEP_SIM';\nexport const stepSim = (): Action => ({\n  type: STEP_SIM,\n});\n\nexport const PLAY_SIM = 'PLAY_SIM';\nexport const playSim = (): Action => ({\n  type: PLAY_SIM,\n});\n\nexport const PAUSE_SIM = 'PAUSE_SIM';\nexport const pauseSim = (): Action => ({\n  type: PAUSE_SIM,\n});\n\nexport const RESET_SIM = 'RESET_SIM';\nexport const resetSim = (): Action => ({\n  type: RESET_SIM,\n});\n\nexport const SET_CURRENT_STATE = 'SET_CURRENT_STATE';\nexport const setCurrentState = (id: string): Action => ({\n  type: SET_CURRENT_STATE,\n  payload: { id },\n});\n\nexport const SET_ACTIVE_NODE = 'SET_ACTIVE_NODE';\nexport const setActiveNode = (id: null | string): Action => ({\n  type: SET_ACTIVE_NODE,\n  payload: { id },\n});\n\nexport const SET_ACTIVE_TRANSITION_DETAIL = 'SET_ACTIVE_TRANSITION_DETAIL';\nexport const setActiveTransitionDetail = (id: null | string): Action => ({\n  type: SET_ACTIVE_TRANSITION_DETAIL,\n  payload: { id },\n});\n\nexport const SET_ACTIVE_CONTROL_POINT = 'SET_ACTIVE_CONTROL_POINT';\nexport const setActiveControlPoint = (id: null | string): Action => ({\n  type: SET_ACTIVE_CONTROL_POINT,\n  payload: { id },\n});\n\nexport const SET_ACTIVE_ARROW = 'SET_ACTIVE_ARROW';\nexport const setActiveArrow = (id: null | string): Action => ({\n  type: SET_ACTIVE_ARROW,\n  payload: { id },\n});\n\nexport const HALT_ACCEPT = 'HALT_ACCEPT';\nexport const haltAccept = (): Action => ({\n  type: HALT_ACCEPT,\n});\n\nexport const HALT_REJECT = 'HALT_REJECT';\nexport const haltReject = (): Action => ({\n  type: HALT_REJECT,\n});\n\n// Mode actions:\nexport const SWITCH_MODE = 'SWITCH_MODE';\nexport const switchMode = (mode: Mode): Action => ({\n  type: SWITCH_MODE,\n  payload: { mode },\n});\n\n// Machine metadata actions:\nexport const CHANGE_MACHINE_NAME = 'CHANGE_MACHINE_NAME';\nexport const changeMachineName = (name: string): Action => ({\n  type: CHANGE_MACHINE_NAME,\n  payload: { name },\n});\n\n// New, Save, Load, Download, and Upload actions:\nexport const NEW_MACHINE = 'NEW_MACHINE';\nexport const newMachine = (): Action => ({\n  type: NEW_MACHINE,\n});\n\nexport const SAVE_SNAPSHOT = 'SAVE_SNAPSHOT';\nexport const saveSnapshot = (): Action => ({\n  type: SAVE_SNAPSHOT,\n});\n\nexport const LOAD_SNAPSHOT = 'LOAD_SNAPSHOT';\nexport const loadSnapshot = (): Action => ({\n  type: LOAD_SNAPSHOT,\n});\n\nexport const INSTALL_SNAPSHOT = 'INSTALL_SNAPSHOT';\nexport const installSnapshot = (snapshot: any): Action => ({\n  type: INSTALL_SNAPSHOT,\n  payload: { snapshot },\n});\n\nexport const DOWNLOAD_MACHINE = 'DOWNLOAD_MACHINE';\nexport const downloadMachine = (): Action => ({\n  type: DOWNLOAD_MACHINE,\n});\n\nexport const UPLOAD_MACHINE = 'UPLOAD_MACHINE';\nexport const uploadMachine = (): Action => ({\n  type: UPLOAD_MACHINE,\n});\n","import _ from 'lodash';\nimport { State } from './state';\n\n// This file contains state-management functions and type definitions that are\n// general-purpose enough to be useful in a number of places.\n\n// In many cases, we choose to maintain not one but TWO intances of some part of\n// the state. Here is an example illustrating why: suppose we move a node from\n// one position to another. On the one hand, we need the current node position\n// to be maintained in the state so that we can display it properly. On the\n// other hand, we don't want to replace its previous (pre-move) position,\n// because this information is useful for undo/redo purposes. Our solution is to\n// maintain a \"work-in-progress\" (wip) state for these transient changes, and a\n// \"committed\" state that always contains the last meaningful snapshot of the\n// state.\nexport interface Transient<A> {\n  wip: null | A;\n  committed: A;\n}\n\n// The wip state, if it is non-null, is always more up-to-date than the last\n// commit. If the wip state is nonexistent, we simply fall back on the last\n// commit.\nexport const currentLatest = <A>(state: Transient<A>): A => (\n  state.wip || state.committed\n);\n\n// This interface represents any type that has a string ID (e.g. any of the\n// \"entities\" in our application state).\nexport interface IDAble {\n  id: string;\n}\n\n// A \"snapshot\" is a record of all of the entities in play.\nexport const getSnapshot = (state: State) => _.get(state, 'entities');\n\n// There are several situations in which we wish to revert to a previous\n// snapshot of the state (e.g. undo/redo, upload). Doing so is fairly\n// straightforward, but we must mindful to throw away any \"WIP\" states.\nexport const revertToSnapshot = (state: State, snapshot: any): State => {\n  const toplevelIteratee = (value: any) => (\n    _.mapValues(value, (value, key) => (\n      key === 'wip' ? null : value\n    ))\n  );\n\n  return {\n    ...state,\n    entities: _.mapValues(snapshot, toplevelIteratee),\n  } as State;\n};\n","// Much of the work in rendering the components in this app can be reduced by\n// expressing positions and operations in vector form. This class provides all\n// the functionality we need in this regard in a self-contained package.\n\nclass Vector {\n  constructor(public x: number, public y: number) {}\n\n  static from({ x, y }: SerializableVector): Vector {\n    return new Vector(x, y);\n  }\n\n  // Return the length of this vector.\n  magnitude() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  // Return a unit vector that shares this vector's direction\n  normalize() {\n    const len = this.magnitude();\n    if (len === 0) {\n      throw new Error('Cannot normalize 0 vector');\n    }\n    return new Vector(this.x / len, this.y / len);\n  }\n\n  // Return a vector perpendicular to this vector (with the same length). NOTE:\n  // this effectively rotates the vector 90 deg clockwise.\n  perp() {\n    return new Vector(-this.y, this.x);\n  }\n\n  // Return the sum of this vector and the input.\n  plus(v: Vector) {\n    return new Vector(this.x + v.x, this.y + v.y);\n  }\n\n  // Return the difference between this vector and the input.\n  minus(v: Vector) {\n    return this.plus(v.scale(-1));\n  }\n\n  // Scale this vector by the specified amount.\n  scale(factor: number) {\n    return new Vector(factor * this.x, factor * this.y);\n  }\n\n  // Return this vector's angle.\n  angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  // Project this vector onto the input vector.\n  project(v: Vector) {\n    return v.scale(this.dot(v) / v.dot(v));\n  }\n\n  // Return the dot product of this vector and the input vector.\n  dot(v: Vector) {\n    return this.x * v.x + this.y * v.y;\n  }\n}\n\n// A RawVector contains the same data as a Vector (i.e. an x and y coordinate),\n// but has none of the associated methods. It is suitable for serialization, and\n// for this reason, we use it everywhere we might need a serializable vector.\nexport interface SerializableVector {\n  x: number;\n  y: number;\n}\n\nexport default Vector;\n","// This file contains a number of functions that are useful for performing\n// various tasks, and are general enough not to be included alongside any of\n// their uses.\n\n// If x is a member of the Array, remove it; otherwise, add it.\nexport const mod2Include = <A>(x: A, xs: A[]): A[] => (\n  xs.includes(x) ? xs.filter(y => y !== x) : [...xs, x]\n);\n\n// X xOr Y is true if either X or Y is true, but not both.\nexport const xOr = (x: boolean, y: boolean): boolean => (\n  (x || y) && !(x && y)\n);\n\n// repeat(what, times) constructs an Array containing \"what\" repeated \"times\"\n// times.\nexport const repeat = <A>(what: A, times: number): A[] => {\n  const res = new Array(times);\n  for (let i = 0; i < times; i++) {\n    res[i] = what;\n  }\n  return res;\n};\n","import { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\n\nexport interface ModeState {\n  mode: Mode;\n}\n\nexport type Mode = 'EDIT' | 'SIM';\n\nexport const Modes: { [key: string]: Mode } = {\n  EDIT: 'EDIT',\n  SIM: 'SIM',\n};\n\nexport const initModeState: ModeState = {\n  mode: Modes.EDIT,\n};\n\n// Test if we are currently in edit mode:\nexport const isInEditMode = (state: State): boolean => state.mode.mode === Modes.EDIT;\n\nexport const modeReducer = (state: State, action: Action): ModeState => {\n  switch (action.type) {\n    case A.SWITCH_MODE:\n      return switchMode(state, action.payload.mode);\n    default:\n      return state.mode;\n  }\n};\n\nconst switchMode = (state: State, mode: Mode): ModeState => ({\n  ...state.mode,\n  mode,\n});\n","import _ from 'lodash';\nimport { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport Vector from '../tools/Vector';\nimport { isInEditMode } from './Mode';\n\n// The UI state is fairly self-explanatory: it consists of miscellaneous tidbits\n// of information regarding where the mouse is, what keys are pressed, etc.\n\nexport interface UIState {\n  mousePos: Vector;\n  keysDown: string[];\n  isMouseDownNode: boolean;\n  isMouseDownControlPoint: boolean;\n  isAddingNode: boolean;\n  wasMouseReleasedOverNode: boolean;\n  wasMouseDragged: boolean;\n  wasMnemonicChanged: boolean;\n}\n\nexport const initUIState: UIState = {\n  mousePos: new Vector(0, 0),\n  keysDown: [],\n  isMouseDownNode: false,\n  isMouseDownControlPoint: false,\n  isAddingNode: false,\n  wasMouseReleasedOverNode: false,\n  wasMouseDragged: false,\n  wasMnemonicChanged: false,\n};\n\n// Return the current mouse position.\nexport const mousePos = (state: State): Vector => state.ui.mousePos;\n\n// Test if we are currently in \"multiselect\" mode.\nexport const isMultiselect = (state: State): boolean => state.ui.keysDown.includes('Shift');\n\n// Test if the mouse is currently pressed over a node.\nexport const isMouseDownNode = (state: State): boolean => state.ui.isMouseDownNode;\n\n// Test if the mouse is current pressed over a control point.\nexport const isMouseDownControlPoint = (state: State): boolean => state.ui.isMouseDownControlPoint;\n\n// Test if we are in the process of adding a node.\nexport const isAddingNode = (state: State): boolean => state.ui.isAddingNode;\n\nexport const wasMouseReleasedOverNode = (state: State): boolean => state.ui.wasMouseReleasedOverNode;\n\nexport const wasMouseDragged = (state: State): boolean => state.ui.wasMouseDragged;\n\nexport const wasMnemonicChanged = (state: State): boolean => state.ui.wasMnemonicChanged;\n\nexport const uiReducer = (state: State, action: Action): UIState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.KEY_DOWN:\n        return keyDown(state, action.payload.key);\n      case A.KEY_UP:\n        return keyUp(state, action.payload.key);\n      case A.MOUSE_DOWN_NODE:\n        return mouseDownNode(state);\n      case A.MOUSE_UP_NODE:\n        return mouseUpNode(state);\n      case A.MOUSE_DOWN_CONTROL_POINT:\n        return mouseDownControlPoint(state);\n      case A.MOUSE_UP_CONTROL_POINT:\n        return mouseUpControlPoint(state);\n      case A.MOUSE_DOWN_CANVAS:\n        return mouseDownCanvas(state);\n      case A.MOUSE_UP_CANVAS:\n        return mouseUpCanvas(state);\n      case A.START_ADDING_NODE:\n        return startAddingNode(state);\n      case A.ADD_NODE:\n        return addNode(state);\n      case A.MOUSE_MOVE_CANVAS:\n        return mouseMoveCanvas(state, action.payload.pos);\n      case A.CHANGE_MNEMONIC:\n        return changeMnemonic(state);\n      case A.BLUR_MNEMONIC:\n        return blurMnemonic(state);\n      default:\n        return state.ui;\n    }\n  }\n  else {\n    return state.ui;\n  }\n};\n\nconst keyDown = (state: State, key: string): UIState => ({\n  ...state.ui,\n  keysDown: _.uniq([...state.ui.keysDown, key]),\n});\n\nconst keyUp = (state: State, key: string): UIState => ({\n  ...state.ui,\n  keysDown: state.ui.keysDown.filter(k => k !== key),\n});\n\nconst mouseDownNode = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownNode: true,\n});\n\nconst mouseUpNode = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownNode: false,\n  wasMouseReleasedOverNode: true,\n});\n\nconst mouseDownControlPoint = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownControlPoint: true,\n});\n\nconst mouseUpControlPoint = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownControlPoint: false,\n});\n\nconst mouseDownCanvas = (state: State): UIState => ({\n  ...state.ui,\n  wasMouseDragged: false,\n});\n\nconst mouseUpCanvas = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownNode: false,\n  isMouseDownControlPoint: false,\n  wasMouseReleasedOverNode: false,\n});\n\nconst startAddingNode = (state: State): UIState => ({\n  ...state.ui,\n  isAddingNode: true,\n});\n\nconst addNode = (state: State): UIState => ({\n  ...state.ui,\n  isAddingNode: false,\n  wasMouseReleasedOverNode: true,\n});\n\nconst mouseMoveCanvas = (state: State, pos: Vector): UIState => ({\n  ...state.ui,\n  mousePos: pos,\n  wasMouseDragged: true,\n});\n\nconst changeMnemonic = (state: State): UIState => ({\n  ...state.ui,\n  wasMnemonicChanged: true,\n});\n\nconst blurMnemonic = (state: State): UIState => ({\n  ...state.ui,\n  wasMnemonicChanged: false,\n});\n","import _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { Transient, currentLatest } from './auxiliary';\nimport { State } from './state';\nimport Vector, { SerializableVector } from '../tools/Vector';\nimport { mod2Include } from '../tools/auxiliary';\nimport { isMultiselect, isMouseDownNode, wasMouseReleasedOverNode } from './UI';\nimport { isInEditMode } from './Mode';\n\n// A node represents a machine state in the TM formalism. Each node is\n// draggable, and may come in several different varieties (it may be the start\n// node, or an accepting/final node).\n\nexport interface NodeState extends Transient<NodeInfo> {}\n\n// The \"selected\" and \"offsets\" properties are used to store information about\n// selected nodes immediately before and during a move. The \"startNode\"\n// corresponds to the start state in the TM formalism.\nexport interface NodeInfo {\n  byId: { [key: string]: Node };\n  selected: string[];\n  offsets: { [key: string]: Vector };\n  startNode: null | string;\n}\n\nexport interface Node {\n  id: string;\n  mnemonic: string;\n  pos: SerializableVector;\n  isFinal: boolean;\n}\n\nexport const initNodeState: NodeState = {\n  wip: null,\n  committed: {\n    byId: {},\n    selected: [],\n    offsets: {},\n    startNode: null,\n  },\n};\n\n// Return an array containing all nodes in existence.\nexport const allNodes = (state: State): Node[] => (\n  Object.values(currentLatest(state.entities.nodes).byId)\n);\n\n// Return the node with the given ID, if one exists.\nexport const nodeById = (state: State, id: string): Node => {\n  const node = allNodes(state).find(n => n.id === id);\n  if (!node) {\n    throw new Error(`No Node with ID \"${id}\"`);\n  }\n  return node;\n};\n\n// Check if the given node is currently selected.\nexport const isNodeSelected = (state: State, id: string): boolean => (\n  currentLatest(state.entities.nodes).selected.includes(id)\n);\n\n// Check if the given node is final (\"accepting\").\nexport const isNodeFinal = (state: State, id: string): boolean => (\n  currentLatest(state.entities.nodes).byId[id].isFinal\n);\n\n// Return an array containing the IDs of all selected nodes.\nexport const selectedNodes = (state: State): string[] => (\n  currentLatest(state.entities.nodes).selected\n);\n\n// Test if the given node is the start node.\nexport const isStartNode = (state: State, id: string): boolean => {\n  const { startNode } = currentLatest(state.entities.nodes);\n  return (startNode !== null) && startNode === id;\n};\n\n// Test if a node has been distinguished as the start state.\nexport const hasStartNode = (state: State): boolean => (\n  currentLatest(state.entities.nodes).startNode !== null\n);\n\nexport const startNode = (state: State): string => {\n  const start = currentLatest(state.entities.nodes).startNode;\n  if (start === null) {\n    throw new Error('No start node has been distinguished.');\n  }\n  return start;\n};\n\nexport const nodesReducer = (state: State, action: Action): NodeState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      // These operations affect the non-positional attributes of a node.\n      case A.ADD_NODE:\n        return addNode(state, action.payload.pos);\n      case A.ADD_ARROW:\n        return addArrow(state, action.payload.start, action.payload.end);\n      case A.DELETE_ENTITIES:\n        return deleteEntities(state, action.payload.nodes);\n      case A.MAKE_SELECTED_START_NODE:\n        return makeStartNode(state);\n      case A.TOGGLE_SELECTED_FINAL_NODES:\n        return toggleFinalNodes(state);\n      case A.CHANGE_MNEMONIC:\n        return changeMnemonic(state, action.payload.id, action.payload.value);\n      case A.BLUR_MNEMONIC:\n        return blurMnemonic(state);\n      case A.SELECT_ALL_NODES:\n        return selectAllNodes(state);\n\n      // These operations deal with movement.\n      case A.MOUSE_DOWN_NODE:\n        return mouseDownNode(state, action.payload.id);\n      case A.MOUSE_UP_NODE:\n        return mouseUpNode(state);\n      case A.MOUSE_DOWN_CANVAS:\n        return mouseDownCanvas(state, action.payload.pos);\n      case A.MOUSE_UP_CANVAS:\n        return mouseUpCanvas(state);\n      case A.MOUSE_MOVE_CANVAS:\n        return mouseMoveCanvas(state, action.payload.pos);\n      default:\n        return state.entities.nodes;\n    }\n  }\n  else {\n    return state.entities.nodes;\n  }\n};\n\n// When a new node is added, we revert to the last committed state, and\n// incorporate a fresh, non-final, mnemonic-free node.\nconst addNode = (state: State, pos: Vector): NodeState => {\n  const id = uuid();\n  const node = { id, pos, mnemonic: '', isFinal: false };\n  return {\n    wip: null,\n    committed: _.mergeWith({}, state.entities.nodes.committed, {\n      byId: {\n        [id]: node,\n      },\n    // We unselect all currently selected nodes, and select the new node:\n    }, (_1, _2, key) => key === 'selected' ? [id] : undefined),\n  };\n};\n\n// Whenever an arrow is added between two distinct nodes, we deselect the nodes.\n// This seems to be a nicer experience than keeping the nodes selected.\nconst addArrow = (state: State, start: string, end: string): NodeState => ({\n  wip: null,\n  committed: {\n    ...state.entities.nodes.committed,\n    selected: start !== end\n      ? []\n      : state.entities.nodes.committed.selected,\n  },\n});\n\nconst deleteEntities = (state: State, ids: string[]): NodeState => {\n  const { committed } = state.entities.nodes;\n  return {\n    wip: null,\n    committed: {\n      ...committed,\n      byId: _.omit(committed.byId, ids),\n      selected: [],\n      startNode: committed.startNode && ids.includes(committed.startNode)\n        ? null\n        : committed.startNode,\n    },\n  };\n};\n\nconst makeStartNode = (state: State): NodeState => ({\n  wip: null,\n  committed: _.merge({}, state.entities.nodes.committed, {\n    startNode: state.entities.nodes.committed.selected[0],\n  }),\n});\n\n// Toggling the \"final\" state of a set of nodes works like this: if ANY of the\n// selected nodes is currently a final node, we change all of the nodes to be\n// NON-final. Otherwise, we change all of them to be final. This correctly\n// subsumes the expected behavior for a single node as well.\nconst toggleFinalNodes = (state: State): NodeState => {\n  const selected = selectedNodes(state).map(id => nodeById(state, id));\n  const atLeastOneFinal = selected.some(node => node.isFinal);\n  const updated = selected.reduce((acc, x) => ({\n    ...acc,\n    [x.id]: { ...x, isFinal: !atLeastOneFinal },\n  }), {});\n\n  return {\n    wip: null,\n    committed: _.merge({}, state.entities.nodes.committed, {\n      byId: {\n        ...updated,\n      },\n    }),\n  };\n};\n\nconst changeMnemonic = (state: State, id: string, value: string): NodeState => ({\n  ...state.entities.nodes,\n  wip: _.merge({}, currentLatest(state.entities.nodes), {\n    byId: {\n      [id]: { mnemonic: value }\n    },\n  }),\n});\n\nconst blurMnemonic = (state: State): NodeState => ({\n  wip: null,\n  committed: currentLatest(state.entities.nodes),\n});\n\nconst selectAllNodes = (state: State): NodeState => ({\n  wip: null,\n  committed: {\n    ...state.entities.nodes.committed,\n    selected: Object.keys(state.entities.nodes.committed.byId),\n  },\n});\n\n// When the user presses the mouse over a node, we update the selection as\n// follows: if we are in \"multiselect\" mode, we add the node to the current\n// selection if it is not a member, and remove it if it is; otherwise, if the\n// current selection includes the node, we keep the current selection, and if it\n// doesn't, we throw out the current selection in favor of the clicked node.\n// This may seem complicated, or contrived, but it results in a fairly intuitive\n// behavior.\nconst mouseDownNode = (state: State, id: string): NodeState => {\n  const { nodes } = state.entities;\n  const { selected } = nodes.committed;\n  return {\n    wip: null,\n    committed: {\n      ...nodes.committed,\n      selected: isMultiselect(state)\n        ? mod2Include(id, selected)\n        : selected.includes(id) ? selected : [id],\n    },\n  };\n};\n\n// When the user releases the mouse over a Node, we replace the committed state\n// with the wip state (to account for any movement that may have occurred). We\n// also clear any offsets that may have been computed in preparation for a move.\nconst mouseUpNode = (state: State): NodeState => ({\n  wip: null,\n  committed: {\n    ...currentLatest(state.entities.nodes),\n    offsets: {},\n  },\n});\n\n// If the user has pressed the mouse over a node, this press is also received by\n// the canvas. In this case, we prepare for any movement by computing offsets\n// for each of the selected nodes.\nconst mouseDownCanvas = (state: State, mousePos: Vector): NodeState => {\n  if (!isMouseDownNode(state)) return state.entities.nodes;\n\n  const { nodes } = state.entities;\n  const offsets = nodes.committed.selected.reduce((acc, nodeId) => {\n    const node = nodes.committed.byId[nodeId];\n    return {\n      ...acc,\n      [nodeId]: Vector.from(node.pos).minus(mousePos),\n    };\n  }, {});\n\n  return {\n    ...nodes,\n    wip: {\n      ...nodes.committed,\n      offsets,\n    },\n  };\n};\n\n// When the mouse is released over the canvas, we deselect any selected nodes,\n// and revert to the last committed state. We can be assured that the mouse was\n// NOT released over a node, since we stopped the event from propagating in the\n// node component.\nconst mouseUpCanvas = (state: State): NodeState => (\n  wasMouseReleasedOverNode(state)\n  ? state.entities.nodes\n  : {\n    wip: null,\n    committed: {\n      ...state.entities.nodes.committed,\n      selected: [],\n    },\n  }\n);\n\n// If the mouse is moved while it is down over a node, we update all of the\n// selected nodes in the WIP state using the offsets computed when the mouse was\n// initially pressed down.\nconst mouseMoveCanvas = (state: State, mousePos: Vector): NodeState => {\n  const { nodes } = state.entities;\n\n  if (!isMouseDownNode(state) || !nodes.wip) return nodes;\n\n  // We computed each offset as the difference between the node's position and\n  // the mouse position (i.e. offset = node - mouse). Thus, to compute the new\n  // node position, we add the mouse position and the offset:\n  const moved = Object.keys(nodes.wip.offsets).reduce((acc, id) => {\n    const node = nodes.wip!.byId[id];\n    const updatedPos = mousePos.plus(nodes.wip!.offsets[id]);\n    return {\n      ...acc,\n      [id]: { ...node, pos: updatedPos },\n    };\n  }, {});\n\n  return _.merge({}, nodes, {\n    wip: {\n      byId: {\n        ...moved,\n      },\n    },\n  });\n};\n","import _ from 'lodash';\nimport { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { isInEditMode } from './Mode';\n\n// An arrow represents one or more transitions between two states in the\n// machine. Therefore, we can describe them using the IDs of their start and end\n// nodes (along with their own unique ID). For the most part, arrows are\n// passive: they are drawn entirely according to the positions of their start\n// and end nodes, along with their control point.\n\nexport interface ArrowState {\n  byId: { [key: string]: Arrow };\n}\n\nexport interface Arrow {\n  id: string;\n  start: string;\n  end: string;\n}\n\nexport const initArrowState: ArrowState = {\n  byId: {},\n};\n\n// Return an array containing all arrows in existence.\nexport const allArrows = (state: State): Arrow[] => (\n  Object.values(state.entities.arrows.byId)\n);\n\n// Return the arrow with the given ID.\nexport const arrowById = (state: State, id: string): Arrow => {\n  const arrow = state.entities.arrows.byId[id];\n  if (!arrow) {\n    throw new Error(`No Arrow with ID \"${id}\"`);\n  }\n  return arrow;\n};\n\n// Return an array containing all arrows associated with the given node (i.e.\n// arrows that either start or end at the node).\nexport const arrowsForNode = (state: State, nodeId: string): Arrow[] => (\n  allArrows(state).filter(arrow => arrow.start === nodeId || arrow.end === nodeId)\n);\n\n// If an arrow exists joining the two given nodes, return it; otherwise return\n// null.\nexport const arrowForEndpoints = (state: State, startId: string, endId: string): null | Arrow => {\n  const arrow = allArrows(state).find(a => a.start === startId && a.end === endId);\n  return arrow || null;\n};\n\n// Return an array containing all arrows starting at the given node.\nexport const arrowsForStart = (state: State, nodeId: string): Arrow[] => (\n  allArrows(state).filter(arrow => arrow.start === nodeId)\n);\n\nexport const arrowsReducer = (state: State, action: Action): ArrowState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.ADD_ARROW:\n        return addArrow(state, action.payload.start, action.payload.end, action.payload.id);\n      case A.DELETE_ENTITIES:\n        return deleteEntities(state, action.payload.arrows);\n      default:\n        return state.entities.arrows;\n    }\n  }\n  else {\n    return state.entities.arrows;\n  }\n};\n\nconst addArrow = (state: State, start: string, end: string, id: string): ArrowState => (\n  _.merge({}, state.entities.arrows, {\n    byId: {\n      [id]: { start, end, id },\n    },\n  })\n);\n\nconst deleteEntities = (state: State, ids: string[]): ArrowState => ({\n  ...state.entities.arrows,\n  byId: _.omit(state.entities.arrows.byId, ids)\n});\n","import _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { Transient, currentLatest } from './auxiliary';\nimport { arrowById } from './Arrow';\nimport { nodeById, selectedNodes } from './Node';\nimport { isMouseDownNode, isMouseDownControlPoint } from './UI';\nimport { State } from './state';\nimport Vector, { SerializableVector } from '../tools/Vector';\nimport { xOr } from '../tools/auxiliary';\nimport { isInEditMode } from './Mode';\n\n// A control point is a draggable handle associated with a particular arrow. It\n// is used to control the curve of the arrow in order to create aesthetically\n// pleasing machine layouts. Despite (or more likely, because of) the fact that\n// control points exist purely for display purposes, their management involves\n// quite a bit of computation. This is mainly due to the fact that they are\n// draggable, and also that each time a node is moved, all of the control points\n// associated with the arrows connected to the node are moved as well.\n\nexport interface ControlPointState extends Transient<ControlPointInfo> {}\n\n// A few of these items require explanation: the \"fullOffsets\" and \"halfOffsets\"\n// properties are populated when a *NODE* is moved: it turns out that when a\n// node is moved, it is quite desirable to have any control points associated\n// with arrows connected to the node move as well, and in a particular way.\nexport interface ControlPointInfo {\n  byId: { [key: string]: ControlPoint };\n  selected: null | string;\n  selectedOffset: null | SerializableVector;\n  fullOffsets: { [key: string]: SerializableVector };\n  halfOffsets: { [key: string]: FixedOffset };\n}\n\nexport interface ControlPoint {\n  id: string;\n  arrow: string;\n  pos: SerializableVector;\n}\n\n// Suppose we move a node away from another node, and imagine that both of these\n// nodes are connected with an arrow. How should the control point for that\n// arrow move in order to maintain the arrow's overall \"shape\"? We have chosen\n// to move the control point as if it were \"fixed\" in a sense to the line\n// connecting the two endpoint nodes. This requires keeping track of the\n// position of the non-moving node, the position of the moving node, the\n// distance between the control point and one of the endpoints, and the\n// perpendicular distance between the line connecting the nodes and the control\n// point. The calculations for generating and restoring these offsets is spelled\n// out below.\nexport interface FixedOffset {\n  fixedPos: Vector;\n  movingOffset: Vector;\n  fractionAlong: number;\n  perpLength: number;\n}\n\nexport const initControlPointState: ControlPointState = {\n  wip: null,\n  committed: {\n    byId: {},\n    selected: null,\n    selectedOffset: null,\n    fullOffsets: {},\n    halfOffsets: {},\n  },\n};\n\n// Return an array containing all control points.\nexport const allControlPoints = (state: State): ControlPoint[] => (\n  Object.values(currentLatest(state.entities.controlPoints).byId)\n);\n\n// Return the control point for the given arrow, if one exists.\nexport const controlPointForArrow = (state: State, arrowId: string): ControlPoint => {\n  const cp = allControlPoints(state).find(({ arrow }) => arrow === arrowId);\n  if (!cp) {\n    throw new Error(`No ControlPoint associated with Arrow having ID \"${arrowId}\"`);\n  }\n  return cp;\n};\n\nexport const controlPointsReducer = (state: State, action: Action): ControlPointState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.ADD_ARROW:\n        return addArrow(state, action.payload.start, action.payload.end, action.payload.id);\n      case A.DELETE_ENTITIES:\n        return deleteEntities(state, action.payload.controlPoints);\n      case A.MOUSE_DOWN_CONTROL_POINT:\n        return mouseDownControlPoint(state, action.payload.id);\n      case A.MOUSE_UP_CONTROL_POINT:\n        return mouseUpControlPoint(state);\n      case A.MOUSE_DOWN_CANVAS:\n        return mouseDownCanvas(state, action.payload.pos);\n      case A.MOUSE_MOVE_CANVAS:\n        return mouseMoveCanvas(state, action.payload.pos);\n      case A.MOUSE_UP_CANVAS:\n      case A.MOUSE_UP_NODE:\n        return mouseUpNodeOrCanvas(state);\n      default:\n        return state.entities.controlPoints;\n    }\n  }\n  else {\n    return state.entities.controlPoints;\n  }\n};\n\n// Whenever we add a new arrow, we also add a new control point for it. The\n// position of the control point is determined by the position of the arrow's\n// start and end nodes, and whether the transition is a self-loop or not.\nconst addArrow = (state: State, start: string, end: string, arrow: string): ControlPointState => {\n  const id = uuid();\n  const startPos = Vector.from(nodeById(state, start).pos);\n  const endPos = start === end ? startPos : Vector.from(nodeById(state, end).pos);\n\n  const constructStandardPos = (start: Vector, end: Vector): Vector => {\n    const diff = end.minus(start);\n    // We offset the control point ever so slightly from the line joining the\n    // endpoints; this forces the transition details into a better position. In\n    // the event that both endpoints are on top of each other (this is\n    // incredibly rare if not impossible), we add the control point a certain\n    // vertical distance away.\n    const perp = diff.magnitude() !== 0\n      ? diff.perp().normalize().scale(1)\n      : new Vector(0, -1);\n    return diff.scale(1 / 2).plus(perp).plus(start);\n  };\n\n  const controlPos = start === end\n  ? startPos.minus(new Vector(0, 90))\n  : constructStandardPos(startPos, endPos);\n\n  return {\n    wip: null,\n    committed: _.merge({}, state.entities.controlPoints.committed, {\n      byId: {\n        [id]: { id, arrow, pos: controlPos },\n      }\n    }),\n  };\n};\n\nconst deleteEntities = (state: State, ids: string[]): ControlPointState => ({\n  wip: null,\n  committed: {\n    ...state.entities.controlPoints.committed,\n    byId: _.omit(state.entities.controlPoints.committed.byId, ids),\n  },\n});\n\n// When the user presses the mouse over a control point, we revert to the last\n// committed state and record the control point as the current selection. We do\n// NOT calculate an offset here, since we need the cursor's position relative to\n// the containing (SVG) element in order to do so.\nconst mouseDownControlPoint = (state: State, id: string): ControlPointState => ({\n  ...state.entities.controlPoints,\n  wip: null,\n  committed: {\n    ...state.entities.controlPoints.committed,\n    selected: id,\n  },\n});\n\n// When the mouse is released over a control point, we COMMIT the wip state, and\n// remove any selection and offset that might have been created before a move.\nconst mouseUpControlPoint = (state: State): ControlPointState => ({\n  wip: null,\n  committed: {\n    ...currentLatest(state.entities.controlPoints),\n    selected: null,\n    selectedOffset: null,\n  },\n});\n\n// Here's where things start to get a little tricky: if a mouse press has been\n// received by the canvas, we check if the cursor is currently down over a\n// control point or a node. If it is down over a control point, we compute the\n// current offset in preparation for a move; if it is down over a node, we\n// compute the required offsetS in preparation for the node being moved.\nconst mouseDownCanvas = (state: State, mousePos: Vector): ControlPointState => {\n  if (isMouseDownControlPoint(state)) return prepForDirectMove(state, mousePos);\n  else if (isMouseDownNode(state)) return prepForIndirectMove(state, mousePos);\n  else return state.entities.controlPoints;\n};\n\n// In order to prepare for a control point to be moved, we compute its offset\n// from the cursor position. We also copy the current committed state into the\n// WIP state at this point, since we update the WIP state throughout the move.\nconst prepForDirectMove = (state: State, mousePos: Vector): ControlPointState => {\n  const controlPoints = state.entities.controlPoints.committed;\n  if (!controlPoints.selected) {\n    return state.entities.controlPoints;\n  }\n  const controlPoint = controlPoints.byId[controlPoints.selected];\n  const selectedOffset = Vector.from(controlPoint.pos).minus(mousePos);\n  return {\n    ...state.entities.controlPoints,\n    wip: _.merge({}, controlPoints, {\n      selectedOffset,\n    }),\n  };\n};\n\n// Before a node is moved, we compute some information about any control points\n// that are associated with any arrows connected to the node. This information\n// includes offsets of 2 varieties: \"full\" and \"half\". A full offset is simply a\n// difference between the current mouse position and a control point. We compute\n// a full offset whenever all nodes associated with a control point are\n// selected, since the control point will simply get translated along with the\n// cursor in this case. Computing a half offset is more involved. In this case,\n// we calculate the position of the control point relative to the node that is\n// moving.\nconst prepForIndirectMove = (state: State, mousePos: Vector): ControlPointState => {\n  const controlPoints = state.entities.controlPoints.committed;\n  const selected = selectedNodes(state);\n\n  // A control point is fully affected if both of the nodes associated with its\n  // arrow are selected.\n  const fullyAffected = Object.values(controlPoints.byId).filter(controlPoint => {\n    const arrow = arrowById(state, controlPoint.arrow);\n    return selected.includes(arrow.start) && selected.includes(arrow.end);\n  });\n\n  const fullOffsets = fullyAffected.reduce((acc, cp) => ({\n    ...acc,\n    [cp.id]: new Vector(cp.pos.x - mousePos.x, cp.pos.y - mousePos.y),\n  }), {});\n\n  // A control point is half affected if exactly one of the nodes associated\n  // with its arrow is selected.\n  const halfOffsets = Object.values(controlPoints.byId).reduce((acc, p) => {\n    const arrow = arrowById(state, p.arrow);\n    const includesStart = selected.includes(arrow.start);\n    const includesEnd = selected.includes(arrow.end);\n    if (!xOr(includesStart, includesEnd)) {\n      return acc;\n    }\n\n    const fixedPos = Vector.from(nodeById(state, includesEnd ? arrow.start : arrow.end).pos);\n    const movingPos = Vector.from(nodeById(state, includesStart ? arrow.start : arrow.end).pos);\n    const movingOffset = movingPos.minus(mousePos);\n    const diff = fixedPos.minus(movingPos);\n    const toCP = Vector.from(p.pos).minus(movingPos);\n    const cpShadow = toCP.project(diff);\n    const fractionAlong = cpShadow.magnitude() / diff.magnitude();\n    const perp = toCP.minus(cpShadow);\n    const perpSign = perp.dot(cpShadow.perp()) > 0 ? 1 : -1;\n    const perpLength = perpSign * perp.magnitude();\n\n    return {\n      ...acc,\n      [p.id]: { fixedPos, movingOffset, fractionAlong, perpLength },\n    };\n  }, {});\n\n  // Just as in a direct move, we move the committed state into the WIP state in\n  // preparation for movement.\n  return {\n    ...state.entities.controlPoints,\n    wip: {\n      ...controlPoints,\n      fullOffsets,\n      halfOffsets,\n    },\n  };\n};\n\n// Just as we needed to handle two cases when the mouse is pressed over the\n// canvas, so too must we manage two cases when the mouse is moved. In this\n// case, we distinguish between a \"direct\" move -- when the user is moving the\n// control point by dragging it, and an \"indirect\" move -- when the control\n// point is moved as a result of a node moving.\nconst mouseMoveCanvas = (state: State, mousePos: Vector): ControlPointState => {\n  if (isMouseDownControlPoint(state)) return moveDirect(state, mousePos);\n  else if (isMouseDownNode(state)) return moveIndirect(state, mousePos);\n  else return state.entities.controlPoints;\n};\n\n// To perform a direct move, we simply add the computed offset to the current\n// cursor position, and use this as the new position for the selected control\n// point. This is only slightly complicated by the need to check that the\n// \"selected\" and \"offset\" properties must be non-null.\nconst moveDirect = (state: State, mousePos: Vector): ControlPointState => {\n  const { controlPoints } = state.entities;\n\n  if (!controlPoints.wip || !controlPoints.wip.selected || !controlPoints.wip.selectedOffset) {\n    return controlPoints;\n  }\n\n  const controlPoint = controlPoints.wip.byId[controlPoints.wip.selected];\n  const updatedPos = mousePos.plus(Vector.from(controlPoints.wip.selectedOffset));\n\n  return {\n    ...controlPoints,\n    wip: _.merge({}, controlPoints.wip, {\n      byId: {\n        [controlPoint.id]: { ...controlPoint, pos: updatedPos },\n      },\n    }),\n  };\n};\n\n// To perform an indirect move, we essentially reverse the process of computing\n// the full and half offsets in order to update the positions of the affected\n// control points in the WIP state.\nconst moveIndirect = (state: State, mousePos: Vector): ControlPointState => {\n  const { controlPoints } = state.entities;\n\n  if (!controlPoints.wip) {\n    return controlPoints;\n  }\n\n  const fullMoved = Object.keys(controlPoints.wip.fullOffsets).reduce((acc, id) => {\n    const controlPoint = controlPoints.wip!.byId[id];\n    const updatedPos = mousePos.plus(Vector.from(controlPoints.wip!.fullOffsets[id]));\n    return {\n      ...acc,\n      [id]: { ...controlPoint, pos: updatedPos },\n    };\n  }, {});\n\n  const halfMoved = Object.keys(controlPoints.wip.halfOffsets).reduce((acc, id) => {\n    const controlPoint = controlPoints.wip!.byId[id];\n    const { fixedPos, movingOffset, fractionAlong, perpLength } = controlPoints.wip!.halfOffsets[id];\n    const newPos = mousePos.plus(movingOffset);\n    const diff = fixedPos.minus(newPos);\n    const alongDiff = diff.scale(fractionAlong).plus(newPos);\n    // If the start and end points are the same, we simply place the control\n    // point a certain vertical distance away from them.\n    const updatedPos = diff.magnitude() !== 0\n      ? diff.perp().normalize().scale(perpLength).plus(alongDiff)\n      : new Vector(0, -80).plus(alongDiff);\n\n    return {\n      ...acc,\n      [id]: { ...controlPoint, pos: updatedPos },\n    };\n  }, {});\n\n  return {\n    ...controlPoints,\n    wip: _.merge({}, controlPoints.wip, {\n      byId: {\n        ...fullMoved,\n        ...halfMoved,\n      },\n    }),\n  };\n};\n\n// When the mouse is released, we commit the wip state and remove all offsets\n// that might have been created before a move.\nconst mouseUpNodeOrCanvas = (state: State): ControlPointState => ({\n  ...state.entities.controlPoints,\n  wip: null,\n  committed: {\n    ...currentLatest(state.entities.controlPoints),\n    selected: null,\n    selectedOffset: null,\n    fullOffsets: {},\n    halfOffsets: {},\n  },\n});\n","import _ from 'lodash';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { State } from './state';\nimport { repeat } from '../tools/auxiliary';\n\nexport interface TapeState {\n  entries: string[];\n  scrollLeft: number;\n  active: number;\n  focused: number | null;\n}\n\nexport const CELL_WIDTH = 36;\nexport const VISIBLE_CELL_COUNT = 20;\n\nexport const initTapeState: TapeState = {\n  entries: repeat('', VISIBLE_CELL_COUNT),\n  scrollLeft: 0,\n  active: 0,\n  focused: null,\n};\n\nexport type TapeDirection = 'L' | 'R';\nexport const TapeDirections: { [key: string]: TapeDirection } = {\n  L: 'L',\n  R: 'R',\n};\n\n// Return an array containing all of the tape entries, along with entries\n// containing empty values for nonexistent intermediate entries.\nexport const tapeEntries = (state: State): string[] => state.entities.tape.entries;\n\nexport const activeTapeCell = (state: State): number => state.entities.tape.active;\n\nexport const focusedTapeCell = (state: State): null | number => state.entities.tape.focused;\n\nexport const currentReadSymbol = (state: State): string => {\n  const { tape } = state.entities;\n  return tape.entries[tape.active];\n};\n\nexport const tapeReducer = (state: State, action: Action): TapeState => {\n  switch (action.type) {\n    case A.CHANGE_TAPE_CELL:\n      return changeTapeCell(state, action.payload.pos, action.payload.value);\n    case A.UPDATE_SCROLL_LEFT:\n      return updateScrollLeft(state, action.payload.scrollLeft);\n    case A.FOCUS_TAPE_CELL:\n      return focusTapeCell(state, action.payload.pos);\n    case A.CLEAR_TAPE:\n      return clearTape(state);\n    case A.MOVE_TAPE:\n      return moveTape(state, action.payload.direction);\n    case A.WRITE_TAPE_SYMBOL:\n      return writeTapeSymbol(state, action.payload.symbol);\n    default:\n      return state.entities.tape;\n  }\n};\n\nconst changeTapeCell = (state: State, pos: number, value: string): TapeState => ({\n  ...state.entities.tape,\n  entries: _.update(_.clone(state.entities.tape.entries), pos, _ => value),\n  focused: value.length > 0 && state.entities.tape.focused !== null\n    ? state.entities.tape.focused + 1\n    : state.entities.tape.focused,\n});\n\nconst focusTapeCell = (state: State, pos: number): TapeState => ({\n  ...state.entities.tape,\n  focused: pos,\n});\n\nconst clearTape = (state: State): TapeState => initTapeState;\n\nconst updateScrollLeft = (state: State, scrollLeft: number): TapeState => ({\n  ...state.entities.tape,\n  entries: updateBlocks(state.entities.tape.entries, scrollLeft),\n  scrollLeft,\n});\n\nconst updateBlocks = (entries: string[], leftPos: number): string[] => {\n  const BLOCK_SIZE = 20;\n  const cellDiff = entries.length - Math.floor(leftPos / CELL_WIDTH);\n  // If there is less than a block between the current scroll position and the\n  // end of the tape, we add a new empty block.\n  if (cellDiff < BLOCK_SIZE) {\n    return [...entries, ...repeat('', BLOCK_SIZE)];\n  }\n  // If there is an EMPTY block at the end of the tape, and there are at least 2\n  // blocks between the current scroll position and the end, we remove the empty\n  // block.\n  else if (cellDiff > 2 * BLOCK_SIZE && entries.slice(-BLOCK_SIZE).every(val => val.length === 0)) {\n    return entries.slice(0, -BLOCK_SIZE);\n  }\n  return entries;\n};\n\nconst moveTape = (state: State, direction: 'L' | 'R'): TapeState => ({\n  ...state.entities.tape,\n  active: state.entities.tape.active + (direction === 'L' ? +1 : -1),\n});\n\nconst writeTapeSymbol = (state: State, symbol: string): TapeState => {\n  const { tape } = state.entities;\n  return {\n    ...tape,\n    entries: _.set(_.clone(tape.entries), tape.active, symbol),\n  };\n};\n","import _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { isInEditMode } from './Mode';\nimport { arrowById } from './Arrow';\nimport { TapeDirection, TapeDirections } from './Tape';\n\n// A transition detail provides the information that is missing in an arrow: an\n// arrow indicates the start and end states for a number of transitions; a\n// transition detail supplies the read symbol, write symbol, and tape direction\n// for a particular transition. Thus, a transition consists of an arrow along\n// with a transition detail.\n\nexport interface TransitionDetailState {\n  byId: { [key: string]: TransitionDetail };\n  focused: null | string;\n}\n\nexport interface TransitionDetail {\n  id: string;\n  arrow: string;\n  read: string;\n  write: string;\n  move: TapeDirection;\n  isDuplicate: boolean;\n}\n\nexport const initTransitionDetailState: TransitionDetailState = {\n  byId: {},\n  focused: null,\n};\n\n// Return an array containing all transition details.\nexport const allTransitionDetails = (state: State): TransitionDetail[] => (\n  Object.values(state.entities.transitionDetails.byId)\n);\n\n// Return an object associating each Arrow ID with a list of its\n// TransitionDetails.\nexport const allGroupedTransitionDetails = (state: State): { [key: string]: TransitionDetail[] } => (\n  _.groupBy(allTransitionDetails(state), detail => detail.arrow)\n);\n\n// Return an array of transition details associated with the given arrow.\nexport const transitionDetailsForArrow = (state: State, arrow: string): TransitionDetail[] => (\n  allGroupedTransitionDetails(state)[arrow]\n);\n\nexport const transitionDetailsByStart = (state: State): { [key: string]: TransitionDetail[] } => (\n  _.groupBy(allTransitionDetails(state), detail => arrowById(state, detail.arrow).start)\n);\n\n// Return an array of IDs of transition details that share \"read\" symbols with\n// at least one other detail.\nexport const duplicateTransitionDetails = (state: State): string[] => {\n  const byStart = Object.values(transitionDetailsByStart(state));\n  const byReadSym = byStart.map(ds => Object.values(_.groupBy(ds, detail => detail.read)));\n  const duplicates = byReadSym.map(ds => ds.filter(group => group.length > 1)); \n  const flattened = _.flattenDeep(duplicates) as TransitionDetail[];\n  return flattened.map(detail => detail.id);\n};\n\n// Return the currently focused transition detail\nexport const focusedDetail = (state: State): null | string => state.entities.transitionDetails.focused;\n\nexport const transitionDetailsReducer = (state: State, action: Action): TransitionDetailState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.ADD_TRANSITION_DETAIL:\n        return addTransitionDetail(state, action.payload.arrow);\n      case A.ADD_ARROW:\n        return addArrow(state, action.payload.id);\n      case A.CHANGE_TRANSITION_DETAIL:\n        return changeTransitionDetail(state, action.payload.detail);\n      case A.DELETE_TRANSITION_DETAIL:\n        return deleteTransitionDetail(state, action.payload.id);\n      case A.DELETE_ENTITIES:\n        return deleteEntities(state, action.payload.transitionDetails);\n      case A.FOCUS_TRANSITION_DETAIL:\n        return focusTransitionDetail(state, action.payload.id);\n      case A.BLUR_TRANSITION_DETAIL:\n        return blurTransitionDetail(state);\n      case A.MARK_DUPLICATE_TRANSITIONS:\n        return markDuplicateTransitions(state, action.payload.ids);\n      default:\n        return state.entities.transitionDetails;\n    }\n  }\n  else {\n    return state.entities.transitionDetails;\n  }\n};\n\nconst addTransitionDetail = (state: State, arrow: string): TransitionDetailState => {\n  const id = uuid();\n  const detail = { id, arrow, read: '', write: '', move: TapeDirections.L, isFocused: false };\n  return _.merge({}, state.entities.transitionDetails, {\n    byId: {\n      [id]: detail,\n    },\n    focused: id,\n  });\n};\n\n// Whenever we add a new arrow, we also add a fresh transition detail.\nconst addArrow = (state: State, arrow: string): TransitionDetailState => (\n  addTransitionDetail(state, arrow)\n);\n\nconst changeTransitionDetail = (state: State, detail: TransitionDetail): TransitionDetailState => (\n  _.merge({}, state.entities.transitionDetails, {\n    byId: {\n      [detail.id]: detail,\n    },\n  })\n);\n\nconst deleteTransitionDetail = (state: State, id: string): TransitionDetailState => {\n  const { transitionDetails } = state.entities;\n  return {\n    ...transitionDetails,\n    byId: _.omit(transitionDetails.byId, id),\n  };\n};\n\nconst deleteEntities = (state: State, ids: string[]): TransitionDetailState => ({\n  ...state.entities.transitionDetails,\n  byId: _.omit(state.entities.transitionDetails.byId, ids),\n});\n\nconst focusTransitionDetail = (state: State, id: string): TransitionDetailState => ({\n  ...state.entities.transitionDetails,\n  focused: id,\n});\n\nconst blurTransitionDetail = (state: State): TransitionDetailState => ({\n  ...state.entities.transitionDetails,\n  focused: null,\n});\n\nconst markDuplicateTransitions = (state: State, ids: string[]): TransitionDetailState => ({\n  ...state.entities.transitionDetails,\n  byId: _.mapValues(state.entities.transitionDetails.byId, detail => ({\n    ...detail,\n    isDuplicate: ids.includes(detail.id),\n  })),\n});\n","import { Action } from './actions';\nimport * as A from './actions';\nimport { State } from './state';\nimport { isInEditMode } from './Mode';\nimport { wasMouseDragged, wasMnemonicChanged } from './UI';\nimport { getSnapshot, revertToSnapshot } from './auxiliary';\n\nexport interface UndoRedoState {\n  actions: ActionRecord[];\n  redoable: ActionRecord[];\n}\n\nexport interface ActionRecord {\n  value: any;\n  description?: string;\n}\n\nexport const initUndoRedoState: UndoRedoState = {\n  actions: [],\n  redoable: [],\n};\n\nexport const undoRedoReducer = (state: State, action: Action): UndoRedoState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.MOUSE_UP_NODE:\n        return mouseUpNode(state);\n      case A.MOUSE_UP_CONTROL_POINT:\n        return mouseUpControlPoint(state);\n      case A.ADD_NODE:\n        return addRecord(state, 'add node');\n      case A.BLUR_MNEMONIC:\n        return blurMnemonic(state);\n      case A.MAKE_SELECTED_START_NODE:\n        return addRecord(state, 'change initial state');\n      case A.TOGGLE_SELECTED_FINAL_NODES:\n        return addRecord(state, 'toggle \"final\" status for selected states');\n      case A.ADD_ARROW:\n        return addRecord(state, 'add new transition');\n      case A.ADD_TRANSITION_DETAIL:\n        return addRecord(state, 'add new transition');\n      case A.DELETE_ENTITIES:\n        return addRecord(state, 'delete entities');\n      case A.CHANGE_TRANSITION_DETAIL:\n        return addRecord(state, 'change transition');\n      case A.CHANGE_TAPE_CELL:\n        return addRecord(state, 'change tape cell');\n      case A.CLEAR_TAPE:\n        return addRecord(state, 'clear tape');\n      default:\n        return state.undoRedo;\n    }\n  }\n  else {\n    return state.undoRedo;\n  }\n};\n\n// We need to be a little careful before adding an action record when the mouse\n// is released over a node (or control point), since the user may not have\n// actually MOVED the node at all, but instead simply selected it. Thus, we\n// first check if the mouse was dragged before adding the record.\nconst mouseUpNode = (state: State): UndoRedoState => {\n  if (wasMouseDragged(state)) return addRecord(state, 'move node');\n  else return state.undoRedo;\n};\n\nconst mouseUpControlPoint = (state: State): UndoRedoState => {\n  if (wasMouseDragged(state)) return addRecord(state, 'move control point');\n  else return state.undoRedo;\n};\n\nconst blurMnemonic = (state: State): UndoRedoState => {\n  if (wasMnemonicChanged(state)) return addRecord(state, 'change mnemonic');\n  else return state.undoRedo;\n};\n\nexport const undo = (state: State): State => {\n  if (state.undoRedo.actions.length === 0) return state;\n  const [record, ...rest] = state.undoRedo.actions;\n  // Save current value for redo:\n  const redoValue = getSnapshot(state);\n  const redoRecord = { ...record, value: redoValue };\n  const updated = revertToSnapshot(state, record.value);\n  return {\n    ...updated,\n    undoRedo: {\n      ...state.undoRedo,\n      actions: rest,\n      redoable: [redoRecord, ...state.undoRedo.redoable],\n    },\n  };\n};\n\nexport const redo = (state: State): State => {\n  if (state.undoRedo.redoable.length === 0) return state;\n  const [record, ...rest] = state.undoRedo.redoable;\n  // Save current value for undo:\n  const undoValue = getSnapshot(state);\n  const undoRecord = { ...record, value: undoValue };\n  const updated = revertToSnapshot(state, record.value);\n  return {\n    ...updated,\n    undoRedo: {\n      ...state.undoRedo,\n      actions: [undoRecord, ...state.undoRedo.actions],\n      redoable: rest,\n    },\n  };\n};\n\nconst MAX_UNDOS = 32;\n\nexport const addRecord = (state: State, description?: string): UndoRedoState => {\n  const record = { description, value: getSnapshot(state) };\n  return {\n    // In order to prevent excessive memory usage, we limit the number of undos.\n    // Each time a record is added, we make sure that the array of actions\n    // contains only the N most recent records, and then add the new one.\n    actions: [record, ...state.undoRedo.actions.slice(0, MAX_UNDOS)],\n    // Each time we add a record to the undo stack, we clear the redo stack.\n    redoable: [],\n  };\n};\n","import { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\n\nexport interface MessageState {\n  show: boolean;\n  title: null | string;\n  content: null | string | JSX.Element;\n}\n\nexport const initMessageState: MessageState = {\n  show: false,\n  title: null,\n  content: null,\n};\n\nexport const showMessage = (state: State): boolean => state.message.show;\n\nexport const messageTitle = (state: State): null | string => state.message.title;\n\nexport const messageContent = (state: State): null | string | JSX.Element => state.message.content;\n\nexport const messageReducer = (state: State, action: Action): MessageState => {\n  switch (action.type) {\n    case A.DISPLAY_MESSAGE:\n      return displayMessage(state, action.payload.title, action.payload.content);\n    case A.DISMISS_MESSAGE:\n      return dismissMessage(state);\n    default:\n      return state.message;\n  }\n};\n\nconst displayMessage = (state: State, title: string, content?: string | JSX.Element): MessageState => ({\n  ...state.message,\n  show: true,\n  title,\n  content: content !== undefined ? content : null,\n});\n\nconst dismissMessage = (state: State): MessageState => ({\n  ...state.message,\n  show: false,\n  title: null,\n  content: null,\n});\n","import { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { startNode } from './Node';\n\nexport interface SimState {\n  currentState: null | string;\n  activeNode: null | string;\n  activeArrow: null | string;\n  activeTransitionDetail: null | string;\n  activeControlPoint: null | string;\n}\n\nexport const initSimState: SimState = {\n  currentState: null,\n  activeNode: null,\n  activeArrow: null,\n  activeTransitionDetail: null,\n  activeControlPoint: null,\n};\n\n// Return the current simulation state.\nexport const currentState = (state: State): string => (\n state.sim.currentState || startNode(state)\n);\n\nexport const isNodeActive = (state: State, id: string): boolean => (\n  state.sim.activeNode === id\n);\n\nexport const isArrowActive = (state: State, id: string): boolean => (\n  state.sim.activeArrow === id\n);\n\nexport const isControlPointActive = (state: State, id: string): boolean => (\n  state.sim.activeControlPoint === id\n);\n\nexport const activeTransitionDetail = (state: State): null | string => (\n  state.sim.activeTransitionDetail\n);\n\nexport const simReducer = (state: State, action: Action): SimState => {\n  switch (action.type) {\n    case A.SET_CURRENT_STATE:\n      return setCurrentState(state, action.payload.id);\n    case A.SET_ACTIVE_NODE:\n      return setActiveNode(state, action.payload.id);\n    case A.SET_ACTIVE_TRANSITION_DETAIL:\n      return setActiveTransitionDetail(state, action.payload.id);\n    case A.SET_ACTIVE_ARROW:\n      return setActiveArrow(state, action.payload.id);\n    case A.SET_ACTIVE_CONTROL_POINT:\n      return setActiveControlPoint(state, action.payload.id);\n    case A.RESET_SIM:\n      return resetSim(state);\n    default:\n      return state.sim;\n  }\n};\n\nconst setCurrentState = (state: State, id: string): SimState => ({\n  ...state.sim,\n  currentState: id,\n});\n\nconst setActiveNode = (state: State, id: null | string): SimState => ({\n  ...state.sim,\n  activeNode: id,\n});\n\nconst setActiveTransitionDetail = (state: State, id: null | string): SimState => ({\n  ...state.sim,\n  activeTransitionDetail: id,\n});\n\nconst setActiveArrow = (state: State, id: null | string): SimState => ({\n  ...state.sim,\n  activeArrow: id,\n});\n\nconst setActiveControlPoint = (state: State, id: null | string): SimState => ({\n  ...state.sim,\n  activeControlPoint: id,\n});\n\nconst resetSim = (state: State): SimState => ({\n  ...state.sim,\n  currentState: null,\n  activeNode: null,\n  activeArrow: null,\n  activeTransitionDetail: null,\n  activeControlPoint: null,\n});\n","import { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\n\nexport interface MetaDataState {\n  name: string;\n}\n\nexport const initMetaDataState: MetaDataState = {\n  name: 'Untitled',\n};\n\nexport const machineName = (state: State): string => state.entities.metaData.name;\n\nexport const metaDataReducer = (state: State, action: Action): MetaDataState => {\n  switch (action.type) {\n    case A.CHANGE_MACHINE_NAME:\n      return changeMachineName(state, action.payload.name);\n    default:\n       return state.entities.metaData;\n  }\n};\n\nconst changeMachineName = (state: State, name: string): MetaDataState => ({\n  ...state.entities.metaData,\n  name,\n});\n","import { NodeState, initNodeState } from './Node';\nimport { ArrowState, initArrowState } from './Arrow';\nimport { ControlPointState, initControlPointState } from './ControlPoint';\nimport { TransitionDetailState, initTransitionDetailState } from './TransitionDetail';\nimport { TapeState, initTapeState } from './Tape';\nimport { UIState, initUIState } from './UI';\nimport { UndoRedoState, initUndoRedoState } from './UndoRedo';\nimport { MessageState, initMessageState } from './Message';\nimport { ModeState, initModeState } from './Mode';\nimport { SimState, initSimState } from './Sim';\nimport { MetaDataState, initMetaDataState } from './MetaData';\n\n// The application state consists of a number of \"entities\" (objects -- in the\n// general sense -- that are displayed and interacted with), along with some UI\n// info. The UI info is generally useful for a number of the entities.\n\nexport interface State {\n  entities: {\n    nodes: NodeState;\n    arrows: ArrowState;\n    controlPoints: ControlPointState;\n    transitionDetails: TransitionDetailState;\n    tape: TapeState;\n    metaData: MetaDataState;\n  }\n  ui: UIState;\n  undoRedo: UndoRedoState;\n  message: MessageState;\n  mode: ModeState;\n  sim: SimState;\n}\n\nexport const initState: State = {\n  entities: {\n    nodes: initNodeState,\n    arrows: initArrowState,\n    controlPoints: initControlPointState,\n    transitionDetails: initTransitionDetailState,\n    tape: initTapeState,\n    metaData: initMetaDataState,\n  },\n  ui: initUIState,\n  undoRedo: initUndoRedoState,\n  message: initMessageState,\n  mode: initModeState,\n  sim: initSimState,\n};\n","import { Action } from './actions'\nimport * as A from './actions';\nimport { State, initState } from './state';\nimport { nodesReducer } from './Node';\nimport { arrowsReducer } from './Arrow';\nimport { controlPointsReducer } from './ControlPoint';\nimport { transitionDetailsReducer } from './TransitionDetail';\nimport { tapeReducer } from './Tape';\nimport { uiReducer } from './UI';\nimport { undoRedoReducer, undo, redo, addRecord } from './UndoRedo';\nimport { messageReducer } from './Message';\nimport { modeReducer } from './Mode';\nimport { simReducer } from './Sim';\nimport { metaDataReducer } from './MetaData';\nimport { getSnapshot, revertToSnapshot } from './auxiliary';\n\nconst reducer = (state: State=initState, action: Action): State => {\n  switch (action.type) {\n    case A.UNDO:\n      return undo(state);\n    case A.REDO:\n      return redo(state);\n    case A.INSTALL_SNAPSHOT:\n      return installSnapshot(state, action.payload.snapshot);\n    case A.NEW_MACHINE:\n      return newMachine(state);\n    default:\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          nodes: nodesReducer(state, action),\n          arrows: arrowsReducer(state, action),\n          controlPoints: controlPointsReducer(state, action),\n          transitionDetails: transitionDetailsReducer(state, action),\n          tape: tapeReducer(state, action),\n          metaData: metaDataReducer(state, action),\n        },\n        ui: uiReducer(state, action),\n        undoRedo: undoRedoReducer(state, action),\n        message: messageReducer(state, action),\n        mode: modeReducer(state, action),\n        sim: simReducer(state, action),\n      };\n  }\n};\n\n// We manually add action records for these actions since they affect the entire\n// state (the entities, at least).\nconst installSnapshot = (state: State, snapshot: any): State => ({\n  ...revertToSnapshot(state, snapshot),\n  undoRedo: addRecord(state, 'install entity snapshot'),\n});\n\nconst newMachine = (state: State): State => {\n  const freshSnapshot = getSnapshot(initState);\n  return {\n    ...revertToSnapshot(state, freshSnapshot),\n    undoRedo: addRecord(state, 'create new machine'),\n  };\n};\n\nexport default reducer;\n","import { Middleware } from 'redux';\nimport { Action } from '../actions';\nimport * as A from '../actions';\nimport { State } from '../state';\nimport { selectedNodes } from '../Node';\n\n// Each key may be \"bound\" to an alternative redux action, such that when the\n// user presses it, the action is dispatched.\nconst keyBindings: { [key: string]: KeyHandler } = {\n  'a': (_, e) => {\n    if (e.ctrlKey) {\n      return A.selectAllNodes();\n    }\n    return null;\n  },\n  'x': (_, e) => {\n    if (e.ctrlKey) {\n      return A.deleteSelectedNodes();\n    }\n    return null;\n  },\n  'n': (_, e) => {\n    if (e.ctrlKey) {\n      e.preventDefault();\n      return A.startAddingNode();\n    }\n    return null;\n  },\n  't': (st, e) => {\n    const multipleSelected = selectedNodes(st).length > 0;\n    if (multipleSelected && e.ctrlKey) {\n      e.preventDefault();\n      return A.addTransitionBetweenSelected();\n    }\n    return null;\n  },\n  'f': (st, e) => {\n    if (selectedNodes(st).length > 0 && e.ctrlKey) {\n      return A.toggleSelectedFinalNodes();\n    }\n    return null;\n  },\n  'i': (st, e) => {\n    if (selectedNodes(st).length === 1 && e.ctrlKey) {\n      return A.makeSelectedStartNode();\n    }\n    return null;\n  },\n  'z': (_, e) => {\n    if (e.ctrlKey || e.metaKey) return A.undo();\n    return null;\n  },\n  'y': (_, e) => {\n    if (e.ctrlKey || e.metaKey) {\n      e.preventDefault();\n      return A.redo();\n    }\n    return null;\n  },\n};\n\ntype KeyHandler = (state: State, event: React.KeyboardEvent) => null | Action;\n\nexport const keyboardShortcuts: Middleware = api => next => action => {\n  if (action.type !== A.KEY_DOWN) return next(action);\n\n  const state = api.getState();\n  const { key, event } = action.payload;\n\n  const keyHandler = keyBindings[key];\n  if (!keyHandler) return next(action);\n\n  const altAction = keyHandler(state, event);\n  if (!altAction) return next(action);\n\n  next(action);\n  return next(altAction);\n};\n","import React from 'react';\nimport './ErrorReport.css';\n\nexport interface ErrorReportProps {\n  whatsWrong: string;\n  howToFix: string | JSX.Element;\n}\n\nclass ErrorReport extends React.Component<ErrorReportProps> {\n  render() {\n    return (\n      <div className=\"error-report\">\n        <div className=\"error-report__section\">\n          <span className=\"error-report__title\">What's wrong:&ensp;</span>\n          <span className=\"error-report__content\">{this.props.whatsWrong}</span>\n        </div>\n        <div className=\"error-report__section\">\n          <span className=\"error-report__title\">How to fix it:&ensp;</span>\n          <span className=\"error-report__content\">{this.props.howToFix}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ErrorReport;\n","import React from 'react';\nimport ErrorReport from './ErrorReport';\n\nconst problem = 'In order for the machine to start, a state must be '\n              + 'distinguished as the initial or start state. You have '\n              + 'not yet identified any state as such.';\n\nconst fix = 'Select one of your machine states and click the \"Make Start State\" ' +\n            'button to distinguish it as the initial state.';\n\nexport default (\n  <ErrorReport whatsWrong={problem} howToFix={fix} />\n);\n","import React from 'react';\nimport ErrorReport from './ErrorReport';\n\nconst problem = 'At the moment, you have 2 or more transitions from the same '\n              + 'state with the same read symbol. Such nondeterministic behavior '\n              + 'is not supported.';\n\nconst fix = 'Find all transitions whose read symbols are marked red, and modify '\n          + 'or remove the associated transitions so that all transitions for each '\n          + 'state have distinct read symbols';\n\nexport default (\n  <ErrorReport whatsWrong={problem} howToFix={fix} />\n);\n","import React from 'react';\nimport './HaltReport.css';\n\nexport interface HaltReportProps {\n  accepted: boolean;\n}\n\nclass HaltReport extends React.Component<HaltReportProps> {\n  render() {\n    const { accepted: wasSuccess } = this.props;\n    return (\n      <div className=\"halt-report\">\n        <div className=\"halt-report__title\">\n          The machine has&nbsp;\n          <span className={`halt-report__result halt-report__result--${wasSuccess ? 'accepted' : 'rejected'}`}>\n            {wasSuccess ? 'accepted' : 'rejected'}\n          </span>\n          &nbsp;the input string.\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HaltReport;\n","import React from 'react';\nimport HaltReport from './HaltReport';\n\nexport default <HaltReport accepted={true} />;\n","import React from 'react';\nimport HaltReport from './HaltReport';\n\nexport default <HaltReport accepted={false} />;\n","import { delay, put } from 'redux-saga/effects';\nimport * as A from '../actions';\n\nexport default function* autoSave() {\n  const FIVE_SECONDS = 5 * 1000;\n  while (true) {\n    yield delay(FIVE_SECONDS);\n    yield put(A.saveSnapshot());\n  }\n}\n","import _ from 'lodash';\nimport { takeEvery, take, select, fork, put, cancel, delay } from 'redux-saga/effects';\nimport * as A from '../actions';\nimport { State } from '../state';\nimport { Modes } from '../Mode';\nimport { currentState } from '../Sim';\nimport { currentReadSymbol } from '../Tape';\nimport { isNodeFinal } from '../Node';\nimport { arrowsForStart } from '../Arrow';\nimport { transitionDetailsForArrow } from '../TransitionDetail';\nimport { controlPointForArrow } from '../ControlPoint';\n\nfunction* play(singleStep: boolean) {\n  const playTask = yield fork(playSim, singleStep);\n  yield take([A.PAUSE_SIM, A.RESET_SIM, A.HALT_ACCEPT, A.HALT_REJECT]);\n  yield cancel(playTask);\n}\n\nfunction* playSim(singleStep: boolean) {\n  try {\n    yield put(A.switchMode(Modes.SIM));\n    if (singleStep) {\n      yield makeStep();\n    } else {\n      while (true) {\n        yield makeStep();\n      }\n    }\n  } finally {\n    yield put(A.switchMode(Modes.EDIT));\n  }\n}\n\nfunction* makeStep() {\n  // We first collect the current state and read symbol. These determine which\n  // transition we can take (if one is available).\n  const current = yield select(currentState);\n  const readSymbol = yield select(currentReadSymbol);\n  const transitionInfo = yield select(state => availableTransitionInfo(state, current, readSymbol));\n\n  const interval = 1000;\n\n  yield put(A.setActiveNode(current));\n  yield delay(interval / 4);\n\n  // If there are no available transitions, the machine halts. Whether it\n  // accepts or rejects the input is determined by whether the currents state\n  // has been designated as \"final\" or not.\n  if (transitionInfo === null) {\n    const accept = yield select(state => isNodeFinal(state, current));\n    if (accept) yield put(A.haltAccept());\n    else yield put(A.haltReject());\n  }\n\n  const { endId, arrowId, controlPointId, transitionDetailId, writeSymbol, tapeDirection } = transitionInfo as TransitionInfo;\n\n  yield put(A.setActiveArrow(arrowId));\n  yield put(A.setActiveControlPoint(controlPointId));\n  yield put(A.setActiveTransitionDetail(transitionDetailId));\n  yield put(A.writeTapeSymbol(writeSymbol));\n  yield put(A.moveTape(tapeDirection));\n  yield delay(interval / 4);\n\n  yield put(A.setActiveNode(endId));\n  yield put(A.setCurrentState(endId));\n  yield delay(interval / 4);\n\n  yield put(A.setActiveArrow(null));\n  yield put(A.setActiveControlPoint(null));\n  yield put(A.setActiveTransitionDetail(null));\n  yield delay(interval / 4);\n}\n\ninterface TransitionInfo {\n  endId: string;\n  arrowId: string;\n  controlPointId: string;\n  transitionDetailId: string;\n  writeSymbol: string;\n  tapeDirection: 'L' | 'R';\n}\n\nconst availableTransitionInfo = (state: State, current: string, readSymbol: string): null | TransitionInfo => {\n  const outgoing = arrowsForStart(state, current);\n  const details = _.flatten(outgoing.map(arrow => transitionDetailsForArrow(state, arrow.id)));\n  const detail = details.find(detail => detail.read === readSymbol);\n\n  if (!detail) return null;\n  const arrow = outgoing.find(arrow => arrow.id === detail.arrow);\n  if (!arrow) {\n    throw new Error(`Inconsistency in state: transition detail references nonexistent arrow \"${detail.arrow}\"`);\n  }\n  const controlPoint = controlPointForArrow(state, arrow.id);\n  return {\n    endId: arrow.end,\n    arrowId: arrow.id,\n    controlPointId: controlPoint.id,\n    transitionDetailId: detail.id,\n    writeSymbol: detail.write,\n    tapeDirection: detail.move,\n  };\n};\n\nexport default function* sim() {\n  yield takeEvery(A.STEP_SIM, play, true);\n  yield takeEvery(A.PLAY_SIM, play, false);\n}\n","import { all } from 'redux-saga/effects';\nimport autoSave from './autoSave';\nimport sim from './sim';\n\nexport default function* main() {\n  yield all([\n    autoSave(),\n    sim(),\n  ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from './reducer';\nimport * as M from './middleware';\nimport mainSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(\n    M.keyboardShortcuts,\n    M.addTransition,\n    M.deleteTransitionDetail,\n    M.deleteNode,\n    M.validateTransitionDetails,\n    M.validatePreSim,\n    sagaMiddleware,\n    M.halt,\n    M.loadSnapshot,\n    M.saveSnapshot,\n    M.download,\n    M.upload,\n  )),\n);\n\nsagaMiddleware.run(mainSaga);\n\nexport default store;\n","import uuid from 'uuid/v4';\nimport { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { selectedNodes } from '../Node';\nimport { arrowForEndpoints } from '../Arrow';\n\n// When we add a new transition, we need to check if there is already an arrow\n// between its two endpoints. If so, we simply add an additional detail to this\n// arrow; if not we need to construct a new arrow and control point, and then\n// add the detail to that.\nexport const addTransition: Middleware = api => next => action => {\n  if (action.type !== A.ADD_TRANSITION_BETWEEN_SELECTED) return next(action);\n\n  const state = api.getState();\n  const nodes = selectedNodes(state);\n  const start = nodes[0];\n  const end = nodes[1] || nodes[0];\n  const existingArrow = arrowForEndpoints(state, start, end);\n\n  if (existingArrow) {\n    return next(A.addTransitionDetail(existingArrow.id));\n  } else {\n    const arrowId = uuid();\n    return next(A.addArrow(start, end, arrowId));\n  }\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { transitionDetailsForArrow } from '../TransitionDetail';\nimport { controlPointForArrow } from '../ControlPoint';\n\n// When a transition detail is deleted, we need to check if it was the last one\n// for its associated arrow. If it is, we need to also delete the arrow its\n// control point.\nexport const deleteTransitionDetail: Middleware = api => next => action => {\n  if (action.type !== A.DELETE_TRANSITION_DETAIL) return next(action);\n\n  const { id, arrow } = action.payload;\n  const state = api.getState();\n  const remainingDetails = transitionDetailsForArrow(state, arrow).filter(detail => detail.id !== id);\n\n  if (remainingDetails.length > 0) return next(action);\n\n  const controlPointId = controlPointForArrow(state, arrow).id;\n  return next(A.deleteEntities([], [arrow], [controlPointId], [id]));\n};\n","import _ from 'lodash';\nimport { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { transitionDetailsForArrow } from '../TransitionDetail';\nimport { controlPointForArrow } from '../ControlPoint';\nimport { selectedNodes } from '../Node';\nimport { arrowsForNode } from '../Arrow';\n\n// When we delete a node, we need to remove anything that was \"attached\" to it:\n// any arrows, and control points and transition details associated with them.\nexport const deleteNode: Middleware = api => next => action => {\n  if (action.type !== A.DELETE_SELECTED_NODES) return next(action);\n\n  const state = api.getState();\n  const nodeIds = selectedNodes(state);\n  const arrows = _.flatten(nodeIds.map(id => arrowsForNode(state, id)));\n  const arrowIds = _.uniq(_.flatten(arrows.map(({ id }) => id)));\n  const controlPointIds = arrowIds.map(id => controlPointForArrow(state, id)).map(({ id }) => id);\n  const transitionDetails = _.flatten(arrowIds.map(id => transitionDetailsForArrow(state, id)));\n  const transitionDetailIds = transitionDetails.map(({ id }) => id);\n\n  return next(A.deleteEntities(nodeIds, arrowIds, controlPointIds, transitionDetailIds));\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { duplicateTransitionDetails } from '../TransitionDetail';\n\n// Each time the user modifies or adds a transition detail, we find all\n// transition details that share an arrow and have the same read symbol. These\n// represent nondeterministic transitions and should be marked as errors.\nexport const validateTransitionDetails: Middleware = api => next => action => {\n  const validateOn = [\n    A.ADD_TRANSITION_DETAIL,\n    A.CHANGE_TRANSITION_DETAIL,\n    A.DELETE_TRANSITION_DETAIL,\n    A.ADD_ARROW,\n  ];\n  if (!validateOn.includes(action.type)) return next(action);\n\n  next(action);\n  const duplicates = duplicateTransitionDetails(api.getState());\n  return next(A.markDuplicateTransitions(duplicates));\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { hasStartNode } from '../Node';\nimport { duplicateTransitionDetails } from '../TransitionDetail';\nimport MissingStartState from '../../ErrorReport/MissingStartState';\nimport NondeterministicTransition from '../../ErrorReport/NondeterministicTransition';\n\nexport const validatePreSim: Middleware = api => next => action => {\n  if (![A.STEP_SIM, A.PLAY_SIM].includes(action.type)) return next(action);\n\n  const state = api.getState();\n  if (!hasStartNode(state)) {\n    return next(A.displayMessage('Missing start state', MissingStartState));\n  }\n  else if (duplicateTransitionDetails(state).length > 0) {\n    return next(A.displayMessage('Nondeterministic transitions', NondeterministicTransition));\n  }\n\n  return next(action);\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport Accept from '../../HaltReport/Accept';\nimport Reject from '../../HaltReport/Reject';\n\nexport const halt: Middleware = api => next => action => {\n  if (![A.HALT_ACCEPT, A.HALT_REJECT].includes(action.type)) return next(action);\n\n  if (action.type === A.HALT_ACCEPT) {\n    return next(A.displayMessage('Machine Halted', Accept));\n  }\n  else if (action.type === A.HALT_REJECT) {\n    return next(A.displayMessage('Machine Halted', Reject));\n  }\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { getSnapshot } from '../auxiliary';\n\nexport const loadSnapshot: Middleware = _ => next => action => {\n  if (action.type !== A.LOAD_SNAPSHOT) return next(action);\n  try {\n    const saved = localStorage.getItem('machine');\n    if (!saved) return;\n    const snapshot = JSON.parse(saved);\n    next(A.installSnapshot(snapshot));\n  } catch(_) {\n    localStorage.clearItem('machine');\n  }\n};\n\nexport const saveSnapshot: Middleware = api => next => action => {\n  if (action.type !== A.SAVE_SNAPSHOT) return next(action);\n  const state = api.getState();\n  const snapshot = getSnapshot(state);\n  try {\n    localStorage.setItem('machine', JSON.stringify(snapshot));\n  } catch(_) {\n    return;\n  }\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { getSnapshot } from '../auxiliary';\nimport { machineName } from '../MetaData';\n\n// In order to download a machine, we simply encode a snapshot of the current\n// state as JSON, create a dummy link \"pointing\" to this string, and click it.\nexport const download: Middleware = api => next => action => {\n  if (action.type !== A.DOWNLOAD_MACHINE) return next(action);\n\n  const state = api.getState();\n  const snapshot = getSnapshot(state);\n  const machineString = JSON.stringify(snapshot, null, '  ');\n  const dataURI = `data:application/json;charset=utf-8,${encodeURIComponent(machineString)}`;\n  const name = machineName(state);\n  const filenameCandidate = name.toLowerCase().split(' ').join('-');\n  const filename = filenameCandidate.length > 0 ? filenameCandidate : 'untitled-machine';\n\n  const linkElt = document.createElement('a');\n  linkElt.setAttribute('href', dataURI);\n  linkElt.setAttribute('download', filename);\n  linkElt.click();\n};\n\n// Uploading a machine involves a process similar to the download process above.\nexport const upload: Middleware = _ => next => action => {\n  if (action.type !== A.UPLOAD_MACHINE) return next(action);\n\n  async function installMachine(this: any) {\n    uploadElt.removeEventListener('change', installMachine);\n    try {\n      const machineString = await this.files[0].text();\n      const machine = JSON.parse(machineString);\n      return next(A.installSnapshot(machine));\n    } catch (_) {\n      return next(A.displayMessage(\n        'Upload Error',\n        'We were unable to upload your machine. '\n      + 'Please verify that you have selected a valid machine file.'\n      ));\n    }\n  };\n\n  const uploadElt = document.createElement('input');\n  uploadElt.type = 'file';\n  uploadElt.accept = '.json,.JSON';\n  uploadElt.addEventListener('change', installMachine);\n  uploadElt.click();\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { State } from '../state-mgmt/state';\nimport { Arrow as ArrowDetails } from '../state-mgmt/Arrow';\nimport { controlPointForArrow } from '../state-mgmt/ControlPoint';\nimport { nodeById } from '../state-mgmt/Node';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport { isArrowActive } from '../state-mgmt/Sim';\nimport Vector from '../tools/Vector';\nimport './Arrow.css';\n\n// An arrow represents one or more transitions between machine states (which are\n// represented by nodes). We render an arrow as a curved line between nodes,\n// using the arrow's control points to construct this curve. There are two cases\n// we need to consider: (1) if the arrow represents a self-transition, we render\n// it using a cubic bezier curve, (2) if the arrow represents a standard\n// transition, we use a quadratic curve.\n\nexport interface ArrowProps {\n  details: ArrowDetails;\n  start: Vector;\n  end: Vector;\n  control: Vector;\n  isSelfLoop: boolean;\n  isEditable: boolean;\n  isActive: boolean;\n}\n\nclass Arrow extends React.Component<ArrowProps> {\n  render() {\n    const className = classNames('arrow', {\n      'arrow--editable': this.props.isEditable,\n      'arrow--active': this.props.isActive,\n    });\n\n    const pathString = this.props.isSelfLoop\n      ? this.computeCubicPathString()\n      : this.computeQuadraticPathString();\n    return <path className={className} d={pathString} />;\n  }\n\n  private computeQuadraticPathString() {\n    // We need to distinguish between two types of \"control point\": the USER\n    // control point, which is represented by an arrowhead that the user can\n    // drag around, and the BEZIER control point, which is determined by the\n    // position of the user control point and in turn determines the shape of\n    // the arrow's curve. The main task here is to derive the BEZIER control\n    // point from the USER control point. To do so, we first find the midpoint\n    // between the nodes. We then construct the vector pointing from this\n    // midpoint to the USER control point, and scale it by 2. The bezier control\n    // point is described by the sum of this vector and the midpoint vector. I\n    // discovered this via experimentation, but it works like a charm.\n    const { start, end, control} = this.props;\n    const mid = start.plus(end.minus(start).scale(1 / 2));\n    const bezierControl= mid.plus(control.minus(mid).scale(2));\n    return `M ${start.x} ${start.y} Q ${bezierControl.x} ${bezierControl.y} ${end.x} ${end.y}`;\n  }\n\n  private computeCubicPathString() {\n    // To construct the bezier control pointS in this case, we first construct\n    // the vector pointing from the node to the USER control point and scale it\n    // by 4 / 3 (as above, I discovered this experimentally, and it appears to\n    // work perfectly although I don't know why). We then move a specified\n    // distance (`separation`) perpendicular to this vector in either direction.\n    // This separation distance determines how wide the loop is.\n    const { start, control } = this.props;\n    const v1 = control.minus(start).scale(4 / 3);\n    const separation = 80;\n    // If the control point is on top of its associated node, we place the\n    // bezier control points horizontally to the left and right.\n    const v2 = v1.magnitude() !== 0\n      ? v1.perp().normalize().scale(separation)\n      : new Vector(separation, 0);\n    const ctrl1 = start.plus(v1).plus(v2);\n    const ctrl2 = start.plus(v1).minus(v2);\n    return `M ${start.x} ${start.y} C ${ctrl1.x} ${ctrl1.y} ${ctrl2.x} ${ctrl2.y} ${start.x} ${start.y}`;\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => {\n  const start = nodeById(state, ownProps.details.start);\n  const end = nodeById(state, ownProps.details.end);\n  const controlPoint = controlPointForArrow(state, ownProps.details.id);\n  return {\n    start: Vector.from(start.pos),\n    end: Vector.from(end.pos),\n    control: Vector.from(controlPoint.pos),\n    isSelfLoop: start.id === end.id,\n    isEditable: isInEditMode(state),\n    isActive: isArrowActive(state, ownProps.details.id),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n)(Arrow);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport classNames from 'classnames';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { Node as NodeDetails, isNodeSelected, isStartNode } from '../state-mgmt/Node';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport { isNodeActive } from '../state-mgmt/Sim';\nimport Vector from '../tools/Vector';\nimport './Node.css';\n\n// A node represents a machine state in the TM formalization. We render nodes as\n// circles (with additional embellishments if they are also start or accepting\n// nodes). Additionally, a node may be given a \"mnemonic\" -- a 0-4 character\n// string -- to clarify its purpose.\n\nexport interface NodeProps {\n  details: NodeDetails;\n  isSelected: boolean;\n  isStart: boolean;\n  isEditable: boolean;\n  isActive: boolean;\n  changeMnemonic: (value: string) => void;\n  blurMnemonic: () => void;\n  mouseDown: () => void;\n  mouseUp: () => void;\n}\n\nexport const NODE_RADIUS = 21;\n\nclass Node extends React.Component<NodeProps> {\n  render() {\n    const { mnemonic } = this.props.details;\n    const className = classNames('node', {\n      'node--selected': this.props.isSelected,\n      'node--final': this.props.details.isFinal,\n      'node--start': this.props.isStart,\n      'node--editable': this.props.isEditable,\n      'node--active': !this.props.isEditable && this.props.isActive,\n    });\n\n    const mnemonicClassName = classNames('node__mnemonic-input', {\n      'node__mnemonic-input--editable': this.props.isEditable,\n    });\n\n    const pos = Vector.from(this.props.details.pos);\n    const mnemonicPos = pos.plus(new Vector(-NODE_RADIUS + 2, NODE_RADIUS + 3));\n\n    return (\n      <div className=\"node__container\">\n        <div className={className}\n             onMouseDown={this.handleMouseDown}\n             onMouseUp={this.handleMouseUp}\n             style={{\n               position: 'absolute',\n               left: pos.x - NODE_RADIUS,\n               top: pos.y - NODE_RADIUS,\n             }} />\n        <input className={mnemonicClassName}\n               disabled={!this.props.isEditable}\n               value={mnemonic}\n               onChange={this.handleInputChange}\n               onBlur={this.handleInputBlur}\n               type=\"text\"\n               maxLength={4}\n               style={{\n                 position: 'absolute',\n                 left: mnemonicPos.x,\n                 top: mnemonicPos.y,\n               }}/>\n      </div>\n    );\n  }\n\n  private handleMouseDown = (e: React.MouseEvent) => {\n    this.props.mouseDown();\n  };\n\n  private handleMouseUp = (e: React.MouseEvent) => {\n    this.props.mouseUp();\n  };\n\n  private handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.changeMnemonic(evt.target.value);\n  };\n\n  private handleInputBlur = () => {\n    this.props.blurMnemonic();\n  };\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => ({\n  isSelected: isNodeSelected(state, ownProps.details.id),\n  isStart: isStartNode(state, ownProps.details.id),\n  isEditable: isInEditMode(state),\n  isActive: isNodeActive(state, ownProps.details.id),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: any) => ({\n  changeMnemonic: (value: string) => dispatch(A.changeMnemonic(ownProps.details.id, value)),\n  blurMnemonic: () => dispatch(A.blurMnemonic()),\n  mouseDown: () => dispatch(A.mouseDownNode(ownProps.details.id)),\n  mouseUp: () => dispatch(A.mouseUpNode()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Node);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport classNames from 'classnames';\nimport * as A from '../state-mgmt/actions';\nimport { State } from '../state-mgmt/state';\nimport { arrowById } from '../state-mgmt/Arrow';\nimport { nodeById } from '../state-mgmt/Node';\nimport { ControlPoint as ControlPointDetails } from '../state-mgmt/ControlPoint';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport { isControlPointActive } from '../state-mgmt/Sim';\nimport Vector from '../tools/Vector';\nimport './ControlPoint.css';\n\n// A control point is a draggable handle that the user can position to alter the\n// curve of an arrow. Control points are essential in being able to layout a\n// machine in an aesthetically pleasing way. As for arrows, there are 2 cases to\n// consider here: (1) the control point is for a self-transition, and (2) it is\n// for a standard transition. In both cases, we render the control point as an\n// arrowhead pointing in the direction of the transition that its arrow\n// represents.\n\nexport interface ControlPointProps {\n  details: ControlPointDetails;\n  start: Vector;\n  end: Vector;\n  isSelfLoop: boolean;\n  isEditable: boolean;\n  isActive: boolean;\n  mouseDown: () => void;\n  mouseUp: () => void;\n}\n\nconst ARROW_LENGTH = 18;\n\nclass ControlPoint extends React.Component<ControlPointProps> {\n  render() {\n    const className = classNames('control-point', {\n      'control-point--editable': this.props.isEditable,\n      'control-point--active': this.props.isActive,\n    });\n\n    const pathString = this.props.isSelfLoop\n    ? this.computeCubicString()\n    : this.computeQuadraticPathString();\n    return <path className={className}\n                 d={pathString}\n                 onMouseDown={this.handleMouseDown}\n                 onMouseUp={this.handleMouseUp} />;\n  }\n\n  // In the quadratic (i.e. standard transition) case, we render the control\n  // point as an arrowhead that is parallel to the line segment connecting the\n  // two nodes that its arrow joins.\n  private computeQuadraticPathString() {\n    const { start, end } = this.props;\n    const pos = Vector.from(this.props.details.pos);\n    const diff = end.minus(start);\n    // If the two endpoints are on top of each other, we simply create a\n    // horizontal arrow.\n    const v1 = diff.magnitude() !== 0\n      ? diff.normalize().scale(ARROW_LENGTH)\n      : new Vector(ARROW_LENGTH, 0);\n    const v2 = v1.perp().scale(1 / 3);\n    const p1 = pos.minus(v1).plus(v2);\n    const p2 = pos.minus(v1).minus(v2);\n    return `M ${p1.x} ${p1.y} L ${pos.x} ${pos.y} L ${p2.x} ${p2.y}`;\n  }\n\n  // For a self-transition, we render the control point as an arrowhead that is\n  // perpendicular to the line connecting it to the node that its arrow\n  // connects.\n  private computeCubicString() {\n    const { start } = this.props;\n    const pos = Vector.from(this.props.details.pos);\n    const diff = pos.minus(start);\n    // If the control point is on top of its associated node, we simply create a\n    // horizontal arrow.\n    const v1 = diff.magnitude() !== 0\n      ? diff.normalize()\n      : new Vector(0, 1);\n    const v2 = v1.perp().scale(ARROW_LENGTH);\n    const tip = pos.plus(v2.scale(1 / 2));\n    const p1 = tip.minus(v2).plus(v1.scale(ARROW_LENGTH / 3));\n    const p2 = tip.minus(v2).minus(v1.scale(ARROW_LENGTH / 3));\n    return `M ${p1.x} ${p1.y} L ${tip.x} ${tip.y} L ${p2.x} ${p2.y}`;\n  }\n\n  private handleMouseDown = (e: React.MouseEvent) => {\n    this.props.mouseDown();\n  };\n\n  private handleMouseUp = (e: React.MouseEvent) => {\n    this.props.mouseUp();\n  };\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => {\n  const arrow = arrowById(state, ownProps.details.arrow);\n  const start = nodeById(state, arrow.start);\n  const end = nodeById(state, arrow.end);\n  return {\n    start: Vector.from(start.pos),\n    end: Vector.from(end.pos),\n    isSelfLoop: start.id === end.id,\n    isEditable: isInEditMode(state),\n    isActive: isControlPointActive(state, ownProps.details.id),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: any) => ({\n  mouseDown: () => dispatch(A.mouseDownControlPoint(ownProps.details.id)),\n  mouseUp: () => dispatch(A.mouseUpControlPoint()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ControlPoint);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TransitionDetail as TransitionDetailInfo } from '../state-mgmt/TransitionDetail';\nimport { TapeDirection, TapeDirections } from '../state-mgmt/Tape';\nimport './TransitionDetail.css';\n\n// Each transition consists of a pair of (not necessarily distinct) states, and\n// 3 pieces of information detailing (1) what tape symbol must be read in order\n// to take the transition, (2) what tape symbol will be written if the\n// transition is taken, and (3) in which direction the tape head should move. A\n// transition detail represents these three pieces of information; together with\n// an arrow it represents a full transition.\n\nexport interface TransitionDetailProps {\n  detail: TransitionDetailInfo;\n  isFocused: boolean;\n  isEditable: boolean;\n  isActive: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  onChange?: (value: TransitionDetailInfo) => void;\n  onDelete?: () => void;\n}\n\nclass TransitionDetail extends React.Component<TransitionDetailProps> {\n  private readRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  render() {\n    const { read, write, move } = this.props.detail;\n\n    const className = classNames('transition-detail', {\n      'transition-detail--active': this.props.isActive,\n    });\n\n    const inputClassName = classNames('transition-detail__input', {\n      'transition-detail__input--focus': this.props.isFocused,\n      'transition-detail__input--editable': this.props.isEditable,\n    });\n\n    // We create a special className for the read input in order to distinguish\n    // inputs in an \"error\" state.\n    const readInputClassName = classNames(inputClassName, {\n      'transition-detail__input--error': this.props.detail.isDuplicate,\n    })\n\n    const selectorClassName = classNames('transition-detail__selector', {\n      'transition-detail__selector--focus': this.props.isFocused,\n      'transition-detail__selector--editable': this.props.isEditable,\n    });\n\n    return (\n      <div className={className}>\n        <input className={readInputClassName}\n               ref={this.readRef}\n               disabled={!this.props.isEditable}\n               value={read}\n               placeholder=\"∅\"\n               onChange={this.handleInputChange('read')}\n               onFocus={this.handleFocus}\n               onBlur={this.handleBlur}\n               type=\"text\"\n               maxLength={1} />\n        <span className=\"transition-detail__separator\">&#47;</span>\n        <input className={inputClassName}\n               disabled={!this.props.isEditable}\n               value={write}\n               placeholder=\"∅\"\n               onChange={this.handleInputChange('write')}\n               onFocus={this.handleFocus}\n               onBlur={this.handleBlur}\n               type=\"text\"\n               maxLength={1} />\n        <select className={selectorClassName}\n                disabled={!this.props.isEditable}\n                value={move}\n                onChange={this.handleSelectChange}>\n          <option value={TapeDirections.L} onMouseDown={this.selectLeft}>←</option>\n          <option value={TapeDirections.R} onMouseDown={this.selectRight}>→</option>\n        </select>\n        {this.props.isEditable &&\n          <button className=\"transition-detail__button\"\n                  onClick={this.handleDeleteClick}>\n          </button>\n        }\n      </div>\n    );\n  }\n\n  // In the meantime, whenever a transition detail is created, it is immediately\n  // focused. This (slight) hack ensures that the browser focus remains\n  // synchronized.\n  componentDidMount() {\n    if (this.props.isFocused) this.focus();\n  }\n\n  private focus() {\n    if (this.readRef.current) this.readRef.current.focus();\n  }\n\n  private handleInputChange(property: 'read' | 'write') {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (!this.props.onChange) return;\n      // We do not allow spaces, since they appear idential to the empty string\n      // and therefore result in a lot of confusion.\n      else if (e.target.value === ' ') return;\n      this.props.onChange({\n        ...this.props.detail,\n        [property]: e.target.value,\n      });\n    };\n  }\n\n  private handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    if (!this.props.onChange) return;\n    this.changeDirection(e.target.value as TapeDirection);\n  };\n\n  // The following two methods are a dirty hack for getting the select to update\n  // with Firefox. For some reason, Firefox is not reporting the correct value\n  // when it fires the \"change\" event. This seems to do the trick, though.\n  private selectLeft = () => {\n    this.changeDirection(TapeDirections.L);\n  };\n\n  private selectRight = () => {\n    this.changeDirection(TapeDirections.R);\n  };\n\n  private changeDirection(direction: TapeDirection) {\n    if (!this.props.onChange) return;\n    this.props.onChange({\n      ...this.props.detail,\n      move: direction,\n    });\n  }\n\n  private handleFocus = () => {\n    if (this.props.onFocus) this.props.onFocus();\n  };\n\n  private handleBlur = () => {\n    if (this.props.onBlur) this.props.onBlur();\n  };\n\n  private handleDeleteClick = () => {\n    if (this.props.onDelete) this.props.onDelete();\n  };\n}\n\nexport default TransitionDetail;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as A from '../state-mgmt/actions';\nimport { State } from '../state-mgmt/state';\nimport { TransitionDetail as TransitionDetailInfo, focusedDetail } from '../state-mgmt/TransitionDetail';\nimport { arrowById } from '../state-mgmt/Arrow';\nimport { nodeById } from '../state-mgmt/Node';\nimport { controlPointForArrow } from '../state-mgmt/ControlPoint';\nimport Vector from '../tools/Vector';\nimport TransitionDetail from '../TransitionDetail/TransitionDetail';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport { activeTransitionDetail } from '../state-mgmt/Sim';\nimport './TransitionDetails.css';\n\n// A single arrow between nodes can represent any number of transitions. In\n// order to display transitions in a compact manner, we group all transition\n// details for a certain arrow together in a \"Transition Details\" component. The\n// details (read/write/move) for each transition are rendered one on top of the\n// other, along with a button for adding new transitions. The main difficulty\n// here is in displaying the details in an aesthetically pleasing way: we want\n// them not to overlap with their associated arrow. To accomplish this, we\n// compute a \"stance\" for the details based on the orientation and curve of\n// their associated arrow -- either top-left, top-right, bottom-left, or\n// bottom-right. We then transform the details via CSS accordingly.\n\nexport interface TransitionDetailsProps {\n  arrowId: string;\n  details: TransitionDetailInfo[];\n  start: Vector;\n  end: Vector;\n  control: Vector;\n  isSelfLoop: boolean;\n  focusedDetail: null | string;\n  isEditable: boolean;\n  activeDetail: null | string;\n  changeDetail: (detail: TransitionDetailInfo) => void;\n  deleteDetail: (id: string, arrow: string) => void;\n  addDetail: (arrow: string) => void;\n  focusDetail: (id: string) => void;\n  blurDetail: (id: string) => void;\n}\n\nclass TransitionDetails extends React.Component<TransitionDetailsProps> {\n  render() {\n    const { details, control } = this.props;\n    const stance = this.computeStance();\n    const className = classNames(\n      'transition-details',\n      `transition-details--${stance}`,\n    );\n\n    return (\n      <div className={className}\n           style={{\n             // We initially anchor the component at its arrow's control point,\n             // and then use CSS transforms to move it according to its computed\n             // stance.\n             position: 'absolute',\n             left: control.x,\n             top: control.y,\n           }}>\n        {this.props.isEditable && !this.isTopStance(stance) && this.renderAddDetailButton()}\n        {details.map(detail => (\n          <TransitionDetail key={detail.id}\n                            detail={detail}\n                            isFocused={this.props.focusedDetail === detail.id}\n                            isEditable={this.props.isEditable}\n                            isActive={!this.props.isEditable && this.props.activeDetail === detail.id}\n                            onChange={this.handleDetailChange}\n                            onDelete={this.handleDetailDelete(detail.id, detail.arrow)}\n                            onFocus={this.handleDetailFocus(detail.id)}\n                            onBlur={this.handleDetailBlur(detail.id)} />\n        ))}\n        {this.props.isEditable && this.isTopStance(stance) && this.renderAddDetailButton()}\n      </div>\n    );\n  }\n\n  private handleDetailChange = (detail: TransitionDetailInfo) => {\n    this.props.changeDetail(detail);\n  };\n\n  private handleDetailDelete(id: string, arrow: string) {\n    return () => this.props.deleteDetail(id, arrow);\n  }\n\n  private handleDetailFocus(id: string) {\n    return () => this.props.focusDetail(id);\n  }\n\n  private handleDetailBlur(id: string) {\n    return () => this.props.blurDetail(id);\n  }\n\n  private handleAddDetailButton(arrow: string) {\n    return () => this.props.addDetail(arrow);\n  };\n\n  // As is often the case here, there are two possibilities to consider: (1) the\n  // details are associated with a self-loop, or (2) with a standard arrow.\n  private computeStance() {\n    if (this.props.isSelfLoop) {\n      return this.computeSelfLoopStance();\n    } else {\n      return this.computeStandardStance();\n    }\n  }\n\n  // In the self-loop case, we simply use the angle between the associated node\n  // and the control point.\n  private computeSelfLoopStance() {\n    const { start, control } = this.props;\n    const theta = control.minus(start).angle();\n    return this.computeClassNameFromAngle(theta);\n  }\n\n  // In the case of the standard stance, we use the angle of the line segment\n  // that passes through the control point perpendicular to the line joining the\n  // two nodes associated with the arrow in question. This seems to work quite\n  // well in keeping the details away from their associated arrow.\n  private computeStandardStance() {\n    const { start, end, control } = this.props;\n    const v1 = control.minus(start);\n    const v2 = v1.project(end.minus(start));\n    const angle = v1.minus(v2).angle();\n    return this.computeClassNameFromAngle(angle);\n  }\n\n  // Here we compute a stance from a given angle. The only tricky thing here is\n  // that the Y-axis is flipped (as is customary). Thus, any intuition about\n  // where the top of the box should go needs to be applied to the bottom, and\n  // vice-versa.\n  private computeClassNameFromAngle(angle: number) {\n    // 1st quadrant\n    if (0 < angle && angle <= Math.PI / 2) return 'top-left';\n    // 2nd quadrant\n    else if (Math.PI / 2 < angle && angle <= Math.PI) return 'top-right';\n    // 3rd quadrant\n    else if (-Math.PI / 2 > angle && angle >= -Math.PI) return 'bottom-right';\n    // 4th quadrant\n    else return 'bottom-left';\n  }\n\n  // In order to keep the details as close to their associated control point as\n  // possible, we render the \"add new\" button away from the control point: if\n  // the computed stance puts the details on top of the control point, we place\n  // the button on top of the details, and vice versa (see the \"render\" method).\n  private isTopStance(anchor: string) {\n    return /^top/.test(anchor);\n  }\n\n  private renderAddDetailButton() {\n    return (\n      <button className=\"transition-details__add-button\"\n              onClick={this.handleAddDetailButton(this.props.arrowId)}>\n        add new\n      </button>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => {\n  const arrow = arrowById(state, ownProps.arrowId);\n  const start = nodeById(state, arrow.start);\n  const end = nodeById(state, arrow.end);\n  const control = controlPointForArrow(state, arrow.id);\n  return {\n    start: Vector.from(start.pos),\n    end: Vector.from(end.pos),\n    control: Vector.from(control.pos),\n    isSelfLoop: start.id === end.id,\n    focusedDetail: focusedDetail(state),\n    isEditable: isInEditMode(state),\n    activeDetail: activeTransitionDetail(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  changeDetail: (detail: TransitionDetailInfo) => dispatch(A.changeTransitionDetail(detail)),\n  deleteDetail: (id: string, arrow: string) => dispatch(A.deleteTransitionDetail(id, arrow)),\n  addDetail: (arrow: string) => dispatch(A.addTransitionDetail(arrow)),\n  focusDetail: (id: string) => dispatch(A.focusTransitionDetail(id)),\n  blurDetail: (id: string) => dispatch(A.blurTransitionDetail(id)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TransitionDetails);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as A from '../state-mgmt/actions';\nimport { State } from '../state-mgmt/state';\nimport { isAddingNode, mousePos } from '../state-mgmt/UI';\nimport { NODE_RADIUS } from '../Node/Node';\nimport Vector from '../tools/Vector';\nimport './ShadowNode.css';\n\n// When the user is in the process of adding a new node, we render a \"shadow\n// node\" underneath the cursor to indicate the change in state. This node looks\n// much like a real node but lacks all of the functionality.\n\nexport interface ShadowNodeProps {\n  isVisible: boolean;\n  pos: Vector;\n  add: (pos: Vector) => void;\n}\n\nclass ShadowNode extends React.Component<ShadowNodeProps> {\n  render() {\n    const { isVisible, pos } = this.props;\n    return (isVisible &&\n      <div className=\"shadow-node\"\n           onMouseUp={this.handleMouseUp}\n           style={{\n             position: 'absolute',\n             left: pos.x - NODE_RADIUS,\n             top: pos.y - NODE_RADIUS - 2,\n           }}/>\n    );\n  }\n\n  private handleMouseUp = (e: React.MouseEvent) => {\n    this.props.add(this.props.pos);\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  isVisible: isAddingNode(state),\n  pos: mousePos(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  add: (pos: Vector) => dispatch(A.addNode(pos)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ShadowNode);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as A from '../state-mgmt/actions';\nimport { State } from '../state-mgmt/state';\nimport{ Arrow as ArrowDetails, allArrows } from '../state-mgmt/Arrow';\nimport { Node as NodeDetails, allNodes } from '../state-mgmt/Node';\nimport { ControlPoint as ControlPointDetails, allControlPoints } from '../state-mgmt/ControlPoint';\nimport { TransitionDetail, allGroupedTransitionDetails } from '../state-mgmt/TransitionDetail';\nimport Arrow from '../Arrow/Arrow';\nimport Node from '../Node/Node';\nimport ControlPoint from '../ControlPoint/ControlPoint';\nimport TransitionDetails from '../TransitionDetails/TransitionDetails';\nimport ShadowNode from '../ShadowNode/ShadowNode';\nimport Vector from '../tools/Vector';\nimport './Canvas.css';\n\n// The canvas is the editing surface for the machine. It is responsible for\n// rendering all nodes, arrows, control points, and transition details.\n\nexport interface CanvasProps {\n  arrows: ArrowDetails[];\n  nodes: NodeDetails[];\n  controlPoints: ControlPointDetails[];\n  transitionDetails: { [key: string]: TransitionDetail[] };\n  mouseDown: (pos: Vector) => void;\n  mouseUp: () => void;\n  mouseMove: (pos: Vector) => void;\n}\n\nclass Canvas extends React.Component<CanvasProps> {\n  render() {\n    const { arrows, nodes, controlPoints, transitionDetails } = this.props;\n    // This configuration probably warrants an explanation. Some of the machine\n    // components (e.g. arrows, control points) need to be rendered in an SVG\n    // context. However, we cannot render the nodes and transition details\n    // inside of one (strictly speaking, we could use \"foreignObject\" elements,\n    // but this proved to be far more complicated). Therefore, we render an SVG\n    // element inside of a containing div, and render the HTML elements inside\n    // of the latter.\n    return (\n      <div className=\"canvas\"\n             onMouseDown={this.handleMouseDown}\n             onMouseUp={this.handleMouseUp}\n             onMouseMove={this.handleMouseMove}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\n             width=\"100%\"\n             height=\"100%\">\n          {arrows.map(details => <Arrow key={details.id} details={details} />)}\n          {controlPoints.map(details => <ControlPoint key={details.id} details={details} />)}\n        </svg>\n        {nodes.map(details => <Node key={details.id} details={details} />)}\n        {Object.keys(transitionDetails).map(arrowId => (\n          <TransitionDetails key={arrowId} arrowId={arrowId} details={transitionDetails[arrowId]} />\n        ))}\n        <ShadowNode />\n      </div>\n    );\n  }\n\n  private handleMouseDown = (e: React.MouseEvent) => {\n    this.props.mouseDown(this.computeMousePos(e));\n  };\n\n  private handleMouseUp = () => {\n    this.props.mouseUp();\n  };\n\n  // We call \"preventDefault\" on the event in order to prevent the annoying text\n  // highlighting behavior that occurs when the user drags entities around on\n  // the screen.\n  private handleMouseMove = (e: React.MouseEvent) => {\n    e.preventDefault();\n    this.props.mouseMove(this.computeMousePos(e));\n  };\n\n  // Here we compute the position of the mouse relative to the canvas itself\n  // (rather than the browser client, or some other frame of reference).\n  private computeMousePos(e: React.MouseEvent) {\n    const { left, top } = e.currentTarget.getBoundingClientRect();\n    const { clientX, clientY } = e;\n    return new Vector(clientX - left, clientY - top);\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  arrows: allArrows(state),\n  nodes: allNodes(state),\n  controlPoints: allControlPoints(state),\n  transitionDetails: allGroupedTransitionDetails(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  mouseDown: (pos: Vector) => dispatch(A.mouseDownCanvas(pos)),\n  mouseUp: () => dispatch(A.mouseUpCanvas()),\n  mouseMove: (pos: Vector) => dispatch(A.mouseMoveCanvas(pos)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Canvas);\n","import { State } from './state';\nimport { selectedNodes } from './Node';\n\n// Produces a list of all button types which should be displayed given the\n// current state.\nexport const whichButtonTypes = (state: State): EditButtonType[] => {\n  const selectedCount = selectedNodes(state).length;\n  switch (selectedCount) {\n    case 0: return [\n      EditButtonTypes.ADD_STATE,\n    ];\n    case 1: return [\n      EditButtonTypes.ADD_STATE,\n      EditButtonTypes.REMOVE_STATE,\n      EditButtonTypes.ADD_SELF_TRANSITION,\n      EditButtonTypes.MAKE_START,\n      EditButtonTypes.TOGGLE_ACCEPTING,\n    ];\n    case 2: return [\n      EditButtonTypes.ADD_STATE,\n      EditButtonTypes.REMOVE_TWO_STATES,\n      EditButtonTypes.ADD_TRANSITION,\n      EditButtonTypes.TOGGLE_TWO_ACCEPTING,\n    ];\n    default: return [\n      EditButtonTypes.ADD_STATE,\n      EditButtonTypes.REMOVE_MANY_STATES,\n      EditButtonTypes.TOGGLE_MANY_ACCEPTING,\n    ];\n  }\n};\n\nexport type EditButtonType = 'ADD_STATE'\n                           | 'REMOVE_STATE'\n                           | 'REMOVE_TWO_STATES'\n                           | 'REMOVE_MANY_STATES'\n                           | 'ADD_SELF_TRANSITION'\n                           | 'ADD_TRANSITION'\n                           | 'MAKE_START'\n                           | 'UNMAKE_START'\n                           | 'TOGGLE_ACCEPTING'\n                           | 'TOGGLE_TWO_ACCEPTING'\n                           | 'TOGGLE_MANY_ACCEPTING';\n\nexport const EditButtonTypes: { [key: string]: EditButtonType } = {\n  ADD_STATE: 'ADD_STATE',\n  REMOVE_STATE: 'REMOVE_STATE',\n  REMOVE_TWO_STATES: 'REMOVE_TWO_STATES',\n  REMOVE_MANY_STATES: 'REMOVE_MANY_STATES',\n  ADD_SELF_TRANSITION: 'ADD_SELF_TRANSITION',\n  ADD_TRANSITION: 'ADD_TRANSITION',\n  MAKE_START: 'MAKE_START',\n  UNMAKE_START: 'UNMAKE_START',\n  TOGGLE_ACCEPTING: 'TOGGLE_ACCEPTING',\n  TOGGLE_TWO_ACCEPTING: 'TOGGLE_TWO_ACCEPTING',\n  TOGGLE_MANY_ACCEPTING: 'TOGGLE_MANY_ACCEPTING',\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { State } from '../state-mgmt/state';\nimport *  as A from '../state-mgmt/actions';\nimport { whichButtonTypes, EditButtonType, EditButtonTypes } from '../state-mgmt/EditControls';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport './EditControls.css';\n\nexport interface EditControlsProps {\n  inEditMode: boolean;\n  buttonTypes: EditButtonType[];\n  undo: () => void;\n  redo: () => void;\n  addState: () => void;\n  removeStates: () => void;\n  addTransition: () => void;\n  makeStart: () => void;\n  toggleFinal: () => void;\n}\n\nclass EditControls extends React.Component<EditControlsProps> {\n  render() {\n    return (\n      <div className=\"edit-controls\">\n        <div className=\"edit-controls__undo-redo-buttons\">\n          <button className=\"edit-controls__button edit-controls__undo-button\"\n                  title=\"undo\"\n                  onClick={this.handleUndoButtonClick} />\n          <button className=\"edit-controls__button edit-controls__redo-button\"\n                  title=\"redo\"\n                  onClick={this.handleRedoButtonClick} />\n        </div>\n\n        {this.props.inEditMode && this.props.buttonTypes.map(type => {\n          const config = this.buttonConfig[type];\n          return config && (\n            <button className={`edit-controls__button edit-controls__${config.className}-button`}\n                    title={config.title}\n                    key={type}\n                    onClick={config.action} />\n          );\n        })}\n      </div>\n    );\n  }\n\n  private handleUndoButtonClick = () => {\n    this.props.undo();\n  };\n\n  private handleRedoButtonClick = () => {\n    this.props.redo();\n  };\n\n  private buttonConfig: { [key: string]: { action: () => void, className: string, title: string } } = {\n    [EditButtonTypes.ADD_STATE]: {\n      action: () => this.props.addState(),\n      className: 'add-state',\n      title: 'add new state',\n    },\n    [EditButtonTypes.REMOVE_STATE]: {\n      action: () => this.props.removeStates(),\n      className: 'remove-state',\n      title: 'remove state',\n    },\n    [EditButtonTypes.REMOVE_TWO_STATES]: {\n      action: () => this.props.removeStates(),\n      className: 'remove-two-states',\n      title: 'remove states',\n    },\n    [EditButtonTypes.REMOVE_MANY_STATES]: {\n      action: () => this.props.removeStates(),\n      className: 'remove-many-states',\n      title: 'remove states',\n    },\n    [EditButtonTypes.ADD_SELF_TRANSITION]: {\n      action: () => this.props.addTransition(),\n      className: 'add-self-transition',\n      title: 'add self transition',\n    },\n    [EditButtonTypes.ADD_TRANSITION]: {\n      action: () => this.props.addTransition(),\n      className: 'add-transition',\n      title: 'add transition',\n    },\n    [EditButtonTypes.MAKE_START]: {\n      action: () => this.props.makeStart(),\n      className: 'make-start',\n      title: 'distinguish as initial state',\n    },\n    [EditButtonTypes.TOGGLE_ACCEPTING]: {\n      action: () => this.props.toggleFinal(),\n      className: 'toggle-accepting',\n      title: 'toggle state\\'s status as final'\n    },\n    [EditButtonTypes.TOGGLE_TWO_ACCEPTING]: {\n      action: () => this.props.toggleFinal(),\n      className: 'toggle-two-accepting',\n      title: 'toggle states\\' statuses as final',\n    },\n    [EditButtonTypes.TOGGLE_MANY_ACCEPTING]: {\n      action: () => this.props.toggleFinal(),\n      className: 'toggle-many-accepting',\n      title: 'toggle states\\' statuses as final',\n    },\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  inEditMode: isInEditMode(state),\n  buttonTypes: whichButtonTypes(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  undo: () => dispatch(A.undo()),\n  redo: () => dispatch(A.redo()),\n  addState: () => dispatch(A.startAddingNode()),\n  removeStates: () => dispatch(A.deleteSelectedNodes()),\n  addTransition: () => dispatch(A.addTransitionBetweenSelected()),\n  makeStart: () => dispatch(A.makeSelectedStartNode()),\n  toggleFinal: () => dispatch(A.toggleSelectedFinalNodes()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(EditControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as A from '../state-mgmt/actions';\nimport './AppControls.css';\n\nexport interface AppControlsProps {\n  newMachine: () => void;\n  download: () => void;\n  upload: () => void;\n}\n\nclass AppControls extends React.Component<AppControlsProps> {\n  render() {\n    return (\n      <div className=\"app-controls\">\n        <div className=\"app-controls__buttons\">\n          <button className=\"app-controls__button app-controls__new-button\"\n                  title=\"new empty machine\"\n                  onClick={this.handleNewClick} />\n          <button className=\"app-controls__button app-controls__download-button\"\n                  title=\"download machine (JSON)\"\n                  onClick={this.handleDownloadClick} />\n          <button className=\"app-controls__button app-controls__upload-button\"\n                  title=\"upload machine (JSON)\"\n                  onClick={this.handleUploadClick} />\n        </div>\n\n        <a className=\"app-controls__link\" href=\"#examples\">Examples</a>\n        <a className=\"app-controls__link\" href=\"#tutorial\">Tutorial</a>\n        <a className=\"app-controls__link\" href=\"#guide\">Guide</a>\n        <a className=\"app-controls__link\" href=\"#about\">About</a>\n        <a className=\"app-controls__link app-controls__source-link\"\n           href=\"https://github.com/wjlewis/tm\"\n           target=\"_blank\"\n           rel=\"noopener noreferrer\">\n          &lt;Source&#47;&gt;\n        </a>\n      </div>\n    );\n  }\n\n  private handleNewClick = () => {\n    this.props.newMachine();\n  };\n\n  private handleDownloadClick = () => {\n    this.props.download();\n  };\n\n  private handleUploadClick = () => {\n    this.props.upload();\n  };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  newMachine: () => dispatch(A.newMachine()),\n  download: () => dispatch(A.downloadMachine()),\n  upload: () => dispatch(A.uploadMachine()),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(AppControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport classNames from 'classnames';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { tapeEntries, focusedTapeCell, CELL_WIDTH, VISIBLE_CELL_COUNT } from '../state-mgmt/Tape';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport './Tape.css';\n\nexport interface TapeProps {\n  entries: string[];\n  isEditable: boolean;\n  focusedCell: null | number;\n  changeCell: (pos: number, value: string) => void;\n  updateScrollLeft: (scrollLeft: number) => void;\n  focusCell: (pos: number) => void;\n  clear: () => void;\n}\n\nclass Tape extends React.Component<TapeProps> {\n  private tapeRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  render() {\n    const { isEditable } = this.props;\n\n    const cellClassName = classNames('tape__cell', {\n      'tape__cell--editable': isEditable,\n    });\n\n    const leftPaddingWidth = CELL_WIDTH * VISIBLE_CELL_COUNT / 2;\n\n    return (\n      <>\n        {this.renderReadHead()}\n        <div className=\"tape\"\n             ref={this.tapeRef}\n             onScroll={this.handleScroll}\n             style={{ width: `${CELL_WIDTH * VISIBLE_CELL_COUNT}px` }}>\n          <div className=\"tape__cells\">\n            <div className=\"tape__padding-left\" style={{ width: leftPaddingWidth }}>\n            ⇐&ensp;this half intentionally left blank\n            </div>\n            {this.props.entries.map((l, i) => (\n              <input key={i}\n                     disabled={!this.props.isEditable}\n                     className={cellClassName}\n                     value={l}\n                     placeholder=\"∅\"\n                     onChange={this.handleCellChange(i)}\n                     onFocus={this.handleCellFocus(i)}\n                     style={{ width: `${CELL_WIDTH}px` }}\n                     type=\"text\"\n                     maxLength={1} />\n            ))}\n            <div className=\"tape__padding-right\" style={{ width: `${CELL_WIDTH / 2}px` }} />\n          </div>\n        </div>\n        {this.renderFeeders()}\n        {this.renderClearButton()}\n      </>\n    );\n  }\n\n  componentDidMount() {\n    if (this.tapeRef.current) {\n      this.tapeRef.current.scrollTo(CELL_WIDTH / 2, 0);\n    }\n  }\n\n  componentDidUpdate(oldProps: TapeProps) {\n    if (oldProps.focusedCell !== this.props.focusedCell && this.props.focusedCell !== null) {\n      this.updateFocus();\n    }\n  }\n\n  // After typing a character, we move the focus to the next available cell.\n  // This allows a user to use the tape almost like a normal text input.\n  private updateFocus() {\n    if (this.tapeRef.current) {\n      const cellContainer = this.tapeRef.current.childNodes[0];\n      const cellToFocus = cellContainer.childNodes[this.props.focusedCell as number + 1];\n      if (cellToFocus) (cellToFocus as HTMLInputElement).focus();\n    }\n  }\n\n  private handleCellChange(pos: number) {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      // We don't allow the user to input spaces, since they appear identical to\n      // the empty string and therefore create a lot of confusion.\n      if (e.target.value === ' ') return;\n      this.props.changeCell(pos, e.target.value);\n    };\n  }\n\n  private handleCellFocus(pos: number) {\n    return () => {\n      this.props.focusCell(pos);\n    };\n  }\n\n  private handleScroll = (e: any) => {\n    this.props.updateScrollLeft(e.target.scrollLeft);\n  };\n\n  private handleClearButtonClick = () => {\n    this.props.clear();\n  };\n\n  // The read head and feeders exist entirely for aesthetic reasons; they are\n  // also unfortunately complicated-looking, due to the fact that they must be\n  // positioned outside of the tape itself. For these reasons, I've relegated\n  // them to these separate definitions.\n  private renderReadHead() {\n    const className = classNames('tape-reader', {\n      'tape-reader--active': !this.props.isEditable,\n    });\n    return (\n      <div className={className}\n           style={{\n             position: 'absolute',\n             left: `calc(50% - ${CELL_WIDTH / 2}px)`,\n           }} />\n    );\n  }\n\n  private renderClearButton() {\n    return (\n      <button className=\"tape__clear-button\"\n              title=\"clear tape contents\"\n              onClick={this.handleClearButtonClick}\n              style={{\n                position: 'absolute',\n                right: `calc(50% - ${CELL_WIDTH * VISIBLE_CELL_COUNT / 2 + 70}px)`,\n              }} />\n    );\n  }\n\n  private renderFeeders() {\n    const FEEDER_WIDTH = 12;\n    return (\n      <>\n        <div className=\"tape-feed tape-feed__left\"\n             style={{\n               position: 'absolute',\n               left: `calc(50% - ${CELL_WIDTH * VISIBLE_CELL_COUNT / 2 + FEEDER_WIDTH / 2}px)`,\n             }} />\n        <div className=\"tape-feed tape-feed__right\"\n             style={{\n               position: 'absolute',\n               right: `calc(50% - ${CELL_WIDTH * VISIBLE_CELL_COUNT / 2 + FEEDER_WIDTH / 2}px)`,\n             }} />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({\n  entries: tapeEntries(state),\n  isEditable: isInEditMode(state),\n  focusedCell: focusedTapeCell(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  changeCell: (pos: number, value: string) => dispatch(A.changeTapeCell(pos, value)),\n  updateScrollLeft: (scrollLeft: number) => dispatch(A.updateScrollLeft(scrollLeft)),\n  focusCell: (pos: number) => dispatch(A.focusTapeCell(pos)),\n  clear: () => dispatch(A.clearTape()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Tape);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport './SimControls.css';\n\nexport interface SimControlsProps {\n  reset: () => void;\n  pause: () => void;\n  step: () => void;\n  play: () => void;\n  isInEditMode: boolean;\n}\n\nclass SimControls extends React.Component<SimControlsProps> {\n  render() {\n    const { isInEditMode } = this.props;\n    return (\n      <div className=\"sim-controls\">\n        <button onClick={this.reset}>\n          Reset\n        </button>\n        <button onClick={this.togglePlayPause}>\n          {isInEditMode ? 'Play' : 'Pause'}\n        </button>\n        <button disabled={!isInEditMode}\n                onClick={this.step}>\n          Step\n        </button>\n      </div>\n    );\n  }\n\n  private reset = () => {\n    this.props.reset();\n  };\n\n  private togglePlayPause = () => {\n    if (this.props.isInEditMode) this.props.play();\n    else this.props.pause();\n  };\n\n  private step = () => {\n    this.props.step();\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  isInEditMode: isInEditMode(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  reset: () => dispatch(A.resetSim()),\n  pause: () => dispatch(A.pauseSim()),\n  step: () => dispatch(A.stepSim()),\n  play: () => dispatch(A.playSim()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SimControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { machineName } from '../state-mgmt/MetaData';\nimport './NameInput.css';\n\nexport interface NameInputProps {\n  name: string;\n  changeName: (name: string) => void;\n}\n\nclass NameInput extends React.Component<NameInputProps> {\n  render() {\n    return (\n      <input className=\"name-input\"\n             type=\"text\"\n             value={this.props.name}\n             onChange={this.handleNameChange}\n             placeholder=\"Machine name\" />\n    );\n  }\n\n  private handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.changeName(e.target.value);\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  name: machineName(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  changeName: (name: string) => dispatch(A.changeMachineName(name)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NameInput);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { showMessage, messageTitle, messageContent } from '../state-mgmt/Message';\nimport './Message.css';\n\nexport interface MessageProps {\n  show: boolean;\n  title: null | string;\n  content: null | string | JSX.Element;\n  dismiss: () => void;\n}\n\nclass Message extends React.Component<MessageProps> {\n  render() {\n    return this.props.show && (\n      <div className=\"message__container\" onClick={this.dismiss}>\n        <div className=\"message\" onClick={this.handleMessageClick}>\n          <h1 className=\"message__title\">{this.props.title}</h1>\n          <div className=\"message__content\">{this.props.content}</div>\n          <button className=\"message__dismiss-button\"\n                  onClick={this.dismiss}>\n            Dismiss\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  private handleMessageClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  private dismiss = () => {\n    this.props.dismiss();\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  show: showMessage(state),\n  title: messageTitle(state),\n  content: messageContent(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  dismiss: () => dispatch(A.dismissMessage()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Message);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as A from '../state-mgmt/actions';\nimport Canvas from '../Canvas/Canvas';\nimport EditControls from '../EditControls/EditControls';\nimport AppControls from '../AppControls/AppControls';\nimport Tape from '../Tape/Tape';\nimport SimControls from '../SimControls/SimControls';\nimport NameInput from '../NameInput/NameInput';\nimport Message from '../Message/Message';\nimport './App.css';\n\n// The entire app consists of only a few components: a \"canvas\" for displaying\n// the machine state editing UI, the machine's tape, some buttons that perform\n// various editing tasks, and some buttons for starting, pausing, stepping, and\n// resetting the machine.\n\nexport interface AppProps {\n  keyDown: (key: string, event: React.KeyboardEvent) => void;\n  keyUp: (key: string) => void;\n  loadSaved: () => void;\n}\n\nclass App extends React.Component<AppProps> {\n  render() {\n    return (\n      <div className=\"app\">\n        <Canvas />\n        <NameInput />\n        <Tape />\n        <EditControls />\n        <AppControls />\n        <SimControls />\n        <Message />\n      </div>\n    );\n  }\n\n  // We add the keyboard listeners to the document so that the user does not\n  // need to focus any element before keypresses can be recorded.\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown as unknown as EventListener);\n    document.addEventListener('keyup', this.handleKeyUp as unknown as EventListener);\n    this.props.loadSaved();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown as unknown as EventListener);\n    document.removeEventListener('keyup', this.handleKeyUp as unknown as EventListener);\n  }\n\n  private handleKeyDown = (e: React.KeyboardEvent) => {\n    this.props.keyDown(e.key, e);\n  };\n\n  private handleKeyUp = (e: React.KeyboardEvent) => {\n    this.props.keyUp(e.key);\n  };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  keyDown: (key: string, event: React.KeyboardEvent) => dispatch(A.keyDown(key, event)),\n  keyUp: (key: string) => dispatch(A.keyUp(key)),\n  loadSaved: () => dispatch(A.loadSnapshot()),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './state-mgmt/store';\nimport App from './App/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}