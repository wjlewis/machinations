{"version":3,"sources":["state-mgmt/actions.ts","state-mgmt/auxiliary.ts","tools/auxiliary.ts","tools/Vector.ts","state-mgmt/Mode.ts","state-mgmt/UI.ts","state-mgmt/Node.ts","state-mgmt/Arrow.ts","state-mgmt/ControlPoint.ts","state-mgmt/Tape.ts","state-mgmt/TransitionDetail.ts","state-mgmt/UndoRedo.ts","state-mgmt/Message.ts","state-mgmt/Sim.ts","state-mgmt/state.ts","state-mgmt/reducer.ts","state-mgmt/middleware/keyboardShortcuts.ts","ErrorReport/ErrorReport.tsx","ErrorReport/MissingStartState.tsx","ErrorReport/NondeterministicTransition.tsx","HaltReport/HaltReport.tsx","HaltReport/Accept.tsx","HaltReport/Reject.tsx","state-mgmt/saga.ts","state-mgmt/store.ts","state-mgmt/middleware/addTransition.ts","state-mgmt/middleware/deleteTransitionDetail.ts","state-mgmt/middleware/deleteNode.ts","state-mgmt/middleware/validateTransitionDetails.ts","state-mgmt/middleware/validatePreSim.ts","state-mgmt/middleware/halt.ts","Arrow/Arrow.tsx","Node/Node.tsx","ControlPoint/ControlPoint.tsx","TransitionDetail/TransitionDetail.tsx","TransitionDetails/TransitionDetails.tsx","ShadowNode/ShadowNode.tsx","Canvas/Canvas.tsx","state-mgmt/EditControls.ts","EditControls/EditControls.tsx","AppControls/AppControls.tsx","Tape/Tape.tsx","SimControls/SimControls.tsx","Message/Message.tsx","App/App.tsx","index.tsx"],"names":["addTransitionDetail","arrow","type","payload","moveTape","direction","writeTapeSymbol","symbol","deleteEntities","nodes","arrows","controlPoints","transitionDetails","displayMessage","title","content","STEP_SIM","PLAY_SIM","PAUSE_SIM","RESET_SIM","setCurrentState","id","setActiveNode","setActiveTransitionDetail","setActiveControlPoint","setActiveArrow","HALT_ACCEPT","haltAccept","HALT_REJECT","haltReject","switchMode","mode","currentLatest","state","wip","committed","repeat","what","times","res","Array","i","Vector","x","y","Math","sqrt","this","len","magnitude","Error","v","plus","scale","factor","atan2","dot","Modes","EDIT","SIM","initModeState","isInEditMode","modeReducer","action","initUIState","mousePos","keysDown","isMouseDownNode","isMouseDownControlPoint","isAddingNode","wasMouseReleasedOverNode","wasMouseDragged","wasMnemonicChanged","ui","isMultiselect","includes","uiReducer","keyDown","key","keyUp","mouseDownNode","mouseUpNode","mouseDownControlPoint","mouseUpControlPoint","mouseDownCanvas","mouseUpCanvas","startAddingNode","addNode","mouseMoveCanvas","pos","changeMnemonic","blurMnemonic","_","uniq","filter","k","allNodes","Object","values","entities","byId","nodeById","node","find","n","isNodeSelected","selected","isNodeFinal","isFinal","selectedNodes","isStartNode","startNode","nodesReducer","addArrow","start","end","makeStartNode","toggleFinalNodes","value","uuid","mnemonic","mergeWith","_1","_2","undefined","ids","omit","merge","map","atLeastOneFinal","some","updated","reduce","acc","xs","offsets","nodeId","minus","moved","keys","updatedPos","allArrows","arrowById","arrowsReducer","allControlPoints","controlPointForArrow","arrowId","cp","controlPointsReducer","mouseUpNodeOrCanvas","startPos","endPos","controlPos","diff","perp","normalize","constructStandardPos","selectedOffset","prepForDirectMove","prepForIndirectMove","fullOffsets","controlPoint","halfOffsets","p","includesStart","includesEnd","fixedPos","movingPos","movingOffset","toCP","cpShadow","project","fractionAlong","perpLength","moveDirect","moveIndirect","fullMoved","halfMoved","newPos","alongDiff","initTapeState","entries","scrollLeft","active","focused","TapeDirections","L","R","tapeEntries","tape","focusedTapeCell","currentReadSymbol","tapeReducer","changeTapeCell","updateScrollLeft","focusTapeCell","clearTape","update","clone","length","updateBlocks","leftPos","cellDiff","floor","slice","every","val","set","allTransitionDetails","allGroupedTransitionDetails","groupBy","detail","transitionDetailsForArrow","duplicateTransitionDetails","duplicates","transitionDetailsByStart","ds","read","group","flattenDeep","focusedDetail","transitionDetailsReducer","changeTransitionDetail","deleteTransitionDetail","focusTransitionDetail","blurTransitionDetail","markDuplicateTransitions","write","move","isFocused","mapValues","isDuplicate","undoRedoReducer","undoRedo","addRecord","undo","actions","record","rest","redoRecord","getSnapshot","revertToSnapshot","redoable","redo","undoRecord","description","get","snapshot","showMessage","message","show","messageTitle","messageContent","messageReducer","dismissMessage","currentState","sim","isNodeActive","activeNode","isArrowActive","activeArrow","isControlPointActive","activeControlPoint","activeTransitionDetail","simReducer","A","resetSim","initState","reducer","keyBindings","st","e","ctrlKey","preventDefault","metaKey","ErrorReport","className","props","whatsWrong","howToFix","React","Component","HaltReport","wasSuccess","accepted","play","playSim","makeStep","saga","singleStep","fork","playTask","take","cancel","put","select","current","readSymbol","availableTransitionInfo","transitionInfo","interval","delay","endId","controlPointId","transitionDetailId","writeSymbol","tapeDirection","outgoing","arrowsForStart","flatten","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","api","next","getState","event","keyHandler","altAction","existingArrow","startId","a","arrowForEndpoints","nodeIds","arrowsForNode","arrowIds","controlPointIds","transitionDetailIds","hasStartNode","NondeterministicTransition","MissingStartState","Accept","Reject","run","Arrow","classNames","isEditable","isActive","pathString","isSelfLoop","computeCubicPathString","computeQuadraticPathString","d","control","mid","bezierControl","v1","v2","ctrl1","ctrl2","connect","ownProps","details","Node","handleMouseDown","mouseDown","handleMouseUp","mouseUp","handleInputChange","evt","target","handleInputBlur","isSelected","isStart","mnemonicClassName","mnemonicPos","NODE_RADIUS","onMouseDown","onMouseUp","style","position","left","top","disabled","onChange","onBlur","maxLength","dispatch","ControlPoint","computeCubicString","p1","p2","tip","ARROW_LENGTH","TransitionDetail","readRef","createRef","handleSelectChange","changeDirection","selectLeft","selectRight","handleFocus","onFocus","handleBlur","handleDeleteClick","onDelete","inputClassName","readInputClassName","selectorClassName","ref","placeholder","onClick","focus","property","TransitionDetails","handleDetailChange","changeDetail","stance","computeStance","isTopStance","renderAddDetailButton","activeDetail","handleDetailDelete","handleDetailFocus","handleDetailBlur","deleteDetail","focusDetail","blurDetail","addDetail","computeSelfLoopStance","computeStandardStance","theta","angle","computeClassNameFromAngle","PI","anchor","test","handleAddDetailButton","ShadowNode","add","isVisible","Canvas","computeMousePos","handleMouseMove","mouseMove","onMouseMove","xmlns","width","height","currentTarget","getBoundingClientRect","clientX","clientY","whichButtonTypes","EditButtonTypes","ADD_STATE","REMOVE_STATE","ADD_SELF_TRANSITION","MAKE_START","TOGGLE_ACCEPTING","REMOVE_TWO_STATES","ADD_TRANSITION","TOGGLE_TWO_ACCEPTING","REMOVE_MANY_STATES","TOGGLE_MANY_ACCEPTING","UNMAKE_START","EditControls","handleUndoButtonClick","handleRedoButtonClick","buttonConfig","addState","removeStates","addTransition","makeStart","toggleFinal","inEditMode","buttonTypes","config","AppControls","href","rel","Tape","tapeRef","handleScroll","handleClearButtonClick","clear","cellClassName","renderReadHead","onScroll","CELL_WIDTH","l","handleCellChange","handleCellFocus","renderFeeders","renderClearButton","scrollTo","oldProps","focusedCell","updateFocus","cellToFocus","childNodes","changeCell","focusCell","right","SimControls","reset","togglePlayPause","pause","step","Message","handleMessageClick","stopPropagation","dismiss","App","handleKeyDown","handleKeyUp","document","addEventListener","removeEventListener","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fdced9c3.chunk.js","sourcesContent":["import Vector from '../tools/Vector';\nimport { TransitionDetail as TransitionDetailInfo } from './TransitionDetail';\nimport { Mode } from './Mode';\n\n// Many actions are specific to a particular part of the state (e.g. to nodes,\n// or arrows), and I've grouped these for easy access. However, a number of\n// actions are more general; these I've placed at the bottom of the file.\n\nexport interface Action {\n  type: string;\n  payload?: any;\n}\n\n// Node actions:\nexport const MOUSE_DOWN_NODE = 'MOUSE_DOWN_NODE';\nexport const mouseDownNode = (id: string): Action => ({\n  type: MOUSE_DOWN_NODE,\n  payload: { id },\n});\n\nexport const MOUSE_UP_NODE = 'MOUSE_UP_NODE';\nexport const mouseUpNode = (): Action => ({\n  type: MOUSE_UP_NODE,\n});\n\n// We have 2 actions related to adding a node instead of one: the first\n// indicates that the user is in the process of adding a node, but has not yet\n// fixed its placement on the screen; the second indicates that the node should\n// be added at a particular location -- where the user has clicked.\nexport const START_ADDING_NODE = 'START_ADDING_NODE';\nexport const startAddingNode = (): Action => ({\n  type: START_ADDING_NODE,\n});\n\nexport const ADD_NODE = 'ADD_NODE';\nexport const addNode = (pos: Vector): Action => ({\n  type: ADD_NODE,\n  payload: { pos },\n});\n\nexport const CHANGE_MNEMONIC = 'CHANGE_MNEMONIC';\nexport const changeMnemonic = (id: string, value: string): Action => ({\n  type: CHANGE_MNEMONIC,\n  payload: { id, value },\n});\n\nexport const BLUR_MNEMONIC = 'BLUR_MNEMONIC';\nexport const blurMnemonic = (): Action => ({\n  type: BLUR_MNEMONIC,\n});\n\nexport const DELETE_SELECTED_NODES = 'DELETE_SELECTED_NODES';\nexport const deleteSelectedNodes = (): Action => ({\n  type: DELETE_SELECTED_NODES,\n});\n\nexport const MAKE_SELECTED_START_NODE = 'MAKE_SELECTED_START_NODE';\nexport const makeSelectedStartNode = (): Action => ({\n  type: MAKE_SELECTED_START_NODE,\n});\n\nexport const TOGGLE_SELECTED_FINAL_NODES = 'TOGGLE_SELECTED_FINAL_NODES';\nexport const toggleSelectedFinalNodes = (): Action => ({\n  type: TOGGLE_SELECTED_FINAL_NODES,\n});\n\n// Arrow actions:\n// We include the arrow's ID as part of the payload because when we create a new\n// arrow, we also create a control point and transition detail for it as well\n// (and these require the arrow's ID).\nexport const ADD_ARROW = 'ADD_ARROW';\nexport const addArrow = (start: string, end: string, id: string): Action => ({\n  type: ADD_ARROW,\n  payload: { start, end, id },\n});\n\n// Control point actions:\nexport const MOUSE_DOWN_CONTROL_POINT = 'MOUSE_DOWN_CONTROL_POINT';\nexport const mouseDownControlPoint = (id: string): Action => ({\n  type: MOUSE_DOWN_CONTROL_POINT,\n  payload: { id },\n});\n\nexport const MOUSE_UP_CONTROL_POINT = 'MOUSE_UP_CONTROL_POINT';\nexport const mouseUpControlPoint = (): Action => ({\n  type: MOUSE_UP_CONTROL_POINT,\n});\n\n// Transition-detail actions:\nexport const CHANGE_TRANSITION_DETAIL = 'CHANGE_TRANSITION_DETAIL';\nexport const changeTransitionDetail = (detail: TransitionDetailInfo): Action => ({\n  type: CHANGE_TRANSITION_DETAIL,\n  payload: { detail },\n});\n\nexport const ADD_TRANSITION_DETAIL = 'ADD_TRANSITION_DETAIL';\nexport const addTransitionDetail = (arrow: string): Action => ({\n  type: ADD_TRANSITION_DETAIL,\n  payload: { arrow },\n});\n\nexport const DELETE_TRANSITION_DETAIL = 'DELETE_TRANSITION_DETAIL';\nexport const deleteTransitionDetail = (id: string, arrow: string): Action => ({\n  type: DELETE_TRANSITION_DETAIL,\n  payload: { id, arrow },\n});\n\nexport const FOCUS_TRANSITION_DETAIL = 'FOCUS_TRANSIITON_DETAIL';\nexport const focusTransitionDetail = (id: string): Action => ({\n  type: FOCUS_TRANSITION_DETAIL,\n  payload: { id },\n});\n\nexport const BLUR_TRANSITION_DETAIL = 'BLUR_TRANSITION_DETAIL';\nexport const blurTransitionDetail = (id: string): Action => ({\n  type: BLUR_TRANSITION_DETAIL,\n  payload: { id },\n});\n\nexport const MARK_DUPLICATE_TRANSITIONS = 'MARK_DUPLICATE_TRANSITIONS';\nexport const markDuplicateTransitions = (ids: string[]): Action => ({\n  type: MARK_DUPLICATE_TRANSITIONS,\n  payload: { ids },\n});\n\n// Tape actions:\nexport const CHANGE_TAPE_CELL = 'CHANGE_TAPE_CELL';\nexport const changeTapeCell = (pos: number, value: string): Action => ({\n  type: CHANGE_TAPE_CELL,\n  payload: { pos, value },\n});\n\nexport const CLEAR_TAPE = 'CLEAR_TAPE';\nexport const clearTape = (): Action => ({\n  type: CLEAR_TAPE,\n});\n\nexport const UPDATE_SCROLL_LEFT = 'UPDATE_SCROLL_LEFT';\nexport const updateScrollLeft = (scrollLeft: number): Action => ({\n  type: UPDATE_SCROLL_LEFT,\n  payload: { scrollLeft },\n});\n\nexport const FOCUS_TAPE_CELL = 'FOCUS_TAPE_CELL';\nexport const focusTapeCell = (pos: number): Action => ({\n  type: FOCUS_TAPE_CELL,\n  payload: { pos },\n});\n\nexport const MOVE_TAPE = 'MOVE_TAPE';\nexport const moveTape = (direction: 'L' | 'R'): Action => ({\n  type: MOVE_TAPE,\n  payload: { direction },\n});\n\nexport const WRITE_TAPE_SYMBOL = 'WRITE_TAPE_SYMBOL';\nexport const writeTapeSymbol = (symbol: string): Action => ({\n  type: WRITE_TAPE_SYMBOL,\n  payload: { symbol },\n});\n\n// Canvas and UI actions:\nexport const MOUSE_DOWN_CANVAS = 'MOUSE_DOWN_CANVAS';\nexport const mouseDownCanvas = (pos: Vector): Action => ({\n  type: MOUSE_DOWN_CANVAS,\n  payload: { pos },\n});\n\nexport const MOUSE_UP_CANVAS = 'MOUSE_UP_CANVAS';\nexport const mouseUpCanvas = (): Action => ({\n  type: MOUSE_UP_CANVAS,\n});\n\nexport const MOUSE_MOVE_CANVAS = 'MOUSE_MOVE_CANVAS';\nexport const mouseMoveCanvas = (pos: Vector): Action => ({\n  type: MOUSE_MOVE_CANVAS,\n  payload: { pos },\n});\n\nexport const KEY_DOWN = 'KEY_DOWN';\nexport const keyDown = (key: string, event: React.KeyboardEvent): Action => ({\n  type: KEY_DOWN,\n  payload: { key, event },\n});\n\nexport const KEY_UP = 'KEY_UP';\nexport const keyUp = (key: string): Action => ({\n  type: KEY_UP,\n  payload: { key },\n});\n\n// General actions:\nexport const ADD_TRANSITION_BETWEEN_SELECTED = 'ADD_TRANSITION_BETWEEN_SELECTED';\nexport const addTransitionBetweenSelected = (): Action => ({\n  type: ADD_TRANSITION_BETWEEN_SELECTED,\n});\n\nexport const DELETE_ENTITIES = 'DELETE_ENTITIES';\nexport const deleteEntities = (nodes: string[], arrows: string[], controlPoints: string[], transitionDetails: string[]): Action => ({\n  type: DELETE_ENTITIES,\n  payload: { nodes, arrows, controlPoints, transitionDetails },\n});\n\nexport const UNDO = 'UNDO';\nexport const undo = (): Action => ({\n  type: UNDO,\n});\n\nexport const REDO = 'REDO';\nexport const redo = (): Action => ({\n  type: REDO,\n});\n\nexport const DISPLAY_MESSAGE = 'DISPLAY_MESSAGE';\nexport const displayMessage = (title: string, content?: string | JSX.Element): Action => ({\n  type: DISPLAY_MESSAGE,\n  payload: { title, content },\n});\n\nexport const DISMISS_MESSAGE = 'DISMISS_MESSAGE';\nexport const dismissMessage = (): Action => ({\n  type: DISMISS_MESSAGE,\n});\n\n// Simulation actions:\nexport const STEP_SIM = 'STEP_SIM';\nexport const stepSim = (): Action => ({\n  type: STEP_SIM,\n});\n\nexport const PLAY_SIM = 'PLAY_SIM';\nexport const playSim = (): Action => ({\n  type: PLAY_SIM,\n});\n\nexport const PAUSE_SIM = 'PAUSE_SIM';\nexport const pauseSim = (): Action => ({\n  type: PAUSE_SIM,\n});\n\nexport const RESET_SIM = 'RESET_SIM';\nexport const resetSim = (): Action => ({\n  type: RESET_SIM,\n});\n\nexport const SET_CURRENT_STATE = 'SET_CURRENT_STATE';\nexport const setCurrentState = (id: string): Action => ({\n  type: SET_CURRENT_STATE,\n  payload: { id },\n});\n\nexport const SET_ACTIVE_NODE = 'SET_ACTIVE_NODE';\nexport const setActiveNode = (id: null | string): Action => ({\n  type: SET_ACTIVE_NODE,\n  payload: { id },\n});\n\nexport const SET_ACTIVE_TRANSITION_DETAIL = 'SET_ACTIVE_TRANSITION_DETAIL';\nexport const setActiveTransitionDetail = (id: null | string): Action => ({\n  type: SET_ACTIVE_TRANSITION_DETAIL,\n  payload: { id },\n});\n\nexport const SET_ACTIVE_CONTROL_POINT = 'SET_ACTIVE_CONTROL_POINT';\nexport const setActiveControlPoint = (id: null | string): Action => ({\n  type: SET_ACTIVE_CONTROL_POINT,\n  payload: { id },\n});\n\nexport const SET_ACTIVE_ARROW = 'SET_ACTIVE_ARROW';\nexport const setActiveArrow = (id: null | string): Action => ({\n  type: SET_ACTIVE_ARROW,\n  payload: { id },\n});\n\nexport const HALT_ACCEPT = 'HALT_ACCEPT';\nexport const haltAccept = (): Action => ({\n  type: HALT_ACCEPT,\n});\n\nexport const HALT_REJECT = 'HALT_REJECT';\nexport const haltReject = (): Action => ({\n  type: HALT_REJECT,\n});\n\n// Mode actions:\nexport const SWITCH_MODE = 'SWITCH_MODE';\nexport const switchMode = (mode: Mode): Action => ({\n  type: SWITCH_MODE,\n  payload: { mode },\n});\n","// This file contains state-management functions and type definitions that are\n// general-purpose enough to be useful in a number of places.\n\n// In many cases, we choose to maintain not one but TWO intances of some part of\n// the state. Here is an example illustrating why: suppose we move a node from\n// one position to another. On the one hand, we need the current node position\n// to be maintained in the state so that we can display it properly. On the\n// other hand, we don't want to replace its previous (pre-move) position,\n// because this information is useful for undo/redo purposes. Our solution is to\n// maintain a \"work-in-progress\" (wip) state for these transient changes, and a\n// \"committed\" state that always contains the last meaningful snapshot of the\n// state.\nexport interface Transient<A> {\n  wip: null | A;\n  committed: A;\n}\n\n// The wip state, if it is non-null, is always more up-to-date than the last\n// commit. If the wip state is nonexistent, we simply fall back on the last\n// commit.\nexport const currentLatest = <A>(state: Transient<A>): A => (\n  state.wip || state.committed\n);\n\n// This interface represents any type that has a string ID (e.g. any of the\n// \"entities\" in our application state).\nexport interface IDAble {\n  id: string;\n}\n","// This file contains a number of functions that are useful for performing\n// various tasks, and are general enough not to be included alongside any of\n// their uses.\n\n// If x is a member of the Array, remove it; otherwise, add it.\nexport const mod2Include = <A>(x: A, xs: A[]): A[] => (\n  xs.includes(x) ? xs.filter(y => y !== x) : [...xs, x]\n);\n\n// X xOr Y is true if either X or Y is true, but not both.\nexport const xOr = (x: boolean, y: boolean): boolean => (\n  (x || y) && !(x && y)\n);\n\n// repeat(what, times) constructs an Array containing \"what\" repeated \"times\"\n// times.\nexport const repeat = <A>(what: A, times: number): A[] => {\n  const res = new Array(times);\n  for (let i = 0; i < times; i++) {\n    res[i] = what;\n  }\n  return res;\n};\n","// Much of the work in rendering the components in this app can be reduced by\n// expressing positions and operations in vector form. This class provides all\n// the functionality we need in this regard in a self-contained package.\n\nclass Vector {\n  constructor(public x: number, public y: number) {}\n\n  // Return the length of this vector.\n  magnitude() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  // Return a unit vector that shares this vector's direction\n  normalize() {\n    const len = this.magnitude();\n    if (len === 0) {\n      throw new Error('Cannot normalize 0 vector');\n    }\n    return new Vector(this.x / len, this.y / len);\n  }\n\n  // Return a vector perpendicular to this vector (with the same length). NOTE:\n  // this effectively rotates the vector 90 deg clockwise.\n  perp() {\n    return new Vector(-this.y, this.x);\n  }\n\n  // Return the sum of this vector and the input.\n  plus(v: Vector) {\n    return new Vector(this.x + v.x, this.y + v.y);\n  }\n\n  // Return the difference between this vector and the input.\n  minus(v: Vector) {\n    return this.plus(v.scale(-1));\n  }\n\n  // Scale this vector by the specified amount.\n  scale(factor: number) {\n    return new Vector(factor * this.x, factor * this.y);\n  }\n\n  // Return this vector's angle.\n  angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  // Project this vector onto the input vector.\n  project(v: Vector) {\n    return v.scale(this.dot(v) / v.dot(v));\n  }\n\n  // Return the dot product of this vector and the input vector.\n  dot(v: Vector) {\n    return this.x * v.x + this.y * v.y;\n  }\n}\n\nexport default Vector;\n","import { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\n\nexport interface ModeState {\n  mode: Mode;\n}\n\nexport type Mode = 'EDIT' | 'SIM';\n\nexport const Modes: { [key: string]: Mode } = {\n  EDIT: 'EDIT',\n  SIM: 'SIM',\n};\n\nexport const initModeState: ModeState = {\n  mode: Modes.EDIT,\n};\n\n// Test if we are currently in edit mode:\nexport const isInEditMode = (state: State): boolean => state.mode.mode === Modes.EDIT;\n\nexport const modeReducer = (state: State, action: Action): ModeState => {\n  switch (action.type) {\n    case A.SWITCH_MODE:\n      return switchMode(state, action.payload.mode);\n    default:\n      return state.mode;\n  }\n};\n\nconst switchMode = (state: State, mode: Mode): ModeState => ({\n  ...state.mode,\n  mode,\n});\n","import _ from 'lodash';\nimport { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport Vector from '../tools/Vector';\nimport { isInEditMode } from './Mode';\n\n// The UI state is fairly self-explanatory: it consists of miscellaneous tidbits\n// of information regarding where the mouse is, what keys are pressed, etc.\n\nexport interface UIState {\n  mousePos: Vector;\n  keysDown: string[];\n  isMouseDownNode: boolean;\n  isMouseDownControlPoint: boolean;\n  isAddingNode: boolean;\n  wasMouseReleasedOverNode: boolean;\n  wasMouseDragged: boolean;\n  wasMnemonicChanged: boolean;\n}\n\nexport const initUIState: UIState = {\n  mousePos: new Vector(0, 0),\n  keysDown: [],\n  isMouseDownNode: false,\n  isMouseDownControlPoint: false,\n  isAddingNode: false,\n  wasMouseReleasedOverNode: false,\n  wasMouseDragged: false,\n  wasMnemonicChanged: false,\n};\n\n// Return the current mouse position.\nexport const mousePos = (state: State): Vector => state.ui.mousePos;\n\n// Test if we are currently in \"multiselect\" mode.\nexport const isMultiselect = (state: State): boolean => state.ui.keysDown.includes('Shift');\n\n// Test if the mouse is currently pressed over a node.\nexport const isMouseDownNode = (state: State): boolean => state.ui.isMouseDownNode;\n\n// Test if the mouse is current pressed over a control point.\nexport const isMouseDownControlPoint = (state: State): boolean => state.ui.isMouseDownControlPoint;\n\n// Test if we are in the process of adding a node.\nexport const isAddingNode = (state: State): boolean => state.ui.isAddingNode;\n\nexport const wasMouseReleasedOverNode = (state: State): boolean => state.ui.wasMouseReleasedOverNode;\n\nexport const wasMouseDragged = (state: State): boolean => state.ui.wasMouseDragged;\n\nexport const wasMnemonicChanged = (state: State): boolean => state.ui.wasMnemonicChanged;\n\nexport const uiReducer = (state: State, action: Action): UIState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.KEY_DOWN:\n        return keyDown(state, action.payload.key);\n      case A.KEY_UP:\n        return keyUp(state, action.payload.key);\n      case A.MOUSE_DOWN_NODE:\n        return mouseDownNode(state);\n      case A.MOUSE_UP_NODE:\n        return mouseUpNode(state);\n      case A.MOUSE_DOWN_CONTROL_POINT:\n        return mouseDownControlPoint(state);\n      case A.MOUSE_UP_CONTROL_POINT:\n        return mouseUpControlPoint(state);\n      case A.MOUSE_DOWN_CANVAS:\n        return mouseDownCanvas(state);\n      case A.MOUSE_UP_CANVAS:\n        return mouseUpCanvas(state);\n      case A.START_ADDING_NODE:\n        return startAddingNode(state);\n      case A.ADD_NODE:\n        return addNode(state);\n      case A.MOUSE_MOVE_CANVAS:\n        return mouseMoveCanvas(state, action.payload.pos);\n      case A.CHANGE_MNEMONIC:\n        return changeMnemonic(state);\n      case A.BLUR_MNEMONIC:\n        return blurMnemonic(state);\n      default:\n        return state.ui;\n    }\n  }\n  else {\n    return state.ui;\n  }\n};\n\nconst keyDown = (state: State, key: string): UIState => ({\n  ...state.ui,\n  keysDown: _.uniq([...state.ui.keysDown, key]),\n});\n\nconst keyUp = (state: State, key: string): UIState => ({\n  ...state.ui,\n  keysDown: state.ui.keysDown.filter(k => k !== key),\n});\n\nconst mouseDownNode = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownNode: true,\n});\n\nconst mouseUpNode = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownNode: false,\n  wasMouseReleasedOverNode: true,\n});\n\nconst mouseDownControlPoint = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownControlPoint: true,\n});\n\nconst mouseUpControlPoint = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownControlPoint: false,\n});\n\nconst mouseDownCanvas = (state: State): UIState => ({\n  ...state.ui,\n  wasMouseDragged: false,\n});\n\nconst mouseUpCanvas = (state: State): UIState => ({\n  ...state.ui,\n  isMouseDownNode: false,\n  isMouseDownControlPoint: false,\n  wasMouseReleasedOverNode: false,\n});\n\nconst startAddingNode = (state: State): UIState => ({\n  ...state.ui,\n  isAddingNode: true,\n});\n\nconst addNode = (state: State): UIState => ({\n  ...state.ui,\n  isAddingNode: false,\n  wasMouseReleasedOverNode: true,\n});\n\nconst mouseMoveCanvas = (state: State, pos: Vector): UIState => ({\n  ...state.ui,\n  mousePos: pos,\n  wasMouseDragged: true,\n});\n\nconst changeMnemonic = (state: State): UIState => ({\n  ...state.ui,\n  wasMnemonicChanged: true,\n});\n\nconst blurMnemonic = (state: State): UIState => ({\n  ...state.ui,\n  wasMnemonicChanged: false,\n});\n","import _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { Transient, currentLatest } from './auxiliary';\nimport { State } from './state';\nimport Vector from '../tools/Vector';\nimport { mod2Include } from '../tools/auxiliary';\nimport { isMultiselect, isMouseDownNode, wasMouseReleasedOverNode } from './UI';\nimport { isInEditMode } from './Mode';\n\n// A node represents a machine state in the TM formalism. Each node is\n// draggable, and may come in several different varieties (it may be the start\n// node, or an accepting/final node).\n\nexport interface NodeState extends Transient<NodeInfo> {}\n\n// The \"selected\" and \"offsets\" properties are used to store information about\n// selected nodes immediately before and during a move. The \"startNode\"\n// corresponds to the start state in the TM formalism.\nexport interface NodeInfo {\n  byId: { [key: string]: Node };\n  selected: string[];\n  offsets: { [key: string]: Vector };\n  startNode: null | string;\n}\n\nexport interface Node {\n  id: string;\n  mnemonic: string;\n  pos: Vector;\n  isFinal: boolean;\n}\n\nexport const initNodeState: NodeState = {\n  wip: null,\n  committed: {\n    byId: {},\n    selected: [],\n    offsets: {},\n    startNode: null,\n  },\n};\n\n// Return an array containing all nodes in existence.\nexport const allNodes = (state: State): Node[] => (\n  Object.values(currentLatest(state.entities.nodes).byId)\n);\n\n// Return the node with the given ID, if one exists.\nexport const nodeById = (state: State, id: string): Node => {\n  const node = allNodes(state).find(n => n.id === id);\n  if (!node) {\n    throw new Error(`No Node with ID \"${id}\"`);\n  }\n  return node;\n};\n\n// Check if the given node is currently selected.\nexport const isNodeSelected = (state: State, id: string): boolean => (\n  currentLatest(state.entities.nodes).selected.includes(id)\n);\n\n// Check if the given node is final (\"accepting\").\nexport const isNodeFinal = (state: State, id: string): boolean => (\n  currentLatest(state.entities.nodes).byId[id].isFinal\n);\n\n// Return an array containing the IDs of all selected nodes.\nexport const selectedNodes = (state: State): string[] => (\n  currentLatest(state.entities.nodes).selected\n);\n\n// Test if the given node is the start node.\nexport const isStartNode = (state: State, id: string): boolean => {\n  const { startNode } = currentLatest(state.entities.nodes);\n  return (startNode !== null) && startNode === id;\n};\n\n// Test if a node has been distinguished as the start state.\nexport const hasStartNode = (state: State): boolean => (\n  currentLatest(state.entities.nodes).startNode !== null\n);\n\nexport const startNode = (state: State): string => {\n  const start = currentLatest(state.entities.nodes).startNode;\n  if (start === null) {\n    throw new Error('No start node has been distinguished.');\n  }\n  return start;\n};\n\nexport const nodesReducer = (state: State, action: Action): NodeState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      // These operations affect the non-positional attributes of a node.\n      case A.ADD_NODE:\n        return addNode(state, action.payload.pos);\n      case A.ADD_ARROW:\n        return addArrow(state, action.payload.start, action.payload.end);\n      case A.DELETE_ENTITIES:\n        return deleteEntities(state, action.payload.nodes);\n      case A.MAKE_SELECTED_START_NODE:\n        return makeStartNode(state);\n      case A.TOGGLE_SELECTED_FINAL_NODES:\n        return toggleFinalNodes(state);\n      case A.CHANGE_MNEMONIC:\n        return changeMnemonic(state, action.payload.id, action.payload.value);\n      case A.BLUR_MNEMONIC:\n        return blurMnemonic(state);\n\n      // These operations deal with movement.\n      case A.MOUSE_DOWN_NODE:\n        return mouseDownNode(state, action.payload.id);\n      case A.MOUSE_UP_NODE:\n        return mouseUpNode(state);\n      case A.MOUSE_DOWN_CANVAS:\n        return mouseDownCanvas(state, action.payload.pos);\n      case A.MOUSE_UP_CANVAS:\n        return mouseUpCanvas(state);\n      case A.MOUSE_MOVE_CANVAS:\n        return mouseMoveCanvas(state, action.payload.pos);\n      default:\n        return state.entities.nodes;\n    }\n  }\n  else {\n    return state.entities.nodes;\n  }\n};\n\n// When a new node is added, we revert to the last committed state, and\n// incorporate a fresh, non-final, mnemonic-free node.\nconst addNode = (state: State, pos: Vector): NodeState => {\n  const id = uuid();\n  const node = { id, pos, mnemonic: '', isFinal: false };\n  return {\n    wip: null,\n    committed: _.mergeWith({}, state.entities.nodes.committed, {\n      byId: {\n        [id]: node,\n      },\n    // We unselect all currently selected nodes, and select the new node:\n    }, (_1, _2, key) => key === 'selected' ? [id] : undefined),\n  };\n};\n\n// Whenever an arrow is added between two distinct nodes, we deselect the nodes.\n// This seems to be a nicer experience than keeping the nodes selected.\nconst addArrow = (state: State, start: string, end: string): NodeState => ({\n  wip: null,\n  committed: {\n    ...state.entities.nodes.committed,\n    selected: start !== end\n      ? []\n      : state.entities.nodes.committed.selected,\n  },\n});\n\nconst deleteEntities = (state: State, ids: string[]): NodeState => {\n  const { committed } = state.entities.nodes;\n  return {\n    wip: null,\n    committed: {\n      ...committed,\n      byId: _.omit(committed.byId, ids),\n      selected: [],\n      startNode: committed.startNode && ids.includes(committed.startNode)\n        ? null\n        : committed.startNode,\n    },\n  };\n};\n\nconst makeStartNode = (state: State): NodeState => ({\n  wip: null,\n  committed: _.merge({}, state.entities.nodes.committed, {\n    startNode: state.entities.nodes.committed.selected[0],\n  }),\n});\n\n// Toggling the \"final\" state of a set of nodes works like this: if ANY of the\n// selected nodes is currently a final node, we change all of the nodes to be\n// NON-final. Otherwise, we change all of them to be final. This correctly\n// subsumes the expected behavior for a single node as well.\nconst toggleFinalNodes = (state: State): NodeState => {\n  const selected = selectedNodes(state).map(id => nodeById(state, id));\n  const atLeastOneFinal = selected.some(node => node.isFinal);\n  const updated = selected.reduce((acc, x) => ({\n    ...acc,\n    [x.id]: { ...x, isFinal: !atLeastOneFinal },\n  }), {});\n\n  return {\n    wip: null,\n    committed: _.merge({}, state.entities.nodes.committed, {\n      byId: {\n        ...updated,\n      },\n    }),\n  };\n};\n\nconst changeMnemonic = (state: State, id: string, value: string): NodeState => ({\n  ...state.entities.nodes,\n  wip: _.merge({}, currentLatest(state.entities.nodes), {\n    byId: {\n      [id]: { mnemonic: value }\n    },\n  }),\n});\n\nconst blurMnemonic = (state: State): NodeState => ({\n  wip: null,\n  committed: currentLatest(state.entities.nodes),\n});\n\n// When the user presses the mouse over a node, we update the selection as\n// follows: if we are in \"multiselect\" mode, we add the node to the current\n// selection if it is not a member, and remove it if it is; otherwise, if the\n// current selection includes the node, we keep the current selection, and if it\n// doesn't, we throw out the current selection in favor of the clicked node.\n// This may seem complicated, or contrived, but it results in a fairly intuitive\n// behavior.\nconst mouseDownNode = (state: State, id: string): NodeState => {\n  const { nodes } = state.entities;\n  const { selected } = nodes.committed;\n  return {\n    wip: null,\n    committed: {\n      ...nodes.committed,\n      selected: isMultiselect(state)\n        ? mod2Include(id, selected)\n        : selected.includes(id) ? selected : [id],\n    },\n  };\n};\n\n// When the user releases the mouse over a Node, we replace the committed state\n// with the wip state (to account for any movement that may have occurred). We\n// also clear any offsets that may have been computed in preparation for a move.\nconst mouseUpNode = (state: State): NodeState => ({\n  wip: null,\n  committed: {\n    ...currentLatest(state.entities.nodes),\n    offsets: {},\n  },\n});\n\n// If the user has pressed the mouse over a node, this press is also received by\n// the canvas. In this case, we prepare for any movement by computing offsets\n// for each of the selected nodes.\nconst mouseDownCanvas = (state: State, mousePos: Vector): NodeState => {\n  if (!isMouseDownNode(state)) return state.entities.nodes;\n\n  const { nodes } = state.entities;\n  const offsets = nodes.committed.selected.reduce((acc, nodeId) => {\n    const node = nodes.committed.byId[nodeId];\n    return {\n      ...acc,\n      [nodeId]: node.pos.minus(mousePos),\n    };\n  }, {});\n\n  return {\n    ...nodes,\n    wip: {\n      ...nodes.committed,\n      offsets,\n    },\n  };\n};\n\n// When the mouse is released over the canvas, we deselect any selected nodes,\n// and revert to the last committed state. We can be assured that the mouse was\n// NOT released over a node, since we stopped the event from propagating in the\n// node component.\nconst mouseUpCanvas = (state: State): NodeState => (\n  wasMouseReleasedOverNode(state)\n  ? state.entities.nodes\n  : {\n    wip: null,\n    committed: {\n      ...state.entities.nodes.committed,\n      selected: [],\n    },\n  }\n);\n\n// If the mouse is moved while it is down over a node, we update all of the\n// selected nodes in the WIP state using the offsets computed when the mouse was\n// initially pressed down.\nconst mouseMoveCanvas = (state: State, mousePos: Vector): NodeState => {\n  const { nodes } = state.entities;\n\n  if (!isMouseDownNode(state) || !nodes.wip) return nodes;\n\n  // We computed each offset as the difference between the node's position and\n  // the mouse position (i.e. offset = node - mouse). Thus, to compute the new\n  // node position, we add the mouse position and the offset:\n  const moved = Object.keys(nodes.wip.offsets).reduce((acc, id) => {\n    const node = nodes.wip!.byId[id];\n    const updatedPos = mousePos.plus(nodes.wip!.offsets[id]);\n    return {\n      ...acc,\n      [id]: { ...node, pos: updatedPos },\n    };\n  }, {});\n\n  return _.merge({}, nodes, {\n    wip: {\n      byId: {\n        ...moved,\n      },\n    },\n  });\n};\n","import _ from 'lodash';\nimport { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { isInEditMode } from './Mode';\n\n// An arrow represents one or more transitions between two states in the\n// machine. Therefore, we can describe them using the IDs of their start and end\n// nodes (along with their own unique ID). For the most part, arrows are\n// passive: they are drawn entirely according to the positions of their start\n// and end nodes, along with their control point.\n\nexport interface ArrowState {\n  byId: { [key: string]: Arrow };\n}\n\nexport interface Arrow {\n  id: string;\n  start: string;\n  end: string;\n}\n\nexport const initArrowState: ArrowState = {\n  byId: {},\n};\n\n// Return an array containing all arrows in existence.\nexport const allArrows = (state: State): Arrow[] => (\n  Object.values(state.entities.arrows.byId)\n);\n\n// Return the arrow with the given ID.\nexport const arrowById = (state: State, id: string): Arrow => {\n  const arrow = state.entities.arrows.byId[id];\n  if (!arrow) {\n    throw new Error(`No Arrow with ID \"${id}\"`);\n  }\n  return arrow;\n};\n\n// Return an array containing all arrows associated with the given node (i.e.\n// arrows that either start or end at the node).\nexport const arrowsForNode = (state: State, nodeId: string): Arrow[] => (\n  allArrows(state).filter(arrow => arrow.start === nodeId || arrow.end === nodeId)\n);\n\n// If an arrow exists joining the two given nodes, return it; otherwise return\n// null.\nexport const arrowForEndpoints = (state: State, startId: string, endId: string): null | Arrow => {\n  const arrow = allArrows(state).find(a => a.start === startId && a.end === endId);\n  return arrow || null;\n};\n\n// Return an array containing all arrows starting at the given node.\nexport const arrowsForStart = (state: State, nodeId: string): Arrow[] => (\n  allArrows(state).filter(arrow => arrow.start === nodeId)\n);\n\nexport const arrowsReducer = (state: State, action: Action): ArrowState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.ADD_ARROW:\n        return addArrow(state, action.payload.start, action.payload.end, action.payload.id);\n      case A.DELETE_ENTITIES:\n        return deleteEntities(state, action.payload.arrows);\n      default:\n        return state.entities.arrows;\n    }\n  }\n  else {\n    return state.entities.arrows;\n  }\n};\n\nconst addArrow = (state: State, start: string, end: string, id: string): ArrowState => (\n  _.merge({}, state.entities.arrows, {\n    byId: {\n      [id]: { start, end, id },\n    },\n  })\n);\n\nconst deleteEntities = (state: State, ids: string[]): ArrowState => ({\n  ...state.entities.arrows,\n  byId: _.omit(state.entities.arrows.byId, ids)\n});\n","import _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { Transient, currentLatest } from './auxiliary';\nimport { arrowById } from './Arrow';\nimport { nodeById, selectedNodes } from './Node';\nimport { isMouseDownNode, isMouseDownControlPoint } from './UI';\nimport { State } from './state';\nimport Vector from '../tools/Vector';\nimport { xOr } from '../tools/auxiliary';\nimport { isInEditMode } from './Mode';\n\n// A control point is a draggable handle associated with a particular arrow. It\n// is used to control the curve of the arrow in order to create aesthetically\n// pleasing machine layouts. Despite (or more likely, because of) the fact that\n// control points exist purely for display purposes, their management involves\n// quite a bit of computation. This is mainly due to the fact that they are\n// draggable, and also that each time a node is moved, all of the control points\n// associated with the arrows connected to the node are moved as well.\n\nexport interface ControlPointState extends Transient<ControlPointInfo> {}\n\n// A few of these items require explanation: the \"fullOffsets\" and \"halfOffsets\"\n// properties are populated when a *NODE* is moved: it turns out that when a\n// node is moved, it is quite desirable to have any control points associated\n// with arrows connected to the node move as well, and in a particular way.\nexport interface ControlPointInfo {\n  byId: { [key: string]: ControlPoint };\n  selected: null | string;\n  selectedOffset: null | Vector;\n  fullOffsets: { [key: string]: Vector };\n  halfOffsets: { [key: string]: FixedOffset };\n}\n\nexport interface ControlPoint {\n  id: string;\n  arrow: string;\n  pos: Vector;\n}\n\n// Suppose we move a node away from another node, and imagine that both of these\n// nodes are connected with an arrow. How should the control point for that\n// arrow move in order to maintain the arrow's overall \"shape\"? We have chosen\n// to move the control point as if it were \"fixed\" in a sense to the line\n// connecting the two endpoint nodes. This requires keeping track of the\n// position of the non-moving node, the position of the moving node, the\n// distance between the control point and one of the endpoints, and the\n// perpendicular distance between the line connecting the nodes and the control\n// point. The calculations for generating and restoring these offsets is spelled\n// out below.\nexport interface FixedOffset {\n  fixedPos: Vector;\n  movingOffset: Vector;\n  fractionAlong: number;\n  perpLength: number;\n}\n\nexport const initControlPointState: ControlPointState = {\n  wip: null,\n  committed: {\n    byId: {},\n    selected: null,\n    selectedOffset: null,\n    fullOffsets: {},\n    halfOffsets: {},\n  },\n};\n\n// Return an array containing all control points.\nexport const allControlPoints = (state: State): ControlPoint[] => (\n  Object.values(currentLatest(state.entities.controlPoints).byId)\n);\n\n// Return the control point for the given arrow, if one exists.\nexport const controlPointForArrow = (state: State, arrowId: string): ControlPoint => {\n  const cp = allControlPoints(state).find(({ arrow }) => arrow === arrowId);\n  if (!cp) {\n    throw new Error(`No ControlPoint associated with Arrow having ID \"${arrowId}\"`);\n  }\n  return cp;\n};\n\nexport const controlPointsReducer = (state: State, action: Action): ControlPointState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.ADD_ARROW:\n        return addArrow(state, action.payload.start, action.payload.end, action.payload.id);\n      case A.DELETE_ENTITIES:\n        return deleteEntities(state, action.payload.controlPoints);\n      case A.MOUSE_DOWN_CONTROL_POINT:\n        return mouseDownControlPoint(state, action.payload.id);\n      case A.MOUSE_UP_CONTROL_POINT:\n        return mouseUpControlPoint(state);\n      case A.MOUSE_DOWN_CANVAS:\n        return mouseDownCanvas(state, action.payload.pos);\n      case A.MOUSE_MOVE_CANVAS:\n        return mouseMoveCanvas(state, action.payload.pos);\n      case A.MOUSE_UP_CANVAS:\n      case A.MOUSE_UP_NODE:\n        return mouseUpNodeOrCanvas(state);\n      default:\n        return state.entities.controlPoints;\n    }\n  }\n  else {\n    return state.entities.controlPoints;\n  }\n};\n\n// Whenever we add a new arrow, we also add a new control point for it. The\n// position of the control point is determined by the position of the arrow's\n// start and end nodes, and whether the transition is a self-loop or not.\nconst addArrow = (state: State, start: string, end: string, arrow: string): ControlPointState => {\n  const id = uuid();\n  const startPos = nodeById(state, start).pos;\n  const endPos = start === end ? startPos : nodeById(state, end).pos;\n\n  const constructStandardPos = (start: Vector, end: Vector): Vector => {\n    const diff = end.minus(start);\n    // We offset the control point ever so slightly from the line joining the\n    // endpoints; this forces the transition details into a better position. In\n    // the event that both endpoints are on top of each other (this is\n    // incredibly rare if not impossible), we add the control point a certain\n    // vertical distance away.\n    const perp = diff.magnitude() !== 0\n      ? diff.perp().normalize().scale(1)\n      : new Vector(0, -1);\n    return diff.scale(1 / 2).plus(perp).plus(start);\n  };\n\n  const controlPos = start === end\n  ? startPos.minus(new Vector(0, 90))\n  : constructStandardPos(startPos, endPos);\n\n  return {\n    wip: null,\n    committed: _.merge({}, state.entities.controlPoints.committed, {\n      byId: {\n        [id]: { id, arrow, pos: controlPos },\n      }\n    }),\n  };\n};\n\nconst deleteEntities = (state: State, ids: string[]): ControlPointState => ({\n  wip: null,\n  committed: {\n    ...state.entities.controlPoints.committed,\n    byId: _.omit(state.entities.controlPoints.committed.byId, ids),\n  },\n});\n\n// When the user presses the mouse over a control point, we revert to the last\n// committed state and record the control point as the current selection. We do\n// NOT calculate an offset here, since we need the cursor's position relative to\n// the containing (SVG) element in order to do so.\nconst mouseDownControlPoint = (state: State, id: string): ControlPointState => ({\n  ...state.entities.controlPoints,\n  wip: null,\n  committed: {\n    ...state.entities.controlPoints.committed,\n    selected: id,\n  },\n});\n\n// When the mouse is released over a control point, we COMMIT the wip state, and\n// remove any selection and offset that might have been created before a move.\nconst mouseUpControlPoint = (state: State): ControlPointState => ({\n  wip: null,\n  committed: {\n    ...currentLatest(state.entities.controlPoints),\n    selected: null,\n    selectedOffset: null,\n  },\n});\n\n// Here's where things start to get a little tricky: if a mouse press has been\n// received by the canvas, we check if the cursor is currently down over a\n// control point or a node. If it is down over a control point, we compute the\n// current offset in preparation for a move; if it is down over a node, we\n// compute the required offsetS in preparation for the node being moved.\nconst mouseDownCanvas = (state: State, mousePos: Vector): ControlPointState => {\n  if (isMouseDownControlPoint(state)) return prepForDirectMove(state, mousePos);\n  else if (isMouseDownNode(state)) return prepForIndirectMove(state, mousePos);\n  else return state.entities.controlPoints;\n};\n\n// In order to prepare for a control point to be moved, we compute its offset\n// from the cursor position. We also copy the current committed state into the\n// WIP state at this point, since we update the WIP state throughout the move.\nconst prepForDirectMove = (state: State, mousePos: Vector): ControlPointState => {\n  const controlPoints = state.entities.controlPoints.committed;\n  if (!controlPoints.selected) {\n    return state.entities.controlPoints;\n  }\n  const controlPoint = controlPoints.byId[controlPoints.selected];\n  const selectedOffset = controlPoint.pos.minus(mousePos);\n  return {\n    ...state.entities.controlPoints,\n    wip: _.merge({}, controlPoints, {\n      selectedOffset,\n    }),\n  };\n};\n\n// Before a node is moved, we compute some information about any control points\n// that are associated with any arrows connected to the node. This information\n// includes offsets of 2 varieties: \"full\" and \"half\". A full offset is simply a\n// difference between the current mouse position and a control point. We compute\n// a full offset whenever all nodes associated with a control point are\n// selected, since the control point will simply get translated along with the\n// cursor in this case. Computing a half offset is more involved. In this case,\n// we calculate the position of the control point relative to the node that is\n// moving.\nconst prepForIndirectMove = (state: State, mousePos: Vector): ControlPointState => {\n  const controlPoints = state.entities.controlPoints.committed;\n  const selected = selectedNodes(state);\n\n  // A control point is fully affected if both of the nodes associated with its\n  // arrow are selected.\n  const fullyAffected = Object.values(controlPoints.byId).filter(controlPoint => {\n    const arrow = arrowById(state, controlPoint.arrow);\n    return selected.includes(arrow.start) && selected.includes(arrow.end);\n  });\n\n  const fullOffsets = fullyAffected.reduce((acc, cp) => ({\n    ...acc,\n    [cp.id]: new Vector(cp.pos.x - mousePos.x, cp.pos.y - mousePos.y),\n  }), {});\n\n  // A control point is half affected if exactly one of the nodes associated\n  // with its arrow is selected.\n  const halfOffsets = Object.values(controlPoints.byId).reduce((acc, p) => {\n    const arrow = arrowById(state, p.arrow);\n    const includesStart = selected.includes(arrow.start);\n    const includesEnd = selected.includes(arrow.end);\n    if (!xOr(includesStart, includesEnd)) {\n      return acc;\n    }\n\n    const fixedPos = nodeById(state, includesEnd ? arrow.start : arrow.end).pos;\n    const movingPos = nodeById(state, includesStart ? arrow.start : arrow.end).pos;\n    const movingOffset = movingPos.minus(mousePos);\n    const diff = fixedPos.minus(movingPos);\n    const toCP = p.pos.minus(movingPos);\n    const cpShadow = toCP.project(diff);\n    const fractionAlong = cpShadow.magnitude() / diff.magnitude();\n    const perp = toCP.minus(cpShadow);\n    const perpSign = perp.dot(cpShadow.perp()) > 0 ? 1 : -1;\n    const perpLength = perpSign * perp.magnitude();\n\n    return {\n      ...acc,\n      [p.id]: { fixedPos, movingOffset, fractionAlong, perpLength },\n    };\n  }, {});\n\n  // Just as in a direct move, we move the committed state into the WIP state in\n  // preparation for movement.\n  return {\n    ...state.entities.controlPoints,\n    wip: {\n      ...controlPoints,\n      fullOffsets,\n      halfOffsets,\n    },\n  };\n};\n\n// Just as we needed to handle two cases when the mouse is pressed over the\n// canvas, so too must we manage two cases when the mouse is moved. In this\n// case, we distinguish between a \"direct\" move -- when the user is moving the\n// control point by dragging it, and an \"indirect\" move -- when the control\n// point is moved as a result of a node moving.\nconst mouseMoveCanvas = (state: State, mousePos: Vector): ControlPointState => {\n  if (isMouseDownControlPoint(state)) return moveDirect(state, mousePos);\n  else if (isMouseDownNode(state)) return moveIndirect(state, mousePos);\n  else return state.entities.controlPoints;\n};\n\n// To perform a direct move, we simply add the computed offset to the current\n// cursor position, and use this as the new position for the selected control\n// point. This is only slightly complicated by the need to check that the\n// \"selected\" and \"offset\" properties must be non-null.\nconst moveDirect = (state: State, mousePos: Vector): ControlPointState => {\n  const { controlPoints } = state.entities;\n\n  if (!controlPoints.wip || !controlPoints.wip.selected || !controlPoints.wip.selectedOffset) {\n    return controlPoints;\n  }\n\n  const controlPoint = controlPoints.wip.byId[controlPoints.wip.selected];\n  const updatedPos = mousePos.plus(controlPoints.wip.selectedOffset);\n\n  return {\n    ...controlPoints,\n    wip: _.merge({}, controlPoints.wip, {\n      byId: {\n        [controlPoint.id]: { ...controlPoint, pos: updatedPos },\n      },\n    }),\n  };\n};\n\n// To perform an indirect move, we essentially reverse the process of computing\n// the full and half offsets in order to update the positions of the affected\n// control points in the WIP state.\nconst moveIndirect = (state: State, mousePos: Vector): ControlPointState => {\n  const { controlPoints } = state.entities;\n\n  if (!controlPoints.wip) {\n    return controlPoints;\n  }\n\n  const fullMoved = Object.keys(controlPoints.wip.fullOffsets).reduce((acc, id) => {\n    const controlPoint = controlPoints.wip!.byId[id];\n    const updatedPos = mousePos.plus(controlPoints.wip!.fullOffsets[id]);\n    return {\n      ...acc,\n      [id]: { ...controlPoint, pos: updatedPos },\n    };\n  }, {});\n\n  const halfMoved = Object.keys(controlPoints.wip.halfOffsets).reduce((acc, id) => {\n    const controlPoint = controlPoints.wip!.byId[id];\n    const { fixedPos, movingOffset, fractionAlong, perpLength } = controlPoints.wip!.halfOffsets[id];\n    const newPos = mousePos.plus(movingOffset);\n    const diff = fixedPos.minus(newPos);\n    const alongDiff = diff.scale(fractionAlong).plus(newPos);\n    // If the start and end points are the same, we simply place the control\n    // point a certain vertical distance away from them.\n    const updatedPos = diff.magnitude() !== 0\n      ? diff.perp().normalize().scale(perpLength).plus(alongDiff)\n      : new Vector(0, -80).plus(alongDiff);\n\n    return {\n      ...acc,\n      [id]: { ...controlPoint, pos: updatedPos },\n    };\n  }, {});\n\n  return {\n    ...controlPoints,\n    wip: _.merge({}, controlPoints.wip, {\n      byId: {\n        ...fullMoved,\n        ...halfMoved,\n      },\n    }),\n  };\n};\n\n// When the mouse is released, we commit the wip state and remove all offsets\n// that might have been created before a move.\nconst mouseUpNodeOrCanvas = (state: State): ControlPointState => ({\n  ...state.entities.controlPoints,\n  wip: null,\n  committed: {\n    ...currentLatest(state.entities.controlPoints),\n    selected: null,\n    selectedOffset: null,\n    fullOffsets: {},\n    halfOffsets: {},\n  },\n});\n","import _ from 'lodash';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { State } from './state';\nimport { repeat } from '../tools/auxiliary';\n\nexport interface TapeState {\n  entries: string[];\n  scrollLeft: number;\n  active: number;\n  focused: number | null;\n}\n\nexport const CELL_WIDTH = 36;\nexport const VISIBLE_CELL_COUNT = 20;\n\nexport const initTapeState: TapeState = {\n  entries: repeat('', VISIBLE_CELL_COUNT),\n  scrollLeft: 0,\n  active: 0,\n  focused: null,\n};\n\nexport type TapeDirection = 'L' | 'R';\nexport const TapeDirections: { [key: string]: TapeDirection } = {\n  L: 'L',\n  R: 'R',\n};\n\n// Return an array containing all of the tape entries, along with entries\n// containing empty values for nonexistent intermediate entries.\nexport const tapeEntries = (state: State): string[] => state.entities.tape.entries;\n\nexport const activeTapeCell = (state: State): number => state.entities.tape.active;\n\nexport const focusedTapeCell = (state: State): null | number => state.entities.tape.focused;\n\nexport const currentReadSymbol = (state: State): string => {\n  const { tape } = state.entities;\n  return tape.entries[tape.active];\n};\n\nexport const tapeReducer = (state: State, action: Action): TapeState => {\n  switch (action.type) {\n    case A.CHANGE_TAPE_CELL:\n      return changeTapeCell(state, action.payload.pos, action.payload.value);\n    case A.UPDATE_SCROLL_LEFT:\n      return updateScrollLeft(state, action.payload.scrollLeft);\n    case A.FOCUS_TAPE_CELL:\n      return focusTapeCell(state, action.payload.pos);\n    case A.CLEAR_TAPE:\n      return clearTape(state);\n    case A.MOVE_TAPE:\n      return moveTape(state, action.payload.direction);\n    case A.WRITE_TAPE_SYMBOL:\n      return writeTapeSymbol(state, action.payload.symbol);\n    default:\n      return state.entities.tape;\n  }\n};\n\nconst changeTapeCell = (state: State, pos: number, value: string): TapeState => ({\n  ...state.entities.tape,\n  entries: _.update(_.clone(state.entities.tape.entries), pos, _ => value),\n  focused: value.length > 0 && state.entities.tape.focused !== null\n    ? state.entities.tape.focused + 1\n    : state.entities.tape.focused,\n});\n\nconst focusTapeCell = (state: State, pos: number): TapeState => ({\n  ...state.entities.tape,\n  focused: pos,\n});\n\nconst clearTape = (state: State): TapeState => initTapeState;\n\nconst updateScrollLeft = (state: State, scrollLeft: number): TapeState => ({\n  ...state.entities.tape,\n  entries: updateBlocks(state.entities.tape.entries, scrollLeft),\n  scrollLeft,\n});\n\nconst updateBlocks = (entries: string[], leftPos: number): string[] => {\n  const BLOCK_SIZE = 20;\n  const cellDiff = entries.length - Math.floor(leftPos / CELL_WIDTH);\n  // If there is less than a block between the current scroll position and the\n  // end of the tape, we add a new empty block.\n  if (cellDiff < BLOCK_SIZE) {\n    return [...entries, ...repeat('', BLOCK_SIZE)];\n  }\n  // If there is an EMPTY block at the end of the tape, and there are at least 2\n  // blocks between the current scroll position and the end, we remove the empty\n  // block.\n  else if (cellDiff > 2 * BLOCK_SIZE && entries.slice(-BLOCK_SIZE).every(val => val.length === 0)) {\n    return entries.slice(0, -BLOCK_SIZE);\n  }\n  return entries;\n};\n\nconst moveTape = (state: State, direction: 'L' | 'R'): TapeState => ({\n  ...state.entities.tape,\n  active: state.entities.tape.active + (direction === 'L' ? +1 : -1),\n});\n\nconst writeTapeSymbol = (state: State, symbol: string): TapeState => {\n  const { tape } = state.entities;\n  return {\n    ...tape,\n    entries: _.set(_.clone(tape.entries), tape.active, symbol),\n  };\n};\n","import _ from 'lodash';\nimport uuid from 'uuid/v4';\nimport { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { isInEditMode } from './Mode';\nimport { arrowById } from './Arrow';\nimport { TapeDirection, TapeDirections } from './Tape';\n\n// A transition detail provides the information that is missing in an arrow: an\n// arrow indicates the start and end states for a number of transitions; a\n// transition detail supplies the read symbol, write symbol, and tape direction\n// for a particular transition. Thus, a transition consists of an arrow along\n// with a transition detail.\n\nexport interface TransitionDetailState {\n  byId: { [key: string]: TransitionDetail };\n  focused: null | string;\n}\n\nexport interface TransitionDetail {\n  id: string;\n  arrow: string;\n  read: string;\n  write: string;\n  move: TapeDirection;\n  isDuplicate: boolean;\n}\n\nexport const initTransitionDetailState: TransitionDetailState = {\n  byId: {},\n  focused: null,\n};\n\n// Return an array containing all transition details.\nexport const allTransitionDetails = (state: State): TransitionDetail[] => (\n  Object.values(state.entities.transitionDetails.byId)\n);\n\n// Return an object associating each Arrow ID with a list of its\n// TransitionDetails.\nexport const allGroupedTransitionDetails = (state: State): { [key: string]: TransitionDetail[] } => (\n  _.groupBy(allTransitionDetails(state), detail => detail.arrow)\n);\n\n// Return an array of transition details associated with the given arrow.\nexport const transitionDetailsForArrow = (state: State, arrow: string): TransitionDetail[] => (\n  allGroupedTransitionDetails(state)[arrow]\n);\n\nexport const transitionDetailsByStart = (state: State): { [key: string]: TransitionDetail[] } => (\n  _.groupBy(allTransitionDetails(state), detail => arrowById(state, detail.arrow).start)\n);\n\n// Return an array of IDs of transition details that share \"read\" symbols with\n// at least one other detail.\nexport const duplicateTransitionDetails = (state: State): string[] => {\n  const byStart = Object.values(transitionDetailsByStart(state));\n  const byReadSym = byStart.map(ds => Object.values(_.groupBy(ds, detail => detail.read)));\n  const duplicates = byReadSym.map(ds => ds.filter(group => group.length > 1)); \n  const flattened = _.flattenDeep(duplicates) as TransitionDetail[];\n  return flattened.map(detail => detail.id);\n};\n\n// Return the currently focused transition detail\nexport const focusedDetail = (state: State): null | string => state.entities.transitionDetails.focused;\n\nexport const transitionDetailsReducer = (state: State, action: Action): TransitionDetailState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.ADD_TRANSITION_DETAIL:\n        return addTransitionDetail(state, action.payload.arrow);\n      case A.ADD_ARROW:\n        return addArrow(state, action.payload.id);\n      case A.CHANGE_TRANSITION_DETAIL:\n        return changeTransitionDetail(state, action.payload.detail);\n      case A.DELETE_TRANSITION_DETAIL:\n        return deleteTransitionDetail(state, action.payload.id);\n      case A.DELETE_ENTITIES:\n        return deleteEntities(state, action.payload.transitionDetails);\n      case A.FOCUS_TRANSITION_DETAIL:\n        return focusTransitionDetail(state, action.payload.id);\n      case A.BLUR_TRANSITION_DETAIL:\n        return blurTransitionDetail(state);\n      case A.MARK_DUPLICATE_TRANSITIONS:\n        return markDuplicateTransitions(state, action.payload.ids);\n      default:\n        return state.entities.transitionDetails;\n    }\n  }\n  else {\n    return state.entities.transitionDetails;\n  }\n};\n\nconst addTransitionDetail = (state: State, arrow: string): TransitionDetailState => {\n  const id = uuid();\n  const detail = { id, arrow, read: '', write: '', move: TapeDirections.L, isFocused: false };\n  return _.merge({}, state.entities.transitionDetails, {\n    byId: {\n      [id]: detail,\n    },\n    focused: id,\n  });\n};\n\n// Whenever we add a new arrow, we also add a fresh transition detail.\nconst addArrow = (state: State, arrow: string): TransitionDetailState => (\n  addTransitionDetail(state, arrow)\n);\n\nconst changeTransitionDetail = (state: State, detail: TransitionDetail): TransitionDetailState => (\n  _.merge({}, state.entities.transitionDetails, {\n    byId: {\n      [detail.id]: detail,\n    },\n  })\n);\n\nconst deleteTransitionDetail = (state: State, id: string): TransitionDetailState => {\n  const { transitionDetails } = state.entities;\n  return {\n    ...transitionDetails,\n    byId: _.omit(transitionDetails.byId, id),\n  };\n};\n\nconst deleteEntities = (state: State, ids: string[]): TransitionDetailState => ({\n  ...state.entities.transitionDetails,\n  byId: _.omit(state.entities.transitionDetails.byId, ids),\n});\n\nconst focusTransitionDetail = (state: State, id: string): TransitionDetailState => ({\n  ...state.entities.transitionDetails,\n  focused: id,\n});\n\nconst blurTransitionDetail = (state: State): TransitionDetailState => ({\n  ...state.entities.transitionDetails,\n  focused: null,\n});\n\nconst markDuplicateTransitions = (state: State, ids: string[]): TransitionDetailState => ({\n  ...state.entities.transitionDetails,\n  byId: _.mapValues(state.entities.transitionDetails.byId, detail => ({\n    ...detail,\n    isDuplicate: ids.includes(detail.id),\n  })),\n});\n","import _ from 'lodash';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { State } from './state';\nimport { isInEditMode } from './Mode';\nimport { wasMouseDragged, wasMnemonicChanged } from './UI';\n\nexport interface UndoRedoState {\n  actions: ActionRecord[];\n  redoable: ActionRecord[];\n}\n\nexport interface ActionRecord {\n  value: any;\n  description?: string;\n}\n\nexport const initUndoRedoState: UndoRedoState = {\n  actions: [],\n  redoable: [],\n};\n\nexport const undoRedoReducer = (state: State, action: Action): UndoRedoState => {\n  if (isInEditMode(state)) {\n    switch (action.type) {\n      case A.MOUSE_UP_NODE:\n        return mouseUpNode(state);\n      case A.MOUSE_UP_CONTROL_POINT:\n        return mouseUpControlPoint(state);\n      case A.ADD_NODE:\n        return addRecord(state, 'add node');\n      case A.BLUR_MNEMONIC:\n        return blurMnemonic(state);\n      case A.MAKE_SELECTED_START_NODE:\n        return addRecord(state, 'change initial state');\n      case A.TOGGLE_SELECTED_FINAL_NODES:\n        return addRecord(state, 'toggle \"final\" status for selected states');\n      case A.ADD_ARROW:\n        return addRecord(state, 'add new transition');\n      case A.ADD_TRANSITION_DETAIL:\n        return addRecord(state, 'add new transition');\n      case A.DELETE_ENTITIES:\n        return addRecord(state, 'delete entities');\n      case A.CHANGE_TRANSITION_DETAIL:\n        return addRecord(state, 'change transition');\n      case A.CHANGE_TAPE_CELL:\n        return addRecord(state, 'change tape cell');\n      case A.CLEAR_TAPE:\n        return addRecord(state, 'clear tape');\n      default:\n        return state.undoRedo;\n    }\n  }\n  else {\n    return state.undoRedo;\n  }\n};\n\n// We need to be a little careful before adding an action record when the mouse\n// is released over a node (or control point), since the user may not have\n// actually MOVED the node at all, but instead simply selected it. Thus, we\n// first check if the mouse was dragged before adding the record.\nconst mouseUpNode = (state: State): UndoRedoState => {\n  if (wasMouseDragged(state)) return addRecord(state, 'move node');\n  else return state.undoRedo;\n};\n\nconst mouseUpControlPoint = (state: State): UndoRedoState => {\n  if (wasMouseDragged(state)) return addRecord(state, 'move control point');\n  else return state.undoRedo;\n};\n\nconst blurMnemonic = (state: State): UndoRedoState => {\n  if (wasMnemonicChanged(state)) return addRecord(state, 'change mnemonic');\n  else return state.undoRedo;\n};\n\nexport const undo = (state: State): State => {\n  if (state.undoRedo.actions.length === 0) return state;\n  const [record, ...rest] = state.undoRedo.actions;\n  // Save current value for redo:\n  const redoValue = getSnapshot(state);\n  const redoRecord = { ...record, value: redoValue };\n  const updated = revertToSnapshot(state, record.value);\n  return {\n    ...updated,\n    undoRedo: {\n      ...state.undoRedo,\n      actions: rest,\n      redoable: [redoRecord, ...state.undoRedo.redoable],\n    },\n  };\n};\n\nexport const redo = (state: State): State => {\n  if (state.undoRedo.redoable.length === 0) return state;\n  const [record, ...rest] = state.undoRedo.redoable;\n  // Save current value for undo:\n  const undoValue = getSnapshot(state);\n  const undoRecord = { ...record, value: undoValue };\n  const updated = revertToSnapshot(state, record.value);\n  return {\n    ...updated,\n    undoRedo: {\n      ...state.undoRedo,\n      actions: [undoRecord, ...state.undoRedo.actions],\n      redoable: rest,\n    },\n  };\n};\n\nconst MAX_UNDOS = 32;\n\nconst addRecord = (state: State, description?: string): UndoRedoState => {\n  const record = { description, value: getSnapshot(state) };\n  return {\n    // In order to prevent excessive memory usage, we limit the number of undos.\n    // Each time a record is added, we make sure that the array of actions\n    // contains only the N most recent records, and then add the new one.\n    actions: [record, ...state.undoRedo.actions.slice(0, MAX_UNDOS)],\n    // Each time we add a record to the undo stack, we clear the redo stack.\n    redoable: [],\n  };\n};\n\n// Each time we add a record to the sequence of actions, we store a \"snapshot\"\n// of the application state. In our case, we store all entities.\nconst getSnapshot = (state: State) => _.get(state, 'entities');\n\n// In order to undo or redo an action, we need to revert the state to the\n// snapshot recorded with the action. This is *relatively* straightforward: we\n// replace the current entities list with the snapshot, overwriting any WIP\n// states to null.\nconst revertToSnapshot = (state: State, snapshot: any): State => {\n  const toplevelIteratee = (value: any) => (\n    _.mapValues(value, (value, key) => (\n      key === 'wip' ? null : value\n    ))\n  );\n\n  return {\n    ...state,\n    entities: _.mapValues(snapshot, toplevelIteratee),\n  } as State;\n};\n","import { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\n\nexport interface MessageState {\n  show: boolean;\n  title: null | string;\n  content: null | string | JSX.Element;\n}\n\nexport const initMessageState: MessageState = {\n  show: false,\n  title: null,\n  content: null,\n};\n\nexport const showMessage = (state: State): boolean => state.message.show;\n\nexport const messageTitle = (state: State): null | string => state.message.title;\n\nexport const messageContent = (state: State): null | string | JSX.Element => state.message.content;\n\nexport const messageReducer = (state: State, action: Action): MessageState => {\n  switch (action.type) {\n    case A.DISPLAY_MESSAGE:\n      return displayMessage(state, action.payload.title, action.payload.content);\n    case A.DISMISS_MESSAGE:\n      return dismissMessage(state);\n    default:\n      return state.message;\n  }\n};\n\nconst displayMessage = (state: State, title: string, content?: string | JSX.Element): MessageState => ({\n  ...state.message,\n  show: true,\n  title,\n  content: content !== undefined ? content : null,\n});\n\nconst dismissMessage = (state: State): MessageState => ({\n  ...state.message,\n  show: false,\n  title: null,\n  content: null,\n});\n","import { State } from './state';\nimport { Action } from './actions';\nimport * as A from './actions';\nimport { startNode } from './Node';\n\nexport interface SimState {\n  currentState: null | string;\n  activeNode: null | string;\n  activeArrow: null | string;\n  activeTransitionDetail: null | string;\n  activeControlPoint: null | string;\n}\n\nexport const initSimState: SimState = {\n  currentState: null,\n  activeNode: null,\n  activeArrow: null,\n  activeTransitionDetail: null,\n  activeControlPoint: null,\n};\n\n// Return the current simulation state.\nexport const currentState = (state: State): string => (\n state.sim.currentState || startNode(state)\n);\n\nexport const isNodeActive = (state: State, id: string): boolean => (\n  state.sim.activeNode === id\n);\n\nexport const isArrowActive = (state: State, id: string): boolean => (\n  state.sim.activeArrow === id\n);\n\nexport const isControlPointActive = (state: State, id: string): boolean => (\n  state.sim.activeControlPoint === id\n);\n\nexport const activeTransitionDetail = (state: State): null | string => (\n  state.sim.activeTransitionDetail\n);\n\nexport const simReducer = (state: State, action: Action): SimState => {\n  switch (action.type) {\n    case A.SET_CURRENT_STATE:\n      return setCurrentState(state, action.payload.id);\n    case A.SET_ACTIVE_NODE:\n      return setActiveNode(state, action.payload.id);\n    case A.SET_ACTIVE_TRANSITION_DETAIL:\n      return setActiveTransitionDetail(state, action.payload.id);\n    case A.SET_ACTIVE_ARROW:\n      return setActiveArrow(state, action.payload.id);\n    case A.SET_ACTIVE_CONTROL_POINT:\n      return setActiveControlPoint(state, action.payload.id);\n    case A.RESET_SIM:\n      return resetSim(state);\n    default:\n      return state.sim;\n  }\n};\n\nconst setCurrentState = (state: State, id: string): SimState => ({\n  ...state.sim,\n  currentState: id,\n});\n\nconst setActiveNode = (state: State, id: null | string): SimState => ({\n  ...state.sim,\n  activeNode: id,\n});\n\nconst setActiveTransitionDetail = (state: State, id: null | string): SimState => ({\n  ...state.sim,\n  activeTransitionDetail: id,\n});\n\nconst setActiveArrow = (state: State, id: null | string): SimState => ({\n  ...state.sim,\n  activeArrow: id,\n});\n\nconst setActiveControlPoint = (state: State, id: null | string): SimState => ({\n  ...state.sim,\n  activeControlPoint: id,\n});\n\nconst resetSim = (state: State): SimState => ({\n  ...state.sim,\n  currentState: null,\n  activeNode: null,\n  activeArrow: null,\n  activeTransitionDetail: null,\n  activeControlPoint: null,\n});\n","import { NodeState, initNodeState } from './Node';\nimport { ArrowState, initArrowState } from './Arrow';\nimport { ControlPointState, initControlPointState } from './ControlPoint';\nimport { TransitionDetailState, initTransitionDetailState } from './TransitionDetail';\nimport { TapeState, initTapeState } from './Tape';\nimport { UIState, initUIState } from './UI';\nimport { UndoRedoState, initUndoRedoState } from './UndoRedo';\nimport { MessageState, initMessageState } from './Message';\nimport { ModeState, initModeState } from './Mode';\nimport { SimState, initSimState } from './Sim';\n\n// The application state consists of a number of \"entities\" (objects -- in the\n// general sense -- that are displayed and interacted with), along with some UI\n// info. The UI info is generally useful for a number of the entities.\n\nexport interface State {\n  entities: {\n    nodes: NodeState;\n    arrows: ArrowState;\n    controlPoints: ControlPointState;\n    transitionDetails: TransitionDetailState;\n    tape: TapeState;\n  }\n  ui: UIState;\n  undoRedo: UndoRedoState;\n  message: MessageState;\n  mode: ModeState;\n  sim: SimState;\n}\n\nexport const initState: State = {\n  entities: {\n    nodes: initNodeState,\n    arrows: initArrowState,\n    controlPoints: initControlPointState,\n    transitionDetails: initTransitionDetailState,\n    tape: initTapeState,\n  },\n  ui: initUIState,\n  undoRedo: initUndoRedoState,\n  message: initMessageState,\n  mode: initModeState,\n  sim: initSimState,\n};\n","import { Action } from './actions'\nimport * as A from './actions';\nimport { State, initState } from './state';\nimport { nodesReducer } from './Node';\nimport { arrowsReducer } from './Arrow';\nimport { controlPointsReducer } from './ControlPoint';\nimport { transitionDetailsReducer } from './TransitionDetail';\nimport { tapeReducer } from './Tape';\nimport { uiReducer } from './UI';\nimport { undoRedoReducer, undo, redo } from './UndoRedo';\nimport { messageReducer } from './Message';\nimport { modeReducer } from './Mode';\nimport { simReducer } from './Sim';\n\nconst reducer = (state: State=initState, action: Action): State => {\n  switch (action.type) {\n    case A.UNDO:\n      return undo(state);\n    case A.REDO:\n      return redo(state);\n    default:\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          nodes: nodesReducer(state, action),\n          arrows: arrowsReducer(state, action),\n          controlPoints: controlPointsReducer(state, action),\n          transitionDetails: transitionDetailsReducer(state, action),\n          tape: tapeReducer(state, action),\n        },\n        ui: uiReducer(state, action),\n        undoRedo: undoRedoReducer(state, action),\n        message: messageReducer(state, action),\n        mode: modeReducer(state, action),\n        sim: simReducer(state, action),\n      };\n  }\n};\n\nexport default reducer;\n","import { Middleware } from 'redux';\nimport { Action } from '../actions';\nimport * as A from '../actions';\nimport { State } from '../state';\nimport { selectedNodes } from '../Node';\n\n// Each key may be \"bound\" to an alternative redux action, such that when the\n// user presses it, the action is dispatched.\nconst keyBindings: { [key: string]: KeyHandler } = {\n  'Backspace': st => {\n    if (selectedNodes(st).length > 0) {\n      return A.deleteSelectedNodes();\n    }\n    return null;\n  },\n  'n': (_, e) => {\n    if (e.ctrlKey) {\n      e.preventDefault();\n      return A.startAddingNode();\n    }\n    return null;\n  },\n  't': (st, e) => {\n    const multipleSelected = selectedNodes(st).length > 0;\n    if (multipleSelected && e.ctrlKey) {\n      e.preventDefault();\n      return A.addTransitionBetweenSelected();\n    }\n    else return null;\n  },\n  'z': (_, e) => {\n    if (e.ctrlKey || e.metaKey) return A.undo();\n    return null;\n  },\n  'y': (_, e) => {\n    if (e.ctrlKey || e.metaKey) {\n      e.preventDefault();\n      return A.redo();\n    }\n    return null;\n  },\n};\n\ntype KeyHandler = (state: State, event: React.KeyboardEvent) => null | Action;\n\nexport const keyboardShortcuts: Middleware = api => next => action => {\n  if (action.type !== A.KEY_DOWN) return next(action);\n\n  const state = api.getState();\n  const { key, event } = action.payload;\n\n  const keyHandler = keyBindings[key];\n  if (!keyHandler) return next(action);\n\n  const altAction = keyHandler(state, event);\n  if (!altAction) return next(action);\n\n  next(action);\n  return next(altAction);\n};\n","import React from 'react';\nimport './ErrorReport.css';\n\nexport interface ErrorReportProps {\n  whatsWrong: string;\n  howToFix: string | JSX.Element;\n}\n\nclass ErrorReport extends React.Component<ErrorReportProps> {\n  render() {\n    return (\n      <div className=\"error-report\">\n        <div className=\"error-report__section\">\n          <span className=\"error-report__title\">What's wrong:&ensp;</span>\n          <span className=\"error-report__content\">{this.props.whatsWrong}</span>\n        </div>\n        <div className=\"error-report__section\">\n          <span className=\"error-report__title\">How to fix it:&ensp;</span>\n          <span className=\"error-report__content\">{this.props.howToFix}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ErrorReport;\n","import React from 'react';\nimport ErrorReport from './ErrorReport';\n\nconst problem = 'In order for the machine to start, a state must be '\n              + 'distinguished as the initial or start state. You have '\n              + 'not yet identified any state as such.';\n\nconst fix = 'Select one of your machine states and click the \"Make Start State\" ' +\n            'button to distinguish it as the initial state.';\n\nexport default (\n  <ErrorReport whatsWrong={problem} howToFix={fix} />\n);\n","import React from 'react';\nimport ErrorReport from './ErrorReport';\n\nconst problem = 'At the moment, you have 2 or more transitions from the same '\n              + 'state with the same read symbol. Such nondeterministic behavior '\n              + 'is not supported.';\n\nconst fix = 'Find all transitions whose read symbols are marked red, and modify '\n          + 'or remove the associated transitions so that all transitions for each '\n          + 'state have distinct read symbols';\n\nexport default (\n  <ErrorReport whatsWrong={problem} howToFix={fix} />\n);\n","import React from 'react';\nimport './HaltReport.css';\n\nexport interface HaltReportProps {\n  accepted: boolean;\n}\n\nclass HaltReport extends React.Component<HaltReportProps> {\n  render() {\n    const { accepted: wasSuccess } = this.props;\n    return (\n      <div className=\"halt-report\">\n        <div className=\"halt-report__title\">\n          The machine has&nbsp;\n          <span className={`halt-report__result halt-report__result--${wasSuccess ? 'accepted' : 'rejected'}`}>\n            {wasSuccess ? 'accepted' : 'rejected'}\n          </span>\n          &nbsp;the input string.\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HaltReport;\n","import React from 'react';\nimport HaltReport from './HaltReport';\n\nexport default <HaltReport accepted={true} />;\n","import React from 'react';\nimport HaltReport from './HaltReport';\n\nexport default <HaltReport accepted={false} />;\n","import _ from 'lodash';\nimport { takeEvery, take, select, fork, put, cancel, delay } from 'redux-saga/effects';\nimport * as A from './actions';\nimport { State } from './state';\nimport { Modes } from './Mode';\nimport { currentState } from './Sim';\nimport { currentReadSymbol } from './Tape';\nimport { isNodeFinal } from './Node';\nimport { arrowsForStart } from './Arrow';\nimport { transitionDetailsForArrow } from './TransitionDetail';\nimport { controlPointForArrow } from './ControlPoint';\n\nfunction* play(singleStep: boolean) {\n  const playTask = yield fork(playSim, singleStep);\n  yield take([A.PAUSE_SIM, A.RESET_SIM, A.HALT_ACCEPT, A.HALT_REJECT]);\n  yield cancel(playTask);\n}\n\nfunction* playSim(singleStep: boolean) {\n  try {\n    yield put(A.switchMode(Modes.SIM));\n    if (singleStep) {\n      yield makeStep();\n    } else {\n      while (true) {\n        yield makeStep();\n      }\n    }\n  } finally {\n    yield put(A.switchMode(Modes.EDIT));\n  }\n}\n\nfunction* makeStep() {\n  // We first collect the current state and read symbol. These determine which\n  // transition we can take (if one is available).\n  const current = yield select(currentState);\n  const readSymbol = yield select(currentReadSymbol);\n  const transitionInfo = yield select(state => availableTransitionInfo(state, current, readSymbol));\n\n  const interval = 1000;\n\n  yield put(A.setActiveNode(current));\n  yield delay(interval / 4);\n\n  // If there are no available transitions, the machine halts. Whether it\n  // accepts or rejects the input is determined by whether the currents state\n  // has been designated as \"final\" or not.\n  if (transitionInfo === null) {\n    const accept = yield select(state => isNodeFinal(state, current));\n    if (accept) yield put(A.haltAccept());\n    else yield put(A.haltReject());\n  }\n\n  const { endId, arrowId, controlPointId, transitionDetailId, writeSymbol, tapeDirection } = transitionInfo as TransitionInfo;\n\n  yield put(A.setActiveArrow(arrowId));\n  yield put(A.setActiveControlPoint(controlPointId));\n  yield put(A.setActiveTransitionDetail(transitionDetailId));\n  yield put(A.writeTapeSymbol(writeSymbol));\n  yield put(A.moveTape(tapeDirection));\n  yield delay(interval / 4);\n\n  yield put(A.setActiveNode(endId));\n  yield put(A.setCurrentState(endId));\n  yield delay(interval / 4);\n\n  yield put(A.setActiveArrow(null));\n  yield put(A.setActiveControlPoint(null));\n  yield put(A.setActiveTransitionDetail(null));\n  yield delay(interval / 4);\n}\n\ninterface TransitionInfo {\n  endId: string;\n  arrowId: string;\n  controlPointId: string;\n  transitionDetailId: string;\n  writeSymbol: string;\n  tapeDirection: 'L' | 'R';\n}\n\nconst availableTransitionInfo = (state: State, current: string, readSymbol: string): null | TransitionInfo => {\n  const outgoing = arrowsForStart(state, current);\n  const details = _.flatten(outgoing.map(arrow => transitionDetailsForArrow(state, arrow.id)));\n  const detail = details.find(detail => detail.read === readSymbol);\n\n  if (!detail) return null;\n  const arrow = outgoing.find(arrow => arrow.id === detail.arrow);\n  if (!arrow) {\n    throw new Error(`Inconsistency in state: transition detail references nonexistent arrow \"${detail.arrow}\"`);\n  }\n  const controlPoint = controlPointForArrow(state, arrow.id);\n  return {\n    endId: arrow.end,\n    arrowId: arrow.id,\n    controlPointId: controlPoint.id,\n    transitionDetailId: detail.id,\n    writeSymbol: detail.write,\n    tapeDirection: detail.move,\n  };\n};\n\nexport default function* saga() {\n  yield takeEvery(A.STEP_SIM, play, true);\n  yield takeEvery(A.PLAY_SIM, play, false);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from './reducer';\nimport * as M from './middleware';\nimport saga from './saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(\n    M.keyboardShortcuts,\n    M.addTransition,\n    M.deleteTransitionDetail,\n    M.deleteNode,\n    M.validateTransitionDetails,\n    M.validatePreSim,\n    sagaMiddleware,\n    M.halt,\n  )),\n);\n\nsagaMiddleware.run(saga);\n\nexport default store;\n","import uuid from 'uuid/v4';\nimport { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { selectedNodes } from '../Node';\nimport { arrowForEndpoints } from '../Arrow';\n\n// When we add a new transition, we need to check if there is already an arrow\n// between its two endpoints. If so, we simply add an additional detail to this\n// arrow; if not we need to construct a new arrow and control point, and then\n// add the detail to that.\nexport const addTransition: Middleware = api => next => action => {\n  if (action.type !== A.ADD_TRANSITION_BETWEEN_SELECTED) return next(action);\n\n  const state = api.getState();\n  const nodes = selectedNodes(state);\n  const start = nodes[0];\n  const end = nodes[1] || nodes[0];\n  const existingArrow = arrowForEndpoints(state, start, end);\n\n  if (existingArrow) {\n    return next(A.addTransitionDetail(existingArrow.id));\n  } else {\n    const arrowId = uuid();\n    return next(A.addArrow(start, end, arrowId));\n  }\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { transitionDetailsForArrow } from '../TransitionDetail';\nimport { controlPointForArrow } from '../ControlPoint';\n\n// When a transition detail is deleted, we need to check if it was the last one\n// for its associated arrow. If it is, we need to also delete the arrow its\n// control point.\nexport const deleteTransitionDetail: Middleware = api => next => action => {\n  if (action.type !== A.DELETE_TRANSITION_DETAIL) return next(action);\n\n  const { id, arrow } = action.payload;\n  const state = api.getState();\n  const remainingDetails = transitionDetailsForArrow(state, arrow).filter(detail => detail.id !== id);\n\n  if (remainingDetails.length > 0) return next(action);\n\n  const controlPointId = controlPointForArrow(state, arrow).id;\n  return next(A.deleteEntities([], [arrow], [controlPointId], [id]));\n};\n","import _ from 'lodash';\nimport { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { transitionDetailsForArrow } from '../TransitionDetail';\nimport { controlPointForArrow } from '../ControlPoint';\nimport { selectedNodes } from '../Node';\nimport { arrowsForNode } from '../Arrow';\n\n// When we delete a node, we need to remove anything that was \"attached\" to it:\n// any arrows, and control points and transition details associated with them.\nexport const deleteNode: Middleware = api => next => action => {\n  if (action.type !== A.DELETE_SELECTED_NODES) return next(action);\n\n  const state = api.getState();\n  const nodeIds = selectedNodes(state);\n  const arrows = _.flatten(nodeIds.map(id => arrowsForNode(state, id)));\n  const arrowIds = _.uniq(_.flatten(arrows.map(({ id }) => id)));\n  const controlPointIds = arrowIds.map(id => controlPointForArrow(state, id)).map(({ id }) => id);\n  const transitionDetails = _.flatten(arrowIds.map(id => transitionDetailsForArrow(state, id)));\n  const transitionDetailIds = transitionDetails.map(({ id }) => id);\n\n  return next(A.deleteEntities(nodeIds, arrowIds, controlPointIds, transitionDetailIds));\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { duplicateTransitionDetails } from '../TransitionDetail';\n\n// Each time the user modifies or adds a transition detail, we find all\n// transition details that share an arrow and have the same read symbol. These\n// represent nondeterministic transitions and should be marked as errors.\nexport const validateTransitionDetails: Middleware = api => next => action => {\n  const validateOn = [\n    A.ADD_TRANSITION_DETAIL,\n    A.CHANGE_TRANSITION_DETAIL,\n    A.DELETE_TRANSITION_DETAIL,\n    A.ADD_ARROW,\n  ];\n  if (!validateOn.includes(action.type)) return next(action);\n\n  next(action);\n  const duplicates = duplicateTransitionDetails(api.getState());\n  return next(A.markDuplicateTransitions(duplicates));\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport { hasStartNode } from '../Node';\nimport { duplicateTransitionDetails } from '../TransitionDetail';\nimport MissingStartState from '../../ErrorReport/MissingStartState';\nimport NondeterministicTransition from '../../ErrorReport/NondeterministicTransition';\n\nexport const validatePreSim: Middleware = api => next => action => {\n  if (![A.STEP_SIM, A.PLAY_SIM].includes(action.type)) return next(action);\n\n  const state = api.getState();\n  if (!hasStartNode(state)) {\n    return next(A.displayMessage('Missing start state', MissingStartState));\n  }\n  else if (duplicateTransitionDetails(state).length > 0) {\n    return next(A.displayMessage('Nondeterministic transitions', NondeterministicTransition));\n  }\n\n  return next(action);\n};\n","import { Middleware } from 'redux';\nimport * as A from '../actions';\nimport Accept from '../../HaltReport/Accept';\nimport Reject from '../../HaltReport/Reject';\n\nexport const halt: Middleware = api => next => action => {\n  if (![A.HALT_ACCEPT, A.HALT_REJECT].includes(action.type)) return next(action);\n\n  if (action.type === A.HALT_ACCEPT) {\n    return next(A.displayMessage('Machine Halted', Accept));\n  }\n  else if (action.type === A.HALT_REJECT) {\n    return next(A.displayMessage('Machine Halted', Reject));\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { State } from '../state-mgmt/state';\nimport { Arrow as ArrowDetails } from '../state-mgmt/Arrow';\nimport { controlPointForArrow } from '../state-mgmt/ControlPoint';\nimport { nodeById } from '../state-mgmt/Node';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport { isArrowActive } from '../state-mgmt/Sim';\nimport Vector from '../tools/Vector';\nimport './Arrow.css';\n\n// An arrow represents one or more transitions between machine states (which are\n// represented by nodes). We render an arrow as a curved line between nodes,\n// using the arrow's control points to construct this curve. There are two cases\n// we need to consider: (1) if the arrow represents a self-transition, we render\n// it using a cubic bezier curve, (2) if the arrow represents a standard\n// transition, we use a quadratic curve.\n\nexport interface ArrowProps {\n  details: ArrowDetails;\n  start: Vector;\n  end: Vector;\n  control: Vector;\n  isSelfLoop: boolean;\n  isEditable: boolean;\n  isActive: boolean;\n}\n\nclass Arrow extends React.Component<ArrowProps> {\n  render() {\n    const className = classNames('arrow', {\n      'arrow--editable': this.props.isEditable,\n      'arrow--active': this.props.isActive,\n    });\n\n    const pathString = this.props.isSelfLoop\n      ? this.computeCubicPathString()\n      : this.computeQuadraticPathString();\n    return <path className={className} d={pathString} />;\n  }\n\n  private computeQuadraticPathString() {\n    // We need to distinguish between two types of \"control point\": the USER\n    // control point, which is represented by an arrowhead that the user can\n    // drag around, and the BEZIER control point, which is determined by the\n    // position of the user control point and in turn determines the shape of\n    // the arrow's curve. The main task here is to derive the BEZIER control\n    // point from the USER control point. To do so, we first find the midpoint\n    // between the nodes. We then construct the vector pointing from this\n    // midpoint to the USER control point, and scale it by 2. The bezier control\n    // point is described by the sum of this vector and the midpoint vector. I\n    // discovered this via experimentation, but it works like a charm.\n    const { start, end, control} = this.props;\n    const mid = start.plus(end.minus(start).scale(1 / 2));\n    const bezierControl= mid.plus(control.minus(mid).scale(2));\n    return `M ${start.x} ${start.y} Q ${bezierControl.x} ${bezierControl.y} ${end.x} ${end.y}`;\n  }\n\n  private computeCubicPathString() {\n    // To construct the bezier control pointS in this case, we first construct\n    // the vector pointing from the node to the USER control point and scale it\n    // by 4 / 3 (as above, I discovered this experimentally, and it appears to\n    // work perfectly although I don't know why). We then move a specified\n    // distance (`separation`) perpendicular to this vector in either direction.\n    // This separation distance determines how wide the loop is.\n    const { start, control } = this.props;\n    const v1 = control.minus(start).scale(4 / 3);\n    const separation = 80;\n    // If the control point is on top of its associated node, we place the\n    // bezier control points horizontally to the left and right.\n    const v2 = v1.magnitude() !== 0\n      ? v1.perp().normalize().scale(separation)\n      : new Vector(separation, 0);\n    const ctrl1 = start.plus(v1).plus(v2);\n    const ctrl2 = start.plus(v1).minus(v2);\n    return `M ${start.x} ${start.y} C ${ctrl1.x} ${ctrl1.y} ${ctrl2.x} ${ctrl2.y} ${start.x} ${start.y}`;\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => {\n  const start = nodeById(state, ownProps.details.start);\n  const end = nodeById(state, ownProps.details.end);\n  const controlPoint = controlPointForArrow(state, ownProps.details.id);\n  return {\n    start: start.pos,\n    end: end.pos,\n    control: controlPoint.pos,\n    isSelfLoop: start.id === end.id,\n    isEditable: isInEditMode(state),\n    isActive: isArrowActive(state, ownProps.details.id),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n)(Arrow);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport classNames from 'classnames';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { Node as NodeDetails, isNodeSelected, isStartNode } from '../state-mgmt/Node';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport { isNodeActive } from '../state-mgmt/Sim';\nimport Vector from '../tools/Vector';\nimport './Node.css';\n\n// A node represents a machine state in the TM formalization. We render nodes as\n// circles (with additional embellishments if they are also start or accepting\n// nodes). Additionally, a node may be given a \"mnemonic\" -- a 0-4 character\n// string -- to clarify its purpose.\n\nexport interface NodeProps {\n  details: NodeDetails;\n  isSelected: boolean;\n  isStart: boolean;\n  isEditable: boolean;\n  isActive: boolean;\n  changeMnemonic: (value: string) => void;\n  blurMnemonic: () => void;\n  mouseDown: () => void;\n  mouseUp: () => void;\n}\n\nexport const NODE_RADIUS = 21;\n\nclass Node extends React.Component<NodeProps> {\n  render() {\n    const { pos, mnemonic } = this.props.details;\n    const className = classNames('node', {\n      'node--selected': this.props.isSelected,\n      'node--final': this.props.details.isFinal,\n      'node--start': this.props.isStart,\n      'node--editable': this.props.isEditable,\n      'node--active': !this.props.isEditable && this.props.isActive,\n    });\n\n    const mnemonicClassName = classNames('node__mnemonic-input', {\n      'node__mnemonic-input--editable': this.props.isEditable,\n    });\n\n    const mnemonicPos = pos.plus(new Vector(-NODE_RADIUS + 2, NODE_RADIUS + 3));\n\n    return (\n      <div className=\"node__container\">\n        <div className={className}\n             onMouseDown={this.handleMouseDown}\n             onMouseUp={this.handleMouseUp}\n             style={{\n               position: 'absolute',\n               left: pos.x - NODE_RADIUS,\n               top: pos.y - NODE_RADIUS,\n             }} />\n        <input className={mnemonicClassName}\n               disabled={!this.props.isEditable}\n               value={mnemonic}\n               onChange={this.handleInputChange}\n               onBlur={this.handleInputBlur}\n               type=\"text\"\n               maxLength={4}\n               style={{\n                 position: 'absolute',\n                 left: mnemonicPos.x,\n                 top: mnemonicPos.y,\n               }}/>\n      </div>\n    );\n  }\n\n  private handleMouseDown = (e: React.MouseEvent) => {\n    this.props.mouseDown();\n  };\n\n  private handleMouseUp = (e: React.MouseEvent) => {\n    this.props.mouseUp();\n  };\n\n  private handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.changeMnemonic(evt.target.value);\n  };\n\n  private handleInputBlur = () => {\n    this.props.blurMnemonic();\n  };\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => ({\n  isSelected: isNodeSelected(state, ownProps.details.id),\n  isStart: isStartNode(state, ownProps.details.id),\n  isEditable: isInEditMode(state),\n  isActive: isNodeActive(state, ownProps.details.id),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: any) => ({\n  changeMnemonic: (value: string) => dispatch(A.changeMnemonic(ownProps.details.id, value)),\n  blurMnemonic: () => dispatch(A.blurMnemonic()),\n  mouseDown: () => dispatch(A.mouseDownNode(ownProps.details.id)),\n  mouseUp: () => dispatch(A.mouseUpNode()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Node);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport classNames from 'classnames';\nimport * as A from '../state-mgmt/actions';\nimport { State } from '../state-mgmt/state';\nimport { arrowById } from '../state-mgmt/Arrow';\nimport { nodeById } from '../state-mgmt/Node';\nimport { ControlPoint as ControlPointDetails } from '../state-mgmt/ControlPoint';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport { isControlPointActive } from '../state-mgmt/Sim';\nimport Vector from '../tools/Vector';\nimport './ControlPoint.css';\n\n// A control point is a draggable handle that the user can position to alter the\n// curve of an arrow. Control points are essential in being able to layout a\n// machine in an aesthetically pleasing way. As for arrows, there are 2 cases to\n// consider here: (1) the control point is for a self-transition, and (2) it is\n// for a standard transition. In both cases, we render the control point as an\n// arrowhead pointing in the direction of the transition that its arrow\n// represents.\n\nexport interface ControlPointProps {\n  details: ControlPointDetails;\n  start: Vector;\n  end: Vector;\n  isSelfLoop: boolean;\n  isEditable: boolean;\n  isActive: boolean;\n  mouseDown: () => void;\n  mouseUp: () => void;\n}\n\nconst ARROW_LENGTH = 18;\n\nclass ControlPoint extends React.Component<ControlPointProps> {\n  render() {\n    const className = classNames('control-point', {\n      'control-point--editable': this.props.isEditable,\n      'control-point--active': this.props.isActive,\n    });\n\n    const pathString = this.props.isSelfLoop\n    ? this.computeCubicString()\n    : this.computeQuadraticPathString();\n    return <path className={className}\n                 d={pathString}\n                 onMouseDown={this.handleMouseDown}\n                 onMouseUp={this.handleMouseUp} />;\n  }\n\n  // In the quadratic (i.e. standard transition) case, we render the control\n  // point as an arrowhead that is parallel to the line segment connecting the\n  // two nodes that its arrow joins.\n  private computeQuadraticPathString() {\n    const { start, end } = this.props;\n    const { pos } = this.props.details;\n    const diff = end.minus(start);\n    // If the two endpoints are on top of each other, we simply create a\n    // horizontal arrow.\n    const v1 = diff.magnitude() !== 0\n      ? diff.normalize().scale(ARROW_LENGTH)\n      : new Vector(ARROW_LENGTH, 0);\n    const v2 = v1.perp().scale(1 / 3);\n    const p1 = pos.minus(v1).plus(v2);\n    const p2 = pos.minus(v1).minus(v2);\n    return `M ${p1.x} ${p1.y} L ${pos.x} ${pos.y} L ${p2.x} ${p2.y}`;\n  }\n\n  // For a self-transition, we render the control point as an arrowhead that is\n  // perpendicular to the line connecting it to the node that its arrow\n  // connects.\n  private computeCubicString() {\n    const { start } = this.props;\n    const { pos } = this.props.details;\n    const diff = pos.minus(start);\n    // If the control point is on top of its associated node, we simply create a\n    // horizontal arrow.\n    const v1 = diff.magnitude() !== 0\n      ? diff.normalize()\n      : new Vector(0, 1);\n    const v2 = v1.perp().scale(ARROW_LENGTH);\n    const tip = pos.plus(v2.scale(1 / 2));\n    const p1 = tip.minus(v2).plus(v1.scale(ARROW_LENGTH / 3));\n    const p2 = tip.minus(v2).minus(v1.scale(ARROW_LENGTH / 3));\n    return `M ${p1.x} ${p1.y} L ${tip.x} ${tip.y} L ${p2.x} ${p2.y}`;\n  }\n\n  private handleMouseDown = (e: React.MouseEvent) => {\n    this.props.mouseDown();\n  };\n\n  private handleMouseUp = (e: React.MouseEvent) => {\n    this.props.mouseUp();\n  };\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => {\n  const arrow = arrowById(state, ownProps.details.arrow);\n  const start = nodeById(state, arrow.start);\n  const end = nodeById(state, arrow.end);\n  return {\n    start: start.pos,\n    end: end.pos,\n    isSelfLoop: start.id === end.id,\n    isEditable: isInEditMode(state),\n    isActive: isControlPointActive(state, ownProps.details.id),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch, ownProps: any) => ({\n  mouseDown: () => dispatch(A.mouseDownControlPoint(ownProps.details.id)),\n  mouseUp: () => dispatch(A.mouseUpControlPoint()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ControlPoint);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { TransitionDetail as TransitionDetailInfo } from '../state-mgmt/TransitionDetail';\nimport { TapeDirection, TapeDirections } from '../state-mgmt/Tape';\nimport './TransitionDetail.css';\n\n// Each transition consists of a pair of (not necessarily distinct) states, and\n// 3 pieces of information detailing (1) what tape symbol must be read in order\n// to take the transition, (2) what tape symbol will be written if the\n// transition is taken, and (3) in which direction the tape head should move. A\n// transition detail represents these three pieces of information; together with\n// an arrow it represents a full transition.\n\nexport interface TransitionDetailProps {\n  detail: TransitionDetailInfo;\n  isFocused: boolean;\n  isEditable: boolean;\n  isActive: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  onChange?: (value: TransitionDetailInfo) => void;\n  onDelete?: () => void;\n}\n\nclass TransitionDetail extends React.Component<TransitionDetailProps> {\n  private readRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  render() {\n    const { read, write, move } = this.props.detail;\n\n    const className = classNames('transition-detail', {\n      'transition-detail--active': this.props.isActive,\n    });\n\n    const inputClassName = classNames('transition-detail__input', {\n      'transition-detail__input--focus': this.props.isFocused,\n      'transition-detail__input--editable': this.props.isEditable,\n    });\n\n    // We create a special className for the read input in order to distinguish\n    // inputs in an \"error\" state.\n    const readInputClassName = classNames(inputClassName, {\n      'transition-detail__input--error': this.props.detail.isDuplicate,\n    })\n\n    const selectorClassName = classNames('transition-detail__selector', {\n      'transition-detail__selector--focus': this.props.isFocused,\n      'transition-detail__selector--editable': this.props.isEditable,\n    });\n\n    return (\n      <div className={className}>\n        <input className={readInputClassName}\n               ref={this.readRef}\n               disabled={!this.props.isEditable}\n               value={read}\n               placeholder=\"∅\"\n               onChange={this.handleInputChange('read')}\n               onFocus={this.handleFocus}\n               onBlur={this.handleBlur}\n               type=\"text\"\n               maxLength={1} />\n        <span className=\"transition-detail__separator\">&#47;</span>\n        <input className={inputClassName}\n               disabled={!this.props.isEditable}\n               value={write}\n               placeholder=\"∅\"\n               onChange={this.handleInputChange('write')}\n               onFocus={this.handleFocus}\n               onBlur={this.handleBlur}\n               type=\"text\"\n               maxLength={1} />\n        <select className={selectorClassName}\n                disabled={!this.props.isEditable}\n                value={move}\n                onChange={this.handleSelectChange}>\n          <option value={TapeDirections.L} onMouseDown={this.selectLeft}>←</option>\n          <option value={TapeDirections.R} onMouseDown={this.selectRight}>→</option>\n        </select>\n        {this.props.isEditable &&\n          <button className=\"transition-detail__button\"\n                  onClick={this.handleDeleteClick}>\n          </button>\n        }\n      </div>\n    );\n  }\n\n  // In the meantime, whenever a transition detail is created, it is immediately\n  // focused. This (slight) hack ensures that the browser focus remains\n  // synchronized.\n  componentDidMount() {\n    if (this.props.isFocused) this.focus();\n  }\n\n  private focus() {\n    if (this.readRef.current) this.readRef.current.focus();\n  }\n\n  private handleInputChange(property: 'read' | 'write') {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (!this.props.onChange) return;\n      // We do not allow spaces, since they appear idential to the empty string\n      // and therefore result in a lot of confusion.\n      else if (e.target.value === ' ') return;\n      this.props.onChange({\n        ...this.props.detail,\n        [property]: e.target.value,\n      });\n    };\n  }\n\n  private handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    if (!this.props.onChange) return;\n    this.changeDirection(e.target.value as TapeDirection);\n  };\n\n  // The following two methods are a dirty hack for getting the select to update\n  // with Firefox. For some reason, Firefox is not reporting the correct value\n  // when it fires the \"change\" event. This seems to do the trick, though.\n  private selectLeft = () => {\n    this.changeDirection(TapeDirections.L);\n  };\n\n  private selectRight = () => {\n    this.changeDirection(TapeDirections.R);\n  };\n\n  private changeDirection(direction: TapeDirection) {\n    if (!this.props.onChange) return;\n    this.props.onChange({\n      ...this.props.detail,\n      move: direction,\n    });\n  }\n\n  private handleFocus = () => {\n    if (this.props.onFocus) this.props.onFocus();\n  };\n\n  private handleBlur = () => {\n    if (this.props.onBlur) this.props.onBlur();\n  };\n\n  private handleDeleteClick = () => {\n    if (this.props.onDelete) this.props.onDelete();\n  };\n}\n\nexport default TransitionDetail;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as A from '../state-mgmt/actions';\nimport { State } from '../state-mgmt/state';\nimport { TransitionDetail as TransitionDetailInfo, focusedDetail } from '../state-mgmt/TransitionDetail';\nimport { arrowById } from '../state-mgmt/Arrow';\nimport { nodeById } from '../state-mgmt/Node';\nimport { controlPointForArrow } from '../state-mgmt/ControlPoint';\nimport Vector from '../tools/Vector';\nimport TransitionDetail from '../TransitionDetail/TransitionDetail';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport { activeTransitionDetail } from '../state-mgmt/Sim';\nimport './TransitionDetails.css';\n\n// A single arrow between nodes can represent any number of transitions. In\n// order to display transitions in a compact manner, we group all transition\n// details for a certain arrow together in a \"Transition Details\" component. The\n// details (read/write/move) for each transition are rendered one on top of the\n// other, along with a button for adding new transitions. The main difficulty\n// here is in displaying the details in an aesthetically pleasing way: we want\n// them not to overlap with their associated arrow. To accomplish this, we\n// compute a \"stance\" for the details based on the orientation and curve of\n// their associated arrow -- either top-left, top-right, bottom-left, or\n// bottom-right. We then transform the details via CSS accordingly.\n\nexport interface TransitionDetailsProps {\n  arrowId: string;\n  details: TransitionDetailInfo[];\n  start: Vector;\n  end: Vector;\n  control: Vector;\n  isSelfLoop: boolean;\n  focusedDetail: null | string;\n  isEditable: boolean;\n  activeDetail: null | string;\n  changeDetail: (detail: TransitionDetailInfo) => void;\n  deleteDetail: (id: string, arrow: string) => void;\n  addDetail: (arrow: string) => void;\n  focusDetail: (id: string) => void;\n  blurDetail: (id: string) => void;\n}\n\nclass TransitionDetails extends React.Component<TransitionDetailsProps> {\n  render() {\n    const { details, control } = this.props;\n    const stance = this.computeStance();\n    const className = classNames(\n      'transition-details',\n      `transition-details--${stance}`,\n    );\n\n    return (\n      <div className={className}\n           style={{\n             // We initially anchor the component at its arrow's control point,\n             // and then use CSS transforms to move it according to its computed\n             // stance.\n             position: 'absolute',\n             left: control.x,\n             top: control.y,\n           }}>\n        {this.props.isEditable && !this.isTopStance(stance) && this.renderAddDetailButton()}\n        {details.map(detail => (\n          <TransitionDetail key={detail.id}\n                            detail={detail}\n                            isFocused={this.props.focusedDetail === detail.id}\n                            isEditable={this.props.isEditable}\n                            isActive={!this.props.isEditable && this.props.activeDetail === detail.id}\n                            onChange={this.handleDetailChange}\n                            onDelete={this.handleDetailDelete(detail.id, detail.arrow)}\n                            onFocus={this.handleDetailFocus(detail.id)}\n                            onBlur={this.handleDetailBlur(detail.id)} />\n        ))}\n        {this.props.isEditable && this.isTopStance(stance) && this.renderAddDetailButton()}\n      </div>\n    );\n  }\n\n  private handleDetailChange = (detail: TransitionDetailInfo) => {\n    this.props.changeDetail(detail);\n  };\n\n  private handleDetailDelete(id: string, arrow: string) {\n    return () => this.props.deleteDetail(id, arrow);\n  }\n\n  private handleDetailFocus(id: string) {\n    return () => this.props.focusDetail(id);\n  }\n\n  private handleDetailBlur(id: string) {\n    return () => this.props.blurDetail(id);\n  }\n\n  private handleAddDetailButton(arrow: string) {\n    return () => this.props.addDetail(arrow);\n  };\n\n  // As is often the case here, there are two possibilities to consider: (1) the\n  // details are associated with a self-loop, or (2) with a standard arrow.\n  private computeStance() {\n    if (this.props.isSelfLoop) {\n      return this.computeSelfLoopStance();\n    } else {\n      return this.computeStandardStance();\n    }\n  }\n\n  // In the self-loop case, we simply use the angle between the associated node\n  // and the control point.\n  private computeSelfLoopStance() {\n    const { start, control } = this.props;\n    const theta = control.minus(start).angle();\n    return this.computeClassNameFromAngle(theta);\n  }\n\n  // In the case of the standard stance, we use the angle of the line segment\n  // that passes through the control point perpendicular to the line joining the\n  // two nodes associated with the arrow in question. This seems to work quite\n  // well in keeping the details away from their associated arrow.\n  private computeStandardStance() {\n    const { start, end, control } = this.props;\n    const v1 = control.minus(start);\n    const v2 = v1.project(end.minus(start));\n    const angle = v1.minus(v2).angle();\n    return this.computeClassNameFromAngle(angle);\n  }\n\n  // Here we compute a stance from a given angle. The only tricky thing here is\n  // that the Y-axis is flipped (as is customary). Thus, any intuition about\n  // where the top of the box should go needs to be applied to the bottom, and\n  // vice-versa.\n  private computeClassNameFromAngle(angle: number) {\n    // 1st quadrant\n    if (0 < angle && angle <= Math.PI / 2) return 'top-left';\n    // 2nd quadrant\n    else if (Math.PI / 2 < angle && angle <= Math.PI) return 'top-right';\n    // 3rd quadrant\n    else if (-Math.PI / 2 > angle && angle >= -Math.PI) return 'bottom-right';\n    // 4th quadrant\n    else return 'bottom-left';\n  }\n\n  // In order to keep the details as close to their associated control point as\n  // possible, we render the \"add new\" button away from the control point: if\n  // the computed stance puts the details on top of the control point, we place\n  // the button on top of the details, and vice versa (see the \"render\" method).\n  private isTopStance(anchor: string) {\n    return /^top/.test(anchor);\n  }\n\n  private renderAddDetailButton() {\n    return (\n      <button className=\"transition-details__add-button\"\n              onClick={this.handleAddDetailButton(this.props.arrowId)}>\n        add new\n      </button>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps: any) => {\n  const arrow = arrowById(state, ownProps.arrowId);\n  const start = nodeById(state, arrow.start);\n  const end = nodeById(state, arrow.end);\n  const control = controlPointForArrow(state, arrow.id);\n  return {\n    start: start.pos,\n    end: end.pos,\n    control: control.pos,\n    isSelfLoop: start.id === end.id,\n    focusedDetail: focusedDetail(state),\n    isEditable: isInEditMode(state),\n    activeDetail: activeTransitionDetail(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  changeDetail: (detail: TransitionDetailInfo) => dispatch(A.changeTransitionDetail(detail)),\n  deleteDetail: (id: string, arrow: string) => dispatch(A.deleteTransitionDetail(id, arrow)),\n  addDetail: (arrow: string) => dispatch(A.addTransitionDetail(arrow)),\n  focusDetail: (id: string) => dispatch(A.focusTransitionDetail(id)),\n  blurDetail: (id: string) => dispatch(A.blurTransitionDetail(id)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TransitionDetails);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as A from '../state-mgmt/actions';\nimport { State } from '../state-mgmt/state';\nimport { isAddingNode, mousePos } from '../state-mgmt/UI';\nimport { NODE_RADIUS } from '../Node/Node';\nimport Vector from '../tools/Vector';\nimport './ShadowNode.css';\n\n// When the user is in the process of adding a new node, we render a \"shadow\n// node\" underneath the cursor to indicate the change in state. This node looks\n// much like a real node but lacks all of the functionality.\n\nexport interface ShadowNodeProps {\n  isVisible: boolean;\n  pos: Vector;\n  add: (pos: Vector) => void;\n}\n\nclass ShadowNode extends React.Component<ShadowNodeProps> {\n  render() {\n    const { isVisible, pos } = this.props;\n    return (isVisible &&\n      <div className=\"shadow-node\"\n           onMouseUp={this.handleMouseUp}\n           style={{\n             position: 'absolute',\n             left: pos.x - NODE_RADIUS,\n             top: pos.y - NODE_RADIUS - 2,\n           }}/>\n    );\n  }\n\n  private handleMouseUp = (e: React.MouseEvent) => {\n    this.props.add(this.props.pos);\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  isVisible: isAddingNode(state),\n  pos: mousePos(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  add: (pos: Vector) => dispatch(A.addNode(pos)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ShadowNode);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as A from '../state-mgmt/actions';\nimport { State } from '../state-mgmt/state';\nimport{ Arrow as ArrowDetails, allArrows } from '../state-mgmt/Arrow';\nimport { Node as NodeDetails, allNodes } from '../state-mgmt/Node';\nimport { ControlPoint as ControlPointDetails, allControlPoints } from '../state-mgmt/ControlPoint';\nimport { TransitionDetail, allGroupedTransitionDetails } from '../state-mgmt/TransitionDetail';\nimport Arrow from '../Arrow/Arrow';\nimport Node from '../Node/Node';\nimport ControlPoint from '../ControlPoint/ControlPoint';\nimport TransitionDetails from '../TransitionDetails/TransitionDetails';\nimport ShadowNode from '../ShadowNode/ShadowNode';\nimport Vector from '../tools/Vector';\nimport './Canvas.css';\n\n// The canvas is the editing surface for the machine. It is responsible for\n// rendering all nodes, arrows, control points, and transition details.\n\nexport interface CanvasProps {\n  arrows: ArrowDetails[];\n  nodes: NodeDetails[];\n  controlPoints: ControlPointDetails[];\n  transitionDetails: { [key: string]: TransitionDetail[] };\n  mouseDown: (pos: Vector) => void;\n  mouseUp: () => void;\n  mouseMove: (pos: Vector) => void;\n}\n\nclass Canvas extends React.Component<CanvasProps> {\n  render() {\n    const { arrows, nodes, controlPoints, transitionDetails } = this.props;\n    // This configuration probably warrants an explanation. Some of the machine\n    // components (e.g. arrows, control points) need to be rendered in an SVG\n    // context. However, we cannot render the nodes and transition details\n    // inside of one (strictly speaking, we could use \"foreignObject\" elements,\n    // but this proved to be far more complicated). Therefore, we render an SVG\n    // element inside of a containing div, and render the HTML elements inside\n    // of the latter.\n    return (\n      <div className=\"canvas\"\n             onMouseDown={this.handleMouseDown}\n             onMouseUp={this.handleMouseUp}\n             onMouseMove={this.handleMouseMove}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\n             width=\"100%\"\n             height=\"100%\">\n          {arrows.map(details => <Arrow key={details.id} details={details} />)}\n          {controlPoints.map(details => <ControlPoint key={details.id} details={details} />)}\n        </svg>\n        {nodes.map(details => <Node key={details.id} details={details} />)}\n        {Object.keys(transitionDetails).map(arrowId => (\n          <TransitionDetails key={arrowId} arrowId={arrowId} details={transitionDetails[arrowId]} />\n        ))}\n        <ShadowNode />\n      </div>\n    );\n  }\n\n  private handleMouseDown = (e: React.MouseEvent) => {\n    this.props.mouseDown(this.computeMousePos(e));\n  };\n\n  private handleMouseUp = () => {\n    this.props.mouseUp();\n  };\n\n  // We call \"preventDefault\" on the event in order to prevent the annoying text\n  // highlighting behavior that occurs when the user drags entities around on\n  // the screen.\n  private handleMouseMove = (e: React.MouseEvent) => {\n    e.preventDefault();\n    this.props.mouseMove(this.computeMousePos(e));\n  };\n\n  // Here we compute the position of the mouse relative to the canvas itself\n  // (rather than the browser client, or some other frame of reference).\n  private computeMousePos(e: React.MouseEvent) {\n    const { left, top } = e.currentTarget.getBoundingClientRect();\n    const { clientX, clientY } = e;\n    return new Vector(clientX - left, clientY - top);\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  arrows: allArrows(state),\n  nodes: allNodes(state),\n  controlPoints: allControlPoints(state),\n  transitionDetails: allGroupedTransitionDetails(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  mouseDown: (pos: Vector) => dispatch(A.mouseDownCanvas(pos)),\n  mouseUp: () => dispatch(A.mouseUpCanvas()),\n  mouseMove: (pos: Vector) => dispatch(A.mouseMoveCanvas(pos)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Canvas);\n","import { State } from './state';\nimport { selectedNodes } from './Node';\n\n// Produces a list of all button types which should be displayed given the\n// current state.\nexport const whichButtonTypes = (state: State): EditButtonType[] => {\n  const selectedCount = selectedNodes(state).length;\n  switch (selectedCount) {\n    case 0: return [\n      EditButtonTypes.ADD_STATE,\n    ];\n    case 1: return [\n      EditButtonTypes.ADD_STATE,\n      EditButtonTypes.REMOVE_STATE,\n      EditButtonTypes.ADD_SELF_TRANSITION,\n      EditButtonTypes.MAKE_START,\n      EditButtonTypes.TOGGLE_ACCEPTING,\n    ];\n    case 2: return [\n      EditButtonTypes.ADD_STATE,\n      EditButtonTypes.REMOVE_TWO_STATES,\n      EditButtonTypes.ADD_TRANSITION,\n      EditButtonTypes.TOGGLE_TWO_ACCEPTING,\n    ];\n    default: return [\n      EditButtonTypes.ADD_STATE,\n      EditButtonTypes.REMOVE_MANY_STATES,\n      EditButtonTypes.TOGGLE_MANY_ACCEPTING,\n    ];\n  }\n};\n\nexport type EditButtonType = 'ADD_STATE'\n                           | 'REMOVE_STATE'\n                           | 'REMOVE_TWO_STATES'\n                           | 'REMOVE_MANY_STATES'\n                           | 'ADD_SELF_TRANSITION'\n                           | 'ADD_TRANSITION'\n                           | 'MAKE_START'\n                           | 'UNMAKE_START'\n                           | 'TOGGLE_ACCEPTING'\n                           | 'TOGGLE_TWO_ACCEPTING'\n                           | 'TOGGLE_MANY_ACCEPTING';\n\nexport const EditButtonTypes: { [key: string]: EditButtonType } = {\n  ADD_STATE: 'ADD_STATE',\n  REMOVE_STATE: 'REMOVE_STATE',\n  REMOVE_TWO_STATES: 'REMOVE_TWO_STATES',\n  REMOVE_MANY_STATES: 'REMOVE_MANY_STATES',\n  ADD_SELF_TRANSITION: 'ADD_SELF_TRANSITION',\n  ADD_TRANSITION: 'ADD_TRANSITION',\n  MAKE_START: 'MAKE_START',\n  UNMAKE_START: 'UNMAKE_START',\n  TOGGLE_ACCEPTING: 'TOGGLE_ACCEPTING',\n  TOGGLE_TWO_ACCEPTING: 'TOGGLE_TWO_ACCEPTING',\n  TOGGLE_MANY_ACCEPTING: 'TOGGLE_MANY_ACCEPTING',\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { State } from '../state-mgmt/state';\nimport *  as A from '../state-mgmt/actions';\nimport { whichButtonTypes, EditButtonType, EditButtonTypes } from '../state-mgmt/EditControls';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport './EditControls.css';\n\nexport interface EditControlsProps {\n  inEditMode: boolean;\n  buttonTypes: EditButtonType[];\n  undo: () => void;\n  redo: () => void;\n  addState: () => void;\n  removeStates: () => void;\n  addTransition: () => void;\n  makeStart: () => void;\n  toggleFinal: () => void;\n}\n\nclass EditControls extends React.Component<EditControlsProps> {\n  render() {\n    return (\n      <div className=\"edit-controls\">\n        <div className=\"edit-controls__undo-redo-buttons\">\n          <button className=\"edit-controls__button edit-controls__undo-button\"\n                  title=\"undo\"\n                  onClick={this.handleUndoButtonClick} />\n          <button className=\"edit-controls__button edit-controls__redo-button\"\n                  title=\"redo\"\n                  onClick={this.handleRedoButtonClick} />\n        </div>\n\n        {this.props.inEditMode && this.props.buttonTypes.map(type => {\n          const config = this.buttonConfig[type];\n          return config && (\n            <button className={`edit-controls__button edit-controls__${config.className}-button`}\n                    title={config.title}\n                    key={type}\n                    onClick={config.action} />\n          );\n        })}\n      </div>\n    );\n  }\n\n  private handleUndoButtonClick = () => {\n    this.props.undo();\n  };\n\n  private handleRedoButtonClick = () => {\n    this.props.redo();\n  };\n\n  private buttonConfig: { [key: string]: { action: () => void, className: string, title: string } } = {\n    [EditButtonTypes.ADD_STATE]: {\n      action: () => this.props.addState(),\n      className: 'add-state',\n      title: 'add new state',\n    },\n    [EditButtonTypes.REMOVE_STATE]: {\n      action: () => this.props.removeStates(),\n      className: 'remove-state',\n      title: 'remove state',\n    },\n    [EditButtonTypes.REMOVE_TWO_STATES]: {\n      action: () => this.props.removeStates(),\n      className: 'remove-two-states',\n      title: 'remove states',\n    },\n    [EditButtonTypes.REMOVE_MANY_STATES]: {\n      action: () => this.props.removeStates(),\n      className: 'remove-many-states',\n      title: 'remove states',\n    },\n    [EditButtonTypes.ADD_SELF_TRANSITION]: {\n      action: () => this.props.addTransition(),\n      className: 'add-self-transition',\n      title: 'add self transition',\n    },\n    [EditButtonTypes.ADD_TRANSITION]: {\n      action: () => this.props.addTransition(),\n      className: 'add-transition',\n      title: 'add transition',\n    },\n    [EditButtonTypes.MAKE_START]: {\n      action: () => this.props.makeStart(),\n      className: 'make-start',\n      title: 'distinguish as initial state',\n    },\n    [EditButtonTypes.TOGGLE_ACCEPTING]: {\n      action: () => this.props.toggleFinal(),\n      className: 'toggle-accepting',\n      title: 'toggle state\\'s status as final'\n    },\n    [EditButtonTypes.TOGGLE_TWO_ACCEPTING]: {\n      action: () => this.props.toggleFinal(),\n      className: 'toggle-two-accepting',\n      title: 'toggle states\\' statuses as final',\n    },\n    [EditButtonTypes.TOGGLE_MANY_ACCEPTING]: {\n      action: () => this.props.toggleFinal(),\n      className: 'toggle-many-accepting',\n      title: 'toggle states\\' statuses as final',\n    },\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  inEditMode: isInEditMode(state),\n  buttonTypes: whichButtonTypes(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  undo: () => dispatch(A.undo()),\n  redo: () => dispatch(A.redo()),\n  addState: () => dispatch(A.startAddingNode()),\n  removeStates: () => dispatch(A.deleteSelectedNodes()),\n  addTransition: () => dispatch(A.addTransitionBetweenSelected()),\n  makeStart: () => dispatch(A.makeSelectedStartNode()),\n  toggleFinal: () => dispatch(A.toggleSelectedFinalNodes()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(EditControls);\n","import React from 'react';\nimport './AppControls.css';\n\nexport interface AppControlsProps {}\n\nclass AppControls extends React.Component<AppControlsProps> {\n  render() {\n    return (\n      <div className=\"app-controls\">\n        <div className=\"app-controls__buttons\">\n          <button className=\"app-controls__button app-controls__download-button\"\n                  title=\"download machine (JSON)\">\n          </button>\n          <button className=\"app-controls__button app-controls__upload-button\"\n                  title=\"upload machine (JSON)\">\n          </button>\n        </div>\n\n        <a className=\"app-controls__link\" href=\"#examples\">Examples</a>\n        <a className=\"app-controls__link\" href=\"#tutorial\">Tutorial</a>\n        <a className=\"app-controls__link\" href=\"#guide\">Guide</a>\n        <a className=\"app-controls__link\" href=\"#about\">About</a>\n        <a className=\"app-controls__link app-controls__source-link\"\n           href=\"https://github.com/wjlewis/tm\"\n           target=\"_blank\"\n           rel=\"noopener noreferrer\">\n          &lt;Source&#47;&gt;\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default AppControls;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport classNames from 'classnames';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { tapeEntries, focusedTapeCell, CELL_WIDTH, VISIBLE_CELL_COUNT } from '../state-mgmt/Tape';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport './Tape.css';\n\nexport interface TapeProps {\n  entries: string[];\n  isEditable: boolean;\n  focusedCell: null | number;\n  changeCell: (pos: number, value: string) => void;\n  updateScrollLeft: (scrollLeft: number) => void;\n  focusCell: (pos: number) => void;\n  clear: () => void;\n}\n\nclass Tape extends React.Component<TapeProps> {\n  private tapeRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  render() {\n    const { isEditable } = this.props;\n\n    const cellClassName = classNames('tape__cell', {\n      'tape__cell--editable': isEditable,\n    });\n\n    const leftPaddingWidth = CELL_WIDTH * VISIBLE_CELL_COUNT / 2;\n\n    return (\n      <>\n        {this.renderReadHead()}\n        <div className=\"tape\"\n             ref={this.tapeRef}\n             onScroll={this.handleScroll}\n             style={{ width: `${CELL_WIDTH * VISIBLE_CELL_COUNT}px` }}>\n          <div className=\"tape__cells\">\n            <div className=\"tape__padding-left\" style={{ width: leftPaddingWidth }}>\n            ⇐&ensp;this half intentionally left blank\n            </div>\n            {this.props.entries.map((l, i) => (\n              <input key={i}\n                     disabled={!this.props.isEditable}\n                     className={cellClassName}\n                     value={l}\n                     placeholder=\"∅\"\n                     onChange={this.handleCellChange(i)}\n                     onFocus={this.handleCellFocus(i)}\n                     style={{ width: `${CELL_WIDTH}px` }}\n                     type=\"text\"\n                     maxLength={1} />\n            ))}\n            <div className=\"tape__padding-right\" style={{ width: `${CELL_WIDTH / 2}px` }} />\n          </div>\n        </div>\n        {this.renderFeeders()}\n        {this.renderClearButton()}\n      </>\n    );\n  }\n\n  componentDidMount() {\n    if (this.tapeRef.current) {\n      this.tapeRef.current.scrollTo(CELL_WIDTH / 2, 0);\n    }\n  }\n\n  componentDidUpdate(oldProps: TapeProps) {\n    if (oldProps.focusedCell !== this.props.focusedCell && this.props.focusedCell !== null) {\n      this.updateFocus();\n    }\n  }\n\n  // After typing a character, we move the focus to the next available cell.\n  // This allows a user to use the tape almost like a normal text input.\n  private updateFocus() {\n    if (this.tapeRef.current) {\n      const cellContainer = this.tapeRef.current.childNodes[0];\n      const cellToFocus = cellContainer.childNodes[this.props.focusedCell as number + 1];\n      if (cellToFocus) (cellToFocus as HTMLInputElement).focus();\n    }\n  }\n\n  private handleCellChange(pos: number) {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      // We don't allow the user to input spaces, since they appear identical to\n      // the empty string and therefore create a lot of confusion.\n      if (e.target.value === ' ') return;\n      this.props.changeCell(pos, e.target.value);\n    };\n  }\n\n  private handleCellFocus(pos: number) {\n    return () => {\n      this.props.focusCell(pos);\n    };\n  }\n\n  private handleScroll = (e: any) => {\n    this.props.updateScrollLeft(e.target.scrollLeft);\n  };\n\n  private handleClearButtonClick = () => {\n    this.props.clear();\n  };\n\n  // The read head and feeders exist entirely for aesthetic reasons; they are\n  // also unfortunately complicated-looking, due to the fact that they must be\n  // positioned outside of the tape itself. For these reasons, I've relegated\n  // them to these separate definitions.\n  private renderReadHead() {\n    const className = classNames('tape-reader', {\n      'tape-reader--active': !this.props.isEditable,\n    });\n    return (\n      <div className={className}\n           style={{\n             position: 'absolute',\n             left: `calc(50% - ${CELL_WIDTH / 2}px)`,\n           }} />\n    );\n  }\n\n  private renderClearButton() {\n    return (\n      <button className=\"tape__clear-button\"\n              title=\"clear tape contents\"\n              onClick={this.handleClearButtonClick}\n              style={{\n                position: 'absolute',\n                right: `calc(50% - ${CELL_WIDTH * VISIBLE_CELL_COUNT / 2 + 70}px)`,\n              }} />\n    );\n  }\n\n  private renderFeeders() {\n    const FEEDER_WIDTH = 12;\n    return (\n      <>\n        <div className=\"tape-feed tape-feed__left\"\n             style={{\n               position: 'absolute',\n               left: `calc(50% - ${CELL_WIDTH * VISIBLE_CELL_COUNT / 2 + FEEDER_WIDTH / 2}px)`,\n             }} />\n        <div className=\"tape-feed tape-feed__right\"\n             style={{\n               position: 'absolute',\n               right: `calc(50% - ${CELL_WIDTH * VISIBLE_CELL_COUNT / 2 + FEEDER_WIDTH / 2}px)`,\n             }} />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => ({\n  entries: tapeEntries(state),\n  isEditable: isInEditMode(state),\n  focusedCell: focusedTapeCell(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  changeCell: (pos: number, value: string) => dispatch(A.changeTapeCell(pos, value)),\n  updateScrollLeft: (scrollLeft: number) => dispatch(A.updateScrollLeft(scrollLeft)),\n  focusCell: (pos: number) => dispatch(A.focusTapeCell(pos)),\n  clear: () => dispatch(A.clearTape()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Tape);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { isInEditMode } from '../state-mgmt/Mode';\nimport './SimControls.css';\n\nexport interface SimControlsProps {\n  reset: () => void;\n  pause: () => void;\n  step: () => void;\n  play: () => void;\n  isInEditMode: boolean;\n}\n\nclass SimControls extends React.Component<SimControlsProps> {\n  render() {\n    const { isInEditMode } = this.props;\n    return (\n      <div className=\"sim-controls\">\n        <button onClick={this.reset}>\n          Reset\n        </button>\n        <button onClick={this.togglePlayPause}>\n          {isInEditMode ? 'Play' : 'Pause'}\n        </button>\n        <button disabled={!isInEditMode}\n                onClick={this.step}>\n          Step\n        </button>\n      </div>\n    );\n  }\n\n  private reset = () => {\n    this.props.reset();\n  };\n\n  private togglePlayPause = () => {\n    if (this.props.isInEditMode) this.props.play();\n    else this.props.pause();\n  };\n\n  private step = () => {\n    this.props.step();\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  isInEditMode: isInEditMode(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  reset: () => dispatch(A.resetSim()),\n  pause: () => dispatch(A.pauseSim()),\n  step: () => dispatch(A.stepSim()),\n  play: () => dispatch(A.playSim()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SimControls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { State } from '../state-mgmt/state';\nimport * as A from '../state-mgmt/actions';\nimport { showMessage, messageTitle, messageContent } from '../state-mgmt/Message';\nimport './Message.css';\n\nexport interface MessageProps {\n  show: boolean;\n  title: null | string;\n  content: null | string | JSX.Element;\n  dismiss: () => void;\n}\n\nclass Message extends React.Component<MessageProps> {\n  render() {\n    return this.props.show && (\n      <div className=\"message__container\" onClick={this.dismiss}>\n        <div className=\"message\" onClick={this.handleMessageClick}>\n          <h1 className=\"message__title\">{this.props.title}</h1>\n          <div className=\"message__content\">{this.props.content}</div>\n          <button className=\"message__dismiss-button\"\n                  onClick={this.dismiss}>\n            Dismiss\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  private handleMessageClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  private dismiss = () => {\n    this.props.dismiss();\n  };\n}\n\nconst mapStateToProps = (state: State) => ({\n  show: showMessage(state),\n  title: messageTitle(state),\n  content: messageContent(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  dismiss: () => dispatch(A.dismissMessage()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Message);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { keyDown, keyUp } from '../state-mgmt/actions';\nimport Canvas from '../Canvas/Canvas';\nimport EditControls from '../EditControls/EditControls';\nimport AppControls from '../AppControls/AppControls';\nimport Tape from '../Tape/Tape';\nimport SimControls from '../SimControls/SimControls';\nimport Message from '../Message/Message';\nimport './App.css';\n\n// The entire app consists of only a few components: a \"canvas\" for displaying\n// the machine state editing UI, the machine's tape, some buttons that perform\n// various editing tasks, and some buttons for starting, pausing, stepping, and\n// resetting the machine.\n\nexport interface AppProps {\n  keyDown: (key: string, event: React.KeyboardEvent) => void;\n  keyUp: (key: string) => void;\n}\n\nclass App extends React.Component<AppProps> {\n  render() {\n    return (\n      <div className=\"app\">\n        <Canvas />\n        <Tape />\n        <EditControls />\n        <AppControls />\n        <SimControls />\n        <Message />\n      </div>\n    );\n  }\n\n  // We add the keyboard listeners to the document so that the user does not\n  // need to focus any element before keypresses can be recorded.\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown as unknown as EventListener);\n    document.addEventListener('keyup', this.handleKeyUp as unknown as EventListener);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown as unknown as EventListener);\n    document.removeEventListener('keyup', this.handleKeyUp as unknown as EventListener);\n  }\n\n  private handleKeyDown = (e: React.KeyboardEvent) => {\n    this.props.keyDown(e.key, e);\n  };\n\n  private handleKeyUp = (e: React.KeyboardEvent) => {\n    this.props.keyUp(e.key);\n  };\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  keyDown: (key: string, event: React.KeyboardEvent) => dispatch(keyDown(key, event)),\n  keyUp: (key: string) => dispatch(keyUp(key)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './state-mgmt/store';\nimport App from './App/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}